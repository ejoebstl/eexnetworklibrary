<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eExNetworkLibrary</name>
    </assembly>
    <members>
        <member name="T:eExNetworkLibrary.Subnetmask">
            <summary>
            Represents a IPv4 subnetmask
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Subnetmask.#ctor">
            <summary>
            Creates a new IPv4 subnetmask with the value 0.0.0.0
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Subnetmask.#ctor(System.Byte[])">
            <summary>
            Creates a new IPv4 subnetmask with the given value
            </summary>
            <param name="bMaskBytes">The value to assign to the subnetmask. This value will be copied.</param>
        </member>
        <member name="M:eExNetworkLibrary.Subnetmask.Parse(System.String)">
            <summary>
            Parses a string to a subnetmask. The string has to be in the format X.X.X.X where X is a number between 0 and 255
            </summary>
            <param name="strString">The string to parse</param>
            <returns>A subnetmask</returns>
        </member>
        <member name="M:eExNetworkLibrary.Subnetmask.ToString">
            <summary>
            Returns the string representation of this subnetmask
            </summary>
            <returns>The string representation of this subnetmask</returns>
        </member>
        <member name="M:eExNetworkLibrary.Subnetmask.Equals(System.Object)">
            <summary>
            Determines whether this subnetmask equals another subnetmask
            </summary>
            <param name="obj">An object to compare to this subnetmask</param>
            <returns>True, if the <paramref name="obj"/>equals this subnetmask, false if not.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Subnetmask.GetHashCode">
            <summary>
            Returns the hash code of this subnetmask.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:eExNetworkLibrary.Subnetmask.TryParse(System.String,eExNetworkLibrary.Subnetmask@)">
            <summary>
            Tries to parse a string to a subnetmask.
            </summary>
            <param name="strMask">The string to parse</param>
            <param name="sSubnetmask">The subnetmask to return</param>
            <returns>True, if parsing was successfull, false if not</returns>
        </member>
        <member name="P:eExNetworkLibrary.Subnetmask.MaskBytes">
            <summary>
            Gets or sets the mask bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Subnetmask.IntNotation">
            <summary>
            Gets the integer form of this subnetmask, e.g. 4294967040 for 255.255.255.0
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Subnetmask.SlashNotation">
            <summary>
            Gets the slash notation of this subnetmask, e.g. 24 for 255.255.255.0
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFRouter">
            <summary>
            A very, very, very sloppy OSPF implementation. Man, what do 
            you estaminate for a planned time of 2 weeks for this task?
            If you want do do this task better than I did, refer 
            to http://www.freesoft.org/CIE/RFC/1583/ and code 
            like the wind. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DirectInterfaceIOHandler">
            <summary>
            This class represents a traffic handler which is capable of receiving and forwarding traffic directly from an interface and to other traffic handlers.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficHandler">
            <summary>
            This class represents a Traffic Handler, a basic component for traffic analyzing and modifying.
            All traffic analyzers, modifiers and interfaces must derive from this class.
            <remarks>
            <b>Threading issues</b>
            This class owns one worker thread which calls HandleTraffic and all methods which are invoked by calls to the ISynchronizeInvoke interface. 
            Thread safety for all objects which can be accessed from the outside has to be ensured. 
            Invoking methods over ISynchronizeInvoke to prevent cross thread operations is not forced by this class. 
            </remarks>
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.RunningObject">
            <summary>
            This class represents a running object
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.RunningObject.bIsRunning">
            <summary>
            This variable has to be set true or false according to the objects running state..
            E.g. if the object's worker threads are supposed to stop, bSouldRun should be set to false.
            As soon as the worker threads really exit, bIsRunning is set to false.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.RunningObject.bSouldRun">
            <summary>
            This variable has to be set true or false according to the objects desireable running state.
            E.g. if the object's worker threads are supposed to stop, bSouldRun should be set to false.
            As soon as the worker threads really exit, bIsRunning is set to false.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.Stop">
            <summary>
            A method called to stop the current running object.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.Start">
            <summary>
            A method called to start the current running object.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.Pause">
            <summary>
            A method called to pause the current running object.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.Dispose">
            <summary>
            Disposes this running object
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.Finalize">
            <summary>
            Disposes this running object
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.InvokeExternal(System.Delegate,System.Object)">
            <summary>
            Invokes a delegate on any external object with the given params and waits for the invoke's completion.
            This method automatically determines whether dynamic invoking is possible or a invoke over the ISynchronizeInvoke interface is required.
            </summary>
            <param name="d">The delgate to invoke</param>
            <param name="param">The params for the invocation</param>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.InvokeExternalAsync(System.Delegate,System.Object)">
            <summary>
            Invokes a delegate asyncronously on any external object with the given params.
            This method automatically determines whether dynamic invoking is possible or a invoke over the ISynchronizeInvoke interface is required.
            </summary>
            <param name="d">The delgate to invoke</param>
            <param name="param">The params for the invocation</param>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.InvokeExternalAsync(System.Delegate)">
            <summary>
            Invokes a delegate asyncronously on any external object with EventArgs.Empty as params.
            This method automatically determines whether dynamic invoking is possible or a invoke over the ISynchronizeInvoke interface is required.
            </summary>
            <param name="d">The delgate to invoke</param>
        </member>
        <member name="M:eExNetworkLibrary.RunningObject.InvokeExternal(System.Delegate)">
            <summary>
            Invokes a delegate on any external object with EventArgs.Empty as params and waits for the invoke's completion.
            This method automatically determines whether dynamic invoking is possible or a invoke over the ISynchronizeInvoke interface is required.
            </summary>
            <param name="d">The delgate to invoke</param>
        </member>
        <member name="P:eExNetworkLibrary.RunningObject.IsRunning">
            <summary>
            Returns a bool indicating whether this running object is running.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficHandler.thNextHandler">
            <summary>
            This traffic handlers default output handler. All forwarded frames will be pushed to this handlers queue. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.ContainsDroppedTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            This method returns whether a traffic analyzer is contained in this traffic handlers drop analyzer list
            </summary>
            <param name="taAnalyzer">A traffic analyzer</param>
            <returns>A bool indicating whether a traffic analyzer is contained in this traffic handlers drop analyzer list</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.AddDroppedTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            This method adds a traffic analyzer to this handlers drop analyzer list. All dropped frames will be forwarded to this traffic analyzer.
            </summary>
            <param name="taAnalyzer">The traffic analyzer to add</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.RemoveDroppedTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            This method removes a traffic analyzer from this handlers drop analyzer list.
            </summary>
            <param name="taAnalyzer">The traffic analyzer to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.GetDroppedTrafficAnalyzers">
            <summary>
            This method returns all drop analyzers associated with this traffic handler.
            </summary>
            <returns>An array containing ll drop analyzers associated with this traffic handler</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.Start">
            <summary>
            This method starts this traffic handlers worker threads.
            This method must be called to make this traffic handler do its work.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.GetIPv4Frame(eExNetworkLibrary.Frame)">
            <summary>
            Gets the IPv4 frame from an abstract frame or returns null in case no IPv4 frame exists.
            </summary>
            <param name="fInputFrame">The abstract input frame</param>
            <returns>An IPv4 frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.GetFrameByType(eExNetworkLibrary.Frame,eExNetworkLibrary.FrameType)">
            <summary>
            Gets the a frame specified by its type from an abstract frame or returns null in case no frame with this type exists.
            </summary>
            <param name="fInputFrame">The abstract input frame</param>
            <param name="fFrameType">The frame type to search for</param>
            <returns>An frame with the specified type</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.Cleanup">
            <summary>
            This method starts the handlers cleanup process which will release network resources or remote allocated resources. It should be called before stopping the handler to ensure a clean shutdown.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.GetARPFrame(eExNetworkLibrary.Frame)">
            <summary>
            Gets the arp frame from an abstract frame or returns null in case no arp frame exists.
            </summary>
            <param name="fInputFrame">The abstract input frame</param>
            <returns>An arp frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.GetEthernetFrame(eExNetworkLibrary.Frame)">
            <summary>
            Gets the ethernet frame from an abstract frame or returns null in case no ethernet frame exists.
            </summary>
            <param name="fInputFrame">The abstract input frame</param>
            <returns>An ethernet frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.GetTCPFrame(eExNetworkLibrary.Frame)">
            <summary>
            Gets the TCP frame from an abstract frame or returns null in case no TCP frame exists.
            </summary>
            <param name="fInputFrame">The abstract input frame</param>
            <returns>An TCP frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.GetUDPFrame(eExNetworkLibrary.Frame)">
            <summary>
            Gets the UDP frame from an abstract frame or returns null in case no UDP frame exists.
            </summary>
            <param name="fInputFrame">The abstract input frame</param>
            <returns>An UDP frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.PushTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Pushes a frame in this handler input-queue. 
            </summary>
            <param name="fInputFrame">The frame to handle</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.Stop">
            <summary>
            Stops this handlers worker threads.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.MainWorkingLoopTask(eExNetworkLibrary.Frame)">
            <summary>
            This task will be executed for every frame in the input queue
            Per default, it simply calls the HandleTraffic method and does some exception handling.
            </summary>
            <param name="fInputFrame">The frame to process</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            This method is called for every frame in the input queue per default. It should be used to process received traffic.
            </summary>
            <param name="fInputFrame">The frame to process</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.Pause">
            <summary>
            This method can be used to pause the traffic handler.
            <remarks>Per default this method simply calls stop.s</remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.NotifyNext(eExNetworkLibrary.Frame)">
            <summary>
            This method is used to forward a frame to the output handler of this traffic handler and invokes the FrameForwarded event.
            </summary>
            <param name="fInputFrame">The frame to forward</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.InvokeFrameDropped">
            <summary>
            Raises the FrameDropped event.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.InvokeExceptionThrown(System.Exception)">
            <summary>
            Rises the ExceptionThrown event with the given params
            </summary>
            <param name="ex">The exception which occoured</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.InvokePropertyChanged">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.InvokeFrameForwarded">
            <summary>
            Raises the FrameForwarded event.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.InvokeFrameReceived">
            <summary>
            Raises the FrameReceived event.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.PushDroppedFrame(eExNetworkLibrary.Frame)">
            <summary>
            Forwards a dropped frame to all connected drop analyzers and invokes the FrameDropped event.
            </summary>
            <param name="fFrame">The frame to forward.</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Invokes a delegate asyncronously in this handlers thread context.
            </summary>
            <param name="method">The method to invoke</param>
            <param name="args">The params for the invokation</param>
            <returns>A IAsyncResult associated with the invocation process</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.EndInvoke(System.IAsyncResult)">
            <summary>
            Waits for an invocation process to finish
            </summary>
            <param name="result">The IAsyncResult associated with the invocation process to wait for</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficHandler.Invoke(System.Delegate,System.Object[])">
            <summary>
            Invokes a delegate syncronously in this handlers thread context.
            </summary>
            <param name="method">The method to invoke</param>
            <param name="args">The params for the invokation</param>
            <returns>The result of the operation</returns>
        </member>
        <member name="E:eExNetworkLibrary.TrafficHandler.PropertyChanged">
            <summary>
            This event will be fired whenever a property which is not associated to a special event is changed.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.TrafficHandler.FrameForwarded">
            <summary>
            This event will be fired when a frame is forwarded to the next traffic handler.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.TrafficHandler.FrameDropped">
            <summary>
            This event will be fired when a frame is dropped.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.TrafficHandler.FrameReceived">
            <summary>
            This event will be fired when a frame is received.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.TrafficHandler.ExceptionThrown">
            <summary>
            This event will be fired when an internal processing error occours. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficHandler.Name">
            <summary>
            Gets or sets this traffic handlers name. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficHandler.OutputHandler">
            <summary>
            Gets or sets this traffic handlers default output handler. All forwarded frames will be pushed to this handlers queue. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficHandler.QueueEmpty">
            <summary>
            Gets a bool indicating whether the input queue of this handler is empty.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficHandler.InvokeRequired">
            <summary>
            Determines whether an invoke is required. 
            Invoking synchronously if this property returns true is a recommendation.
            Simply calling a method without invoking it could lead to unexpected errors.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficHandler.ExceptionEventHandler">
            <summary>
            A delegate for exception handling.
            </summary>
            <param name="sender">The class which fired this event</param>
            <param name="args">The exception arguments</param>
        </member>
        <member name="F:eExNetworkLibrary.DirectInterfaceIOHandler.lInterfaces">
            <summary>
            A list containing all associated interfaces
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DirectInterfaceIOHandler.lLocalAdresses">
            <summary>
            A list containing all IPAddresses of all associated interfaces
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DirectInterfaceIOHandler.iDroppedPackets">
            <summary>
            A counter counting all dropped packets
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DirectInterfaceIOHandler.iReceivedPackets">
            <summary>
            A conter counting all received packets
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.ContainsLocalAddress(System.Net.IPAddress)">
            <summary>
            Returns a bool indicating whether an IPAddress is used by one of the connected interfaces
            </summary>
            <param name="ipa">The IPAddress to search for</param>
            <returns>A bool indicating whether an IPAddress is used by one of the connected interfaces</returns>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.GetLocalAdresses">
            <summary>
            Returns all addresses used in connected interfaces
            </summary>
            <returns>All addresses used in connected interfaces</returns>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.GetInterfaces">
            <summary>
            Returns all connected interfaces.
            </summary>
            <returns>All connected interfaces</returns>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.AddInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Connects an interface
            </summary>
            <param name="ipInterface">The interface to connect</param>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.ContainsInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Returns a bool indicating if a specific interface is associated with this direct interface IO handler
            </summary>
            <param name="ipInterface">The interface to search for</param>
            <returns>A bool indicating if a specific interface is associated with this direct interface IO handler</returns>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.RemoveInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Removes an interface
            </summary>
            <param name="ipInterface">The interface to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.Stop">
            <summary>
            Stops this handlers worker threads
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.Start">
            <summary>
            Starts this handlers worker threads
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.Pause">
            <summary>
            Stops this handlers worker threads
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Sends the given frame out to all connected interfaces without changing it.
            </summary>
            <param name="fInputFrame">The frame to send</param>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.InvokeInterfaceFrameReceived">
            <summary>
            Rises the FrameReceived event.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.InvokeInterfaceFramePushed">
            <summary>
            Rises the FramePushed event.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DirectInterfaceIOHandler.Cleanup">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.DirectInterfaceIOHandler.InterfaceFramePushed">
            <summary>
            This event is fired, when a frame is pushed to the associated interface
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.DirectInterfaceIOHandler.InterfaceFrameReceived">
            <summary>
            This event is firead when a frame is received from the associated interface
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DirectInterfaceIOHandler.DroppedPackets">
            <summary>
            Gets the count of dropped packets
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DirectInterfaceIOHandler.ReceivedPackets">
            <summary>
            Gets the count of received packets
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFRouter.UpdateAreaLSA(System.UInt32)">
            <summary>
            Updates the information about the local router in an LS database for an area.
            </summary>
            <param name="iAreaID">The ID of the area to update</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFRouter.UpdateAreaLSA(eExNetworkLibrary.Routing.OSPF.OSPFArea)">
            <summary>
            Updates the information about the local router in an LS database for an area.
            </summary>
            <param name="aArea">The area to update</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFRouter.NeighborError(eExNetworkLibrary.Routing.OSPF.IOSPFRouter)">
            <summary>
            On Neighbour error - Simply kill.
            </summary>
            <param name="ospfNeigh">The neighbour to remove</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.DirectAttachedNetwork.BDR">
            <summary>
            Sets the OSPF backup designated router. Setting it to null will cause the local OSPF instance to become BDR.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.DirectAttachedNetwork.DR">
            <summary>
            Sets the OSPF designated router. Setting it to null will cause the local OSPF instance to become DR.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage">
            <summary>
            This class represents an OSPF hello message
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Frame">
            <summary>
            This class represents an abstract captured network frame.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Frame.fEncapsulatedFrame">
            <summary>
            The frame encapsulated in this frame.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Frame.Clone">
            <summary>
            Must return an identical copy of this frame.
            </summary>
            <returns>An identic clone of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Frame.FrameType">
            <summary>
            Must return the type of this frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Frame.FrameBytes">
            <summary>
            Must return this frame and its encapsulated frames converted to bytes.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Frame.EncapsulatedFrame">
            <summary>
            Gets or sets the frame encapsulated in this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Frame.Length">
            <summary>
            Must return the length of the bytes contained in this frame and its encapsulated frames
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.ClearNeighbours">
            <summary>
            Removes all neighbours from the neighbour list of this frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.AddNeighbour(System.Net.IPAddress)">
            <summary>
            Adds a neighbour to the neighbour list of this frame
            </summary>
            <param name="ipa">The neighbour IP-address to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.GetNeighbours">
            <summary>
            Returns all neighbours from the neighbour list of this frame
            </summary>
            <returns>All neighbours IP-addresses from the neighbour list of this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.ContainsNeighbour(System.Net.IPAddress)">
            <summary>
            Checks whether a specified neighbour is contained in this frames neighbour list
            </summary>
            <param name="ipa">The neighbours IP-address to search for</param>
            <returns>A bool indicating whether a specified neighbour is contained in this frames neighbour list</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.RemoveNeighbour(System.Net.IPAddress)">
            <summary>
            Removes a neighbour from the neighbour list of this frame
            </summary>
            <param name="ipa">The neighbour IP-address to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to pase</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.Clone">
            <summary>
            Creates an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.Options">
            <summary>
            Gets or sets the OSPF options field
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.Netmask">
            <summary>
            Gets or sets the subnetmask
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.HelloInterval">
            <summary>
            Gets or sets the hello interval
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.Priority">
            <summary>
            Gets or sets the priority
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.DeadInterval">
            <summary>
            Gets or sets the dead interval
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.DesignatedRouter">
            <summary>
            Gets or sets the designated router
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.BackupDesignatedRouter">
            <summary>
            Gets or sets the backup designated router
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.FrameType">
            <summary>
            Returns FrameType.OSPFHello
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame and its encapsulated frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFHelloMessage.Length">
            <summary>
            Returns the length of this frame and its encapsulated frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.NetworkLSA">
            <summary>
            This class represents an OSPF network LSA
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data starting at the given index
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The index to start parsing from</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.ClearNetworkItems">
            <summary>
            Removes all network LSA items
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.AddNetworkItem(eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem)">
            <summary>
            Adds a network LSA item
            </summary>
            <param name="net">The network LSA item to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.GetNetworkItems">
            <summary>
            Returns all network LSA items contained in this frame
            </summary>
            <returns>All network LSA items contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.ContainsNetworkItem(eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem)">
            <summary>
            Check whether a specific network LSA item is contained in this frame
            </summary>
            <param name="net">The network LSA item to search for</param>
            <returns>A bool indicating whether a specific network LSA item is contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.RemoveNetworkItem(eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem)">
            <summary>
            Removes a network LSA item from this frame
            </summary>
            <param name="net">The network LSA item to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.Clone">
            <summary>
            Returns an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.NetworkLSA.Netmask">
            <summary>
            Gets or sets the netmask
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.NetworkLSA.FrameType">
            <summary>
            Returns FrameType.OSPFNetworkLSA
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.NetworkLSA.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.NetworkLSA.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem">
            <summary>
            This class represents a network LSA item used in a network LSA
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data starting at the given index
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The indext at which parsing begins</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem.AttachedRouterID">
            <summary>
            Gets or sets the attached router's ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem.Mask">
            <summary>
            Gets or sets the subnetmask
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem.Length">
            <summary>
            Returns the length of this network LSA in bytes (8)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.NetworkLSA.NetworkLSAItem.Bytes">
            <summary>
            Returns the raw byte representation of this network LSA
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.NetMap">
            <summary>
            This class provides capability of building network graphs by analyzing traffic
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer">
            <summary>
            This class represents the superclass of all traffic analyzers.
            Traffic analyzers must not have any output handlers also they must not generate any output and they must not edit any incomin frame
            The purpose of a traffic analyzer is to provide a stable base for doing multiple, paralell traffic analysis tasks without affecting the original frame.
            If you want to generate or change traffic on the fly, derive from TrafficModifier or TrafficHandler instead.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer.NotifyNext(eExNetworkLibrary.Frame)">
            <summary>
            Does nothing
            </summary>
            <param name="fInputFrame"></param>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Analyzes the given frame
            </summary>
            <param name="fInputFrame">The frame to analyze</param>
        </member>
        <member name="P:eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer.OutputHandler">
            <summary>
            Setting output handlers is not supported by traffic analyzers
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.NetMap.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.NetMap.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Analyzes the input frame for new information.
            </summary>
            <param name="fInputFrame">The frame to analyze</param>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.NetMap.Stop">
            <summary>
            Stops all pending name resolves and all worker threads
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.NetMap.ContainsHostForIP(System.Net.IPAddress)">
            <summary>
            Checks whether the given IP address is associated with a host
            </summary>
            <param name="ipa">The IP address to search for</param>
            <returns>A bool indicating whether the given IP address is associated with a host</returns>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.NetMap.ContainsHostForMAC(eExNetworkLibrary.MACAddress)">
            <summary>
            Checks whether the given MAC address is associated with a host
            </summary>
            <param name="mac">The MAC address to search for</param>
            <returns>A bool indicating whether the given MAC address is associated with a host</returns>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.NetMap.GetHostForIP(System.Net.IPAddress)">
            <summary>
            Returns the host associated with a given IP address
            </summary>
            <param name="ipa">The IP address to search for</param>
            <returns>The host associated with a given IP address</returns>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.NetMap.GetHostForMAC(eExNetworkLibrary.MACAddress)">
            <summary>
            Returns the host associated with a given MAC address
            </summary>
            <param name="mac">The MAC address to search for</param>
            <returns>The host associated with a given MAC address</returns>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.NetMap.Cleanup">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.NetMap.ResolveHostnames">
            <summary>
            A bool indicating whether host names of found hosts should be resolved actively.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Monitoring.NetMap.HostInformationChanged">
            <summary>
            This event is fired when the information about any host in the graph is changed
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.NetMap.Hosts">
            <summary>
            Returns all known hosts
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.NetMap.Localhost">
            <summary>
            Returns the localhost
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.NetMap.DataLinkDistributors">
            <summary>
            Returns all data link distrubutors (switches, hubs etc.) around the local host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.NetMap.DataLinkNeighbours">
            <summary>
            Returns all data link neighbour hosts around the local host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.NetMap.UpperLayerNeighbours">
            <summary>
            Returns all known upper layer neighbours around the local host
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.NetMap.HostChangedEventHandler">
            <summary>
            This delegate represents the method which is used to handly host changes
            </summary>
            <param name="args">The arguments</param>
            <param name="sender">The class which rised this event</param>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.Host">
            <summary>
            This class represents an IP host which can be used for building host graphes
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.Host.#ctor(System.String)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="strName">The hostname</param>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.Host.Properties">
            <summary>
            Gets the property dictionary associated with this host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.Host.ConnectedTo">
            <summary>
            Gets a list containing all connected hosts
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.Host.IPAddresses">
            <summary>
            Gets a list containing all IP addresses 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.Host.MACAddresses">
            <summary>
            Gets a list containing all MAC addresses 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.Host.Name">
            <summary>
            Gets a list containing the Name of this host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.Host.Type">
            <summary>
            Gets a list containing the type of this host
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.HostType">
            <summary>
            An enumeration for host types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Monitoring.HostType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Monitoring.HostType.PhysicalNeigbour">
            <summary>
            Physical neighbour (same subnet)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Monitoring.HostType.UpperLayerNeigbour">
            <summary>
            Upper layer neighbour (internet etc.)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Monitoring.HostType.Network">
            <summary>
            Network (switch, hub etc.)
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.HostInformationChangedEventArgs">
            <summary>
            This class carries information about host changed event args
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.HostInformationChangedEventArgs.#ctor(eExNetworkLibrary.Monitoring.Host)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="hHost">The host which changed</param>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.HostInformationChangedEventArgs.Host">
            <summary>
            The host which changed
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.ISocket">
            <summary>
            This interface represents a socket. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.ISocket.PushUp(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            This method has to accept any type of frames. If the frame pushed to the socket is matching the socket's binding, 
            the frame should be <b>decapsulated</b> and true should be returned. Otherwise the frame should be discarded by this instance 
            and false should be returned.
            After successfully processing the frame, the FrameDecapsulated event must be called with the decapsulated frame as paramater. 
            </summary>
            <param name="fFrame">The frame to process. <b>This frame instance should only be read, not edited.</b></param>
            <param name="bPush">A bool indicating whether the frame was delivered with a push flag.</param>
            <returns>A bool indicating whether the submitted frame matches this socket's binding.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.ISocket.PushDown(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            This method has to accept any type of frames. 
            The given frame should be <b>encapsulated</b> according to this socket's binding.
            After successfully processing the frame, the FrameEncapsulated event must be called with the encapsulated frame as paramater. 
            </summary>
            <param name="fFrame">The frame to process. <b>This frame instance should only be read, not edited.</b></param>
            <param name="bPush">A bool indicating whether the frame was delivered with a push flag.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.ISocket.Flush">
            <summary>
            Forces the socket to send out all data waiting to be send immedeately, if possible.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.ISocket.PushDown(System.Byte[],System.Boolean)">
            <summary>
            This method accepts an array of bytes. 
            The given bytes are <b>encapsulated</b> according to this socket's binding.
            After successfully processing the frame, the FrameEncapsulated event is called with the encapsulated frame as paramater. 
            </summary>
            <param name="bPush">A bool indicating whether the frame was delivered with a push flag.</param>
            <param name="bData">The bytes to process</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.ISocket.BindingInformation">
            <summary>
            This accessor has to return a BindingInformation object containing information about this socket's binding. 
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Sockets.ISocket.FrameDecapsulated">
            <summary>
            This event should be fired whenever frame processing and decapsulation finished and the decapsulated frame can be pushed upwards the stack. 
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Sockets.ISocket.FrameEncapsulated">
            <summary>
            This event should be fired whenever frame processing and encapsulation finished and the encapsulated frame can be pushed downwards the stack. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.ISocket.IsOpen">
            <summary>
            A bool indicating whether the socken can receive or send data.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.FrameProcessedEventHandler">
            <summary>
            This delegate represents the method used to handle FrameProcessed events.
            </summary>
            <param name="sender">The object which invoked the event.</param>
            <param name="args">The event args.</param>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.FrameProcessedEventArgs">
            <summary>
            This class represents the event arguments the FrameProcessed event handler of a socket. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.FrameProcessedEventArgs.#ctor(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Creates a new instance of this class. 
            </summary>
            <param name="fProcessedFrame">The frame which was processed by the socket instance.</param>
            <param name="bPush">A bool indicating whether this frame is being delivered with a push flag.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.FrameProcessedEventArgs.#ctor(eExNetworkLibrary.Frame)">
            <summary>
            Creates a new instance of this class. 
            </summary>
            <param name="fProcessedFrame">The frame which was processed by the socket instance.</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.FrameProcessedEventArgs.ProcessedFrame">
            <summary>
            The frame which was processed by the socket instance. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.FrameProcessedEventArgs.IsPush">
            <summary>
            A bool indicating whether this frame is being delivered with a push flag. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler">
            <summary>
            This class represents a traffic handler which is capable of performing network address translation (NAT)
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.#ctor">
            <summary>
            Creates a new NAT handler with the given port range for NAT translation
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.AddToExternalRange(eExNetworkLibrary.Routing.NATAddressRange)">
            <summary>
            Adds the given NAT address range to the external range
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.AddToInternalRange(eExNetworkLibrary.Routing.NATAddressRange)">
            <summary>
            Adds the given NAT address range to the internal range
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.RemoveFromExternalRange(eExNetworkLibrary.Routing.NATAddressRange)">
            <summary>
            Removes the given NAT address range from the external range. Open connections will not be interrupted.
            </summary>
            <param name="toRemove">The address range to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.RemoveFromInternalRange(eExNetworkLibrary.Routing.NATAddressRange)">
            <summary>
            Removes the given NAT address range from the internal range. Open connections will not be interrupted.
            </summary>
            <param name="toRemove">The address range to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.GetInternalRange">
            <summary>
            Gets the internal NAT address range
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.GetExternalRange">
            <summary>
            Gets the external NAT address range
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.Cleanup">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Extracts a IP frame and does some NAT
            </summary>
            <param name="fInputFrame">The frame to handle</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.Start">
            <summary>
            Starts this traffic handler
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.Stop">
            <summary>
            Stops this traffic handler
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.NATEntryCreated">
            <summary>
            This event is fired when a NAT entry is newly created
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.NATEntryRemoved">
            <summary>
            This event is fired when a NAT entry is removed
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.PortRangeStart">
            <summary>
            Gets or sets the NAT range start port, inclusive this port. NAT table entries which use this port will not be deleted when changing this value.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.DropNonNATFrames">
            <summary>
            Gets or sets a bool indicating whether a frame which does neither belong to the internal nor to the external range should be dropped.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.ThrowOnNonNatFrames">
            <summary>
            Gets or sets a bool indicating whether an exception should be thrown when a external or unknown frame is discarded. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.NATTimer">
            <summary>
            Gets or sets the NAT timeout timer. This timer describes after how many seconds entries should removed from the NAT database when they are not accessed any more.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.PortRangeEnd">
            <summary>
            Gets or sets the NAT range end port, exclusive this port. NAT table entries which use this port will not be deleted when changing this value.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.NATTable">
            <summary>
            Returns the NAT translation database
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.NetworkAddressTranslationHandler.NATEventHandler">
            <summary>
            This delegate represents the method which is used to handle NAT events
            </summary>
            <param name="sender">The class which rised the event</param>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="T:eExNetworkLibrary.Routing.NATEntry">
            <summary>
            This class represents a simple NAT entry
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NATEntry.#ctor(eExNetworkLibrary.IP.IPProtocol,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="ipProtocol">The IP portocol</param>
            <param name="ipaSource">The original source address</param>
            <param name="ipaTranslatedSource">The translated source address</param>
            <param name="ipaDestination">The destination address</param>
            <param name="iSourcePort">The original source port</param>
            <param name="iTranslatedSourcePort">The translated source port</param>
            <param name="iDestinationPort">The destination port</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NATEntry.Equals(System.Object)">
            <summary>
            Compares an object to this object
            </summary>
            <param name="obj">The object to compare to this object</param>
            <returns>A bool indicating whether this object equals the given object</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NATEntry.GetHashCode">
            <summary>
            Returns the hash code of this object, based on the destination address
            </summary>
            <returns>The hash code of this object, based on the destination address</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.IsTCPFinished">
            <summary>
            Indicates whether this TCP connection is finished
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.IsTCPTeardown">
            <summary>
            Indicates whether the TCP connection is in a teardown process
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.IPProtocol">
            <summary>
            Gets the value of the IP protocol field of the frame to be translated
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.OriginalSourceAddress">
            <summary>
            Gets the value of the original source address (address of internal host) 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.TranslatedSourceAddress">
            <summary>
            Gets the value of the source address (address of internal host) after the translation
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.DestinationAddress">
            <summary>
            Gets the value of the destination address (address of the external host)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.OriginalSourcePort">
            <summary>
            Gets the value of the original source port (port of internal host) 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.TranslatedSourcePort">
            <summary>
            Gets the value of the original source port (port of internal host) after the translation
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.DestinationPort">
            <summary>
            Gets the  value of the destination port (port of the external host)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEntry.TTL">
            <summary>
            Gets or sets the TTL of this entry
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.NATAddressRange">
            <summary>
            This class represents a network range
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NATAddressRange.#ctor(eExNetworkLibrary.Subnetmask,System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class with the given params
            </summary>
            <param name="smMask">The subnetmask of the network to represent</param>
            <param name="ipaNetworkAddress">The IP address of the network to represent</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATAddressRange.Subnetmask">
            <summary>
            Gets the subnetmask of the network to represent
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATAddressRange.NetworkAddress">
            <summary>
            Gets the network address of the network to represent
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.NATEventArgs">
            <summary>
            This class represents the data which is associated with NAT events
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.NATEventArgs.#ctor(eExNetworkLibrary.Routing.NATEntry)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="neEntry">The entry to associate with this event</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.NATEventArgs.Entry">
            <summary>
            Gets the NAT entry associated with this event.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HTTP.HTTPResponse">
            <summary>
            This class represents a HTTP response
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HTTP.HTTPMessage">
            <summary>
            This class provides a base implementation of HTTP messages
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPMessage.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPMessage.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of this class by reading from the given stream. 
            </summary>
            <param name="sStream">The stream to read from</param>
            
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPMessage.#ctor(System.IO.Stream,System.Int32@)">
            <summary>
            Creates a new instance of this class by reading from the given stream. 
            </summary>
            <param name="sStream">The stream to read from</param>
            <param name="iLength">An integer which is set to the length of this HTTP message in bytes</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPMessage.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPMessage.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iLength">An integer which is set to the length of this HTTP message in bytes</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPMessage.Initialize(System.Byte[])">
            <summary>
            Initializes this instance with the given data.
            </summary>
            <param name="bData">The data to create this HTTP message from</param>
            <returns>The length of the data which belongs to this HTTP message</returns>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPMessage.ParseStatusLine(System.String)">
            <summary>
            This method must be capable of parsing the HTTP status line when overloaded
            </summary>
            <param name="strFirstLine">The status line to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPMessage.GenerateStatusLine">
            <summary>
            This method must be capable of generating the HTTP status line when overloaded
            </summary>
            <returns>Must return the first line of the HTTP message</returns>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPMessage.Payload">
            <summary>
            Gets or sets the payload of this message
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPMessage.Headers">
            <summary>
            Gets the HTTP headers of this message
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPMessage.MessageType">
            <summary>
            Gets the type of this HTTP message
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPMessage.RawBytes">
            <summary>
            Gets the byte representation of this HTTP message 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPMessage.Length">
            <summary>
            Gets the length of this HTTP message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPResponse.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPResponse.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPResponse.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iLength">An integer which is set to the length of this HTTP message in bytes</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPResponse.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="sStream">The stream to read from</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPResponse.#ctor(System.IO.Stream,System.Int32@)">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="sStream">The stream to read from</param>
            <param name="iLength">An integer which is set to the length of this HTTP message in bytes</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPResponse.ParseStatusLine(System.String)">
            <summary>
            Parses an HTTP response's status line
            </summary>
            <param name="strFirstLine">The string to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPResponse.GenerateStatusLine">
            <summary>
            Generates this HTTP response's status line.
            </summary>
            <returns>The generated status line.</returns>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPResponse.ResponseCode">
            <summary>
            Gets or sets the reponse code
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPResponse.ResponseReason">
            <summary>
            Gets or sets the response reason. In most cases, this is a string indicating why an error happened
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPResponse.Version">
            <summary>
            Gets or sets the HTTP version
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPResponse.MessageType">
            <summary>
            Returns HTTPMessageType.Response
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.IMITMAttack">
            <summary>
            Provides an interface for all kind of man in the middle attacks.
            
            When implementing such an attack, please use this interface for enhanced functionality, such as network map integration. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.IMITMAttack.AddToVictimList(eExNetworkLibrary.Attacks.MITMAttackEntry)">
            <summary>
            Adds a man in the middle attack entry to the victim list of this attack
            </summary>
            <param name="apreVicim">The man in the middle attack entry to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.IMITMAttack.ClearVictimList">
            <summary>
            Clears the victim list
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.IMITMAttack.GetVictims">
            <summary>
            Returns all man in the middle attack entries of this attack's victim list
            </summary>
            <returns></returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.IMITMAttack.RemoveFromVictimList(eExNetworkLibrary.Attacks.MITMAttackEntry)">
            <summary>
            Removes a man in the middle attack entry from the victim list of this attack
            </summary>
            <param name="apreVicim">The man in the middle attack entry to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.IMITMAttack.VictimListContains(eExNetworkLibrary.Attacks.MITMAttackEntry)">
            <summary>
            Checks whether a specific man in the middle attack entry is contained in this attack
            </summary>
            <param name="apreVicim">A specific man in the middle attack entry</param>
            <returns>A bool indicating whether a specific man in the middle attack entry is contained in this attack</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.IMITMAttack.PauseAttack">
            <summary>
            Pauses the attack until ResumeAttack() is called.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.IMITMAttack.ResumeAttack">
            <summary>
            Resumes the attack which was suspended when PauseAttack() was called.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.IMITMAttack.Name">
            <summary>
            Returns the name of this attack
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.PacketReorderer">
            <summary>
            This simulator item class is capable of randomizing the sequence of frames.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem">
            <summary>
            This class provides a base for all traffic simulator items.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.ITrafficSimulatorChainItem">
            <summary>
            Provides the basic interface which all simulator items must implement.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.ITrafficSimulatorChainItem.Push(eExNetworkLibrary.Frame)">
            <summary>
            Pushes a frame to this simulator item
            </summary>
            <param name="f">The frame to push</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.ITrafficSimulatorChainItem.Start">
            <summary>
            Starts this simulator item
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.ITrafficSimulatorChainItem.Stop">
            <summary>
            Stops this simulator item
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.ITrafficSimulatorChainItem.Next">
            <summary>
            Gets the next item in the simulator chain
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.tscNext">
            <summary>
            The next item in the simulator chain.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.Push(eExNetworkLibrary.Frame)">
            <summary>
            Applies the effect of this simulator chain item to the given frame.
            </summary>
            <param name="f">The input frame</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.Start">
            <summary>
            Starts this simulator item.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.Stop">
            <summary>
            Stops this simulator item. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.InvokePropertyChanged">
            <summary>
            Invokes the PropertyChanged event
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.InvokeExternal(System.Delegate,System.Object)">
            <summary>
            Invokes a delegate with the given params on an external target
            </summary>
            <param name="d">The delegate to invoke</param>
            <param name="param">The invokation params</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.InvokeExternalAsync(System.Delegate,System.Object)">
            <summary>
            Invokes a delegate with the given params asynchronously on an external target
            </summary>
            <param name="d">The delegate to invoke</param>
            <param name="param">The invokation params</param>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.Next">
            <summary>
            Gets or sets the next item in the simulator chain.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Simulation.TrafficSimulatorModificationItem.PropertyChanged">
            <summary>
            Is invoked when a property of this simulator item is changed.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketReorderer.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketReorderer.Push(eExNetworkLibrary.Frame)">
            <summary>
            Applies the effect of this simulator chain item to the given frame.
            </summary>
            <param name="f">The input frame</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketReorderer.Start">
            <summary>
            Starts this packet reorderer
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketReorderer.Stop">
            <summary>
            Stops this packet reorderer
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.PacketReorderer.AccumulationTime">
            <summary>
            Gets or sets the accumulation time. This value describes how many milliseconds 
            this instance should wait for packets before shuffling them.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.ASExternalLSA">
            <summary>
            This class represents an OSPF autonomous system external LSA
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data starting at the given index
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The index to start parsing</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ClearExternalItems">
            <summary>
            Removes all autonomous system external LSA items from this frame.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.AddExternalItem(eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem)">
            <summary>
            Adds a autonomous system external LSA item to this frame.
            </summary>
            <param name="lsa">The autonomous system external LSA item to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.GetExternalItems">
            <summary>
            Returns all autonomous system external LSA items contained in this frame
            </summary>
            <returns>All autonomous system external LSA items contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ContainsExternalItem(eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem)">
            <summary>
            Returns a bool indicating whether a specific autonomous system external LSA item is contained in this frame
            </summary>
            <param name="lsa">The autonomous system external LSA item to search for</param>
            <returns>A bool indicating whether a specific autonomous system external LSA item is contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.RemoveExternalItem(eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem)">
            <summary>
            Removes a autonomous system external LSA item from this frame.
            </summary>
            <param name="lsa">The autonomous system external LSA item to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.Clone">
            <summary>
            Returns an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.Netmask">
            <summary>
            Gets or sets the subnetmask
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.FrameType">
            <summary>
            Returns FrameType.OSPFExternalLSA
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.FrameBytes">
            <summary>
            Returns the raw byte representation of this autonomous system external LSA
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.Length">
            <summary>
            Returns the length of this autonomous system external LSA in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem">
            <summary>
            This class represents an autonomous system external LSA item contained in an autonomous system external LSA
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data starting at a given index
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The index from which parsing starts</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data starting at a given index
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.ExternalRouteTag">
            <summary>
            Gets or sets the external route tag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.EBit">
            <summary>
            Gets or sets the E-bit
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.TOS">
            <summary>
            Gets or sets the TOS
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.Metric">
            <summary>
            Gets or sets the metric
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.Address">
            <summary>
            Gets or sets the IP-address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.Length">
            <summary>
            Gets the length of this autonomous system external LSA item in bytes (12)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.ASExternalLSA.ASExternalItem.Bytes">
            <summary>
            Gets the raw byte representation of this frame
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ARP.ARPFrame">
            <summary>
            This class represents an ARP frame.
            <remarks>This class currently supports only MAC and IPv4 addresses.</remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ARP.ARPFrame.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ARP.ARPFrame.#ctor(System.Byte[])">
            <summary>
            Creates a newinstance of this class from the given data.
            </summary>
            <param name="bData">The data to parse.</param>
        </member>
        <member name="M:eExNetworkLibrary.ARP.ARPFrame.ToString">
            <summary>
            Returns the string representation of this frame
            </summary>
            <returns>The string representation of this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.ARP.ARPFrame.Clone">
            <summary>
            Creates an identical copy of this class
            </summary>
            <returns>An identical copy of this class</returns>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.HardwareAddressType">
            <summary>
            Gets or sets the hardware address type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.ProtocolAddressType">
            <summary>
            Gets or sets the protocol address type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.Operation">
            <summary>
            Gets or sets the ARP operation
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.SourceMAC">
            <summary>
            Gets or sets the source MAC address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.DestinationMAC">
            <summary>
            Gets or sets the destination MAC address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.SourceIP">
            <summary>
            Gets or sets the source IP address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.DestinationIP">
            <summary>
            Gets or sets the destination IP address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.FrameType">
            <summary>
            Returns FrameType.ARP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPFrame.Length">
            <summary>
            Returns the length of this frame and the encapsulated frames in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ARP.ARPOperation">
            <summary>
            An enumeration for ARP operations
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.Reply">
            <summary>
            Reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.RequestReverse">
            <summary>
            Request reverse
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.ReplyReverse">
            <summary>
            Reply reverse
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.DRARPRequest">
            <summary>
            Dynamic reverse ARP request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.DRARPReply">
            <summary>
            Dynamic reverse ARP reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.DRARPError">
            <summary>
            Dynamic reverse ARP error
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.InARPRequest">
            <summary>
            Inverse ARP request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.InARPReply">
            <summary>
            Inverse ARP reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.ARPNAK">
            <summary>
            ARP not acknowledged
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSRequest">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSMulti">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSMServ">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSJoin">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSLeave">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSNAK">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSUnserv">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSSJoin">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSSLeave">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSGrouplistRequest">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSGrouplistReply">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MARSRedirectMap">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ARP.ARPOperation.MAPOSUNARP">
            <summary>
            ?
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ICMP.ICMPv4Frame">
            <summary>
            Represents a ICMPv4 frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ICMP.ICMPv4Frame.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bICMPData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.ICMP.ICMPv4Frame.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ICMP.ICMPv4Frame.Clone">
            <summary>
            Creates a new identical instance of this class
            </summary>
            <returns>A new identical instance of this class</returns>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.ICMPType">
            <summary>
            Gets or sets the type of this ICMP frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.ICMPCode">
            <summary>
            Gets or sets the code of this ICMP frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.ICMPParameterProblemCode">
            <summary>
            Gets the ICMP parameter problem code for ICMP parameter problem frames.
            This operation is only supported if this ICMP frame is a parameter problem frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.ICMPRedirectCode">
            <summary>
            Gets the ICMP redirect code for ICMP redirect frames.
            This operation is only supported if this ICMP frame is a redirect frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.ICMPTimeExceededCode">
            <summary>
            Gets the ICMP time exceeded code for ICMP time exceeded frames.
            This operation is only supported if this ICMP frame is a time exceeded frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.UnreachableCode">
            <summary>
            Gets the ICMP unreachable code for ICMP unreachable frames.
            This operation is only supported if this ICMP frame is a unreachable frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.FrameType">
            <summary>
            Returns FrameType.ICMP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.FrameBytes">
            <summary>
            Returns the byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ICMP.ICMPv4Frame.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ICMP.ICMPv4Type">
            <summary>
            An enumeration for ICMPv4 types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.Unknown">
            <summary>
            Unknown - do not try to send a frame with this type set
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.EchoReply">
            <summary>
            Echo (ping) reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.DestinationUnreachable">
            <summary>
            Destination unreachable
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.SourceQuench">
            <summary>
            Source quench
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.Redirect">
            <summary>
            Redirect
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.AlternateHostAddress">
            <summary>
            Alternate host address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.EchoRequest">
            <summary>
            Echo request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.RouterAdvertisment">
            <summary>
            Router advertisment
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.RouterSolication">
            <summary>
            Router solication
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.TimeExceeded">
            <summary>
            Time exceeded
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.ParameterProblem">
            <summary>
            Parameter problem
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.TimestampRequest">
            <summary>
            Timestamp request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.TimestampReply">
            <summary>
            Timestamp reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.InformationRequest">
            <summary>
            Information request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.InformationReply">
            <summary>
            Information reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.AddressMaskRequest">
            <summary>
            Address mask request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.AddressMaskReply">
            <summary>
            Address mask reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.Traceroute">
            <summary>
            Traceroute
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.DatagramConversionError">
            <summary>
            Datagram conversion error
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.MobileHostRedirect">
            <summary>
            Mobile host redirect
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.MobileRegistrationRequest">
            <summary>
            Mobile registration request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.MobileRegistrationReply">
            <summary>
            Mobile registration reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.DomainNameRequest">
            <summary>
            Domain name request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.DomainNameReply">
            <summary>
            Domain name reply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.SKIP">
            <summary>
            SKIP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4Type.Photuris">
            <summary>
            Photuris
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode">
            <summary>
            An enumeration for ICMPv4 unreachable codes. These codes can be get or set if the ICMP type of the corresponding frame is ICMPv4Type.DestinationUnreachable
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.Unknown">
            <summary>
            Unknown - do not try to send a frame with this type set
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.DestinationNetworkUnreachable">
            <summary>
            The destination network is unreachable
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.DestinationHostUnreachable">
            <summary>
            The destination host is unreachable
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.DestinationProtocolUnreachable">
            <summary>
            The destination protocol is unreachable
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.DestinationPortUnreachable">
            <summary>
            The destination port is unreachable
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.DestinationNetworkUnknown">
            <summary>
            The destination network is not known
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.DestinationHostUnknown">
            <summary>
            The destination host is not known
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.SourceHostUnknown">
            <summary>
            The source host is not known
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.NetworkProhibited">
            <summary>
            The communication with the destination network is administratively prohibited
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.HostProhibited">
            <summary>
            The communication with the destination host is administratively prohibited
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.NetworkUnreachableForTOS">
            <summary>
            The destination network is unreachable for this type of service
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.HostUnreachableForTOS">
            <summary>
            The destination host is unreachable for this type of service
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.AdministrativelyProhibited">
            <summary>
            The communication is administratively prohibited
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.HostPrecedenceViolation">
            <summary>
            There is a host precedence violation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4UnreachableCode.PrecedenceCutoffInEffect">
            <summary>
            The precedence of the datagram was below the minimum required level
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ICMP.ICMPv4RedirectCode">
            <summary>
            An enumeration for ICMPv4 redirect codes. These codes can be get or set if the ICMP type of the corresponding frame is ICMPv4Type.Redirect
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4RedirectCode.RedirectDatagramForNetwork">
            <summary>
            Forces the source to redirect all datagrams for the corresponding network. 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4RedirectCode.RedirectDatagramForHost">
            <summary>
            Forces the source to redirect all datagrams for the corresponding host
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4RedirectCode.RedirectDatagramForTypeOfServiceAndNetwork">
            <summary>
            Forces the source to redirect all datagrams for the corresponding network and TOS
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4RedirectCode.RedirectDatagramForTypeOfServiceAndHost">
            <summary>
            Forces the source to redirect all datagrams for the corresponding host and TOS
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ICMP.ICMPv4TimeExceededCode">
            <summary>
            An enumeration for ICMPv4 time exceeded codes. These codes can be get or set if the ICMP type of the corresponding frame is ICMPv4Type.TimeExceeded
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4TimeExceededCode.TTLExceeded">
            <summary>
            The TTL (Time to Live) exceeded during transmit
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4TimeExceededCode.FRTExceeded">
            <summary>
            The FRT (fragment reassembly time) exceeded
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ICMP.ICMPv4ParameterProblemCode">
            <summary>
            An enumeration for ICMPv4 parameter problem codes. These codes can be get or set if the ICMP type of the corresponding frame is ICMPv4Type.ParameterProblem
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4ParameterProblemCode.PointerIndicatesAnError">
            <summary>
            A pointer indicates an error
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4ParameterProblemCode.MissingARequiredOption">
            <summary>
            A required option is missing
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.ICMP.ICMPv4ParameterProblemCode.BadLength">
            <summary>
            The frame has got a bad length
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.CodeLab.DynamicFunctionHandler">
             <summary>
             This traffic modifier provides the capability of running any class which implements IDynamicHandler.
             The IDynamicHandler implementation has to be simply assigned to the DynamicHandler property.
             This class can be used to run just in time compiled code via the IDynamicHandler interface.
             <example><code>
             // Load the sourcecode
             string strSourcecode = "your class sourcecode which implements IDynamicHandler goes here";
            
             // Create a new dynamic function handler
             DynamicFunctionHandler dfHandler = new DynamicFunctionHandler();
             
             // Start the dynamic function handler
             dfHandler.Start();
             
             // Create a new dynamic function compiler
             DynamicFunctionCompiler dfCompiler = new DynamicFunctionCompiler();
             
             // Compile the sourcecode to a just in time plugin
             IDynamicHandler dynamicHandler = dfCompiler.BuildPreview(strSourcecode);
             
             // Assign the just compiled dynamic handler to the dynamic function handler
             dfHandler.DynamicHandler = dynamicHandler;
             
             </code></example>
             </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficModifiers.TrafficModifier">
            <summary>
            This class is used als superclass for all Traffic Handlers which modify traffic
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficModifiers.TrafficModifier.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Receives a frame, calls ModifyTraffic and forwards this frame to the next handler
            </summary>
            <param name="fInputFrame">The frame to handle</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficModifiers.TrafficModifier.ModifyTraffic(eExNetworkLibrary.Frame)">
            <summary>
            A method which is used to modify traffic
            </summary>
            <param name="fInputFrame">The frame to handle</param>
            <returns>A bool indicating if the frame should be further forwarded.</returns>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.DynamicFunctionHandler.ModifyTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Calls the ModifyTraffic method of the assigned IDynamicHandler with the given frame
            </summary>
            <param name="fInputFrame">The frame to handler</param>
            <returns>The modified frame or null</returns>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.DynamicFunctionHandler.Cleanup">
            <summary>
            Calls the Cleanup method of the assigned IDynamicHandler
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.DynamicFunctionHandler.Start">
            <summary>
            Calls the Start method of the assigned IDynamicHandler
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.DynamicFunctionHandler.Stop">
            <summary>
            Calls the Stop method of the assigned IDynamicHandler
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.CodeLab.DynamicFunctionHandler.DynamicHandler">
            <summary>
            Gets or sets the dynamic handler
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Scanning.ARPNetScan">
            <summary>
            This class represents an ARP net scanner, which scans a whole subnet at layer 2 and revals even firewalled hosts.
            For analyzing the replies to the sent ARP frames, a NetMap is recommendable.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Scanning.IScanner">
            <summary>
            This interface represents a scanner which scans various IP ranges.
            
            When implementing such a scanner, please use this interface for enhanced functionality, such as network map integration.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.IScanner.Scan(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Starts the scan from the given start address to the given end address, including the start and the end address.
            </summary>
            <param name="ipaScanStart">The address at which scanning starts</param>
            <param name="ipaScanEnd">The address at which scanning ends</param>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Scanning.IScanner.Name">
            <summary>
            Gets the name of the scanner
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Receives an ARP frame from the ARP scan task and pushes it to the out queue of the according interface
            </summary>
            <param name="fInputFrame">The frame to receive</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.AddARPScanTask(eExNetworkLibrary.Attacks.Scanning.ARPScanTask)">
            <summary>
            Adds an ARP scan task to this scanners task queue, where the scanner will start the scan as soon as possible
            </summary>
            <param name="ast">The scan task to do</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.RemoveARPScanTask(eExNetworkLibrary.Attacks.Scanning.ARPScanTask)">
            <summary>
            Removes a scan task. This only works if the scan task has not been done yet.
            </summary>
            <param name="ast">The ARP scan task to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.Start">
            <summary>
            Starts this traffic handler's working threads
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.Stop">
            <summary>
            Stops this traffic handler's working threads
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.Cleanup">
            <summary>
            Stops this traffic handler's scanner thread
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.AddARPScanTask(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Adds ARP scan tasks for the range between the given start and the given end address and associates them with the according interfaces
            </summary>
            <param name="ipaStart">The IP address where scanning starts</param>
            <param name="ipaEnd">The IP address where scanning ends</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.Scan(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Adds ARP scan tasks for the range between the given start and the given end address and associates them with the according interfaces
            </summary>
            <param name="ipaScanStart">The IP address where scanning starts</param>
            <param name="ipaScanEnd">The IP address where scanning ends</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.AddInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Adds an interface to this ARP net scanner
            </summary>
            <param name="ipInterface">The interface to add only ethernet Interfaces are supported</param>
        </member>
        <member name="E:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.ARPScanFinished">
            <summary>
            This event is rised when an ARP scan is finished
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.ARPScanStepDone">
            <summary>
            This event is rised when a single step in an ARP scan was done
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.Interval">
            <summary>
            Gets or sets the interval between the sending of packets
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.OutputHandler">
            <summary>
            Setting output handlers is not supported by ARP net scanners
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Scanning.ARPNetScan.ARPScanEventHandler">
            <summary>
            Represents the method which is used to handle ARP net scanner events
            </summary>
            <param name="args">The event args</param>
            <param name="sender">The object which rised the event</param>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Scanning.ARPScanEventArgs">
            <summary>
            This class contains event arguments for ARP net scanner events
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPScanEventArgs.#ctor(eExNetworkLibrary.Attacks.Scanning.ARPScanTask)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="astTask">The ARP scan task associated with this event</param>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Scanning.ARPScanEventArgs.Task">
            <summary>
            The ARP scan task associated with this event
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper">
            <summary>
            This class is capable of dumping frames in the LibCap dumping format which can be read by wireshark and other protocol analyzers.
            <remarks>
            This class also provides the capability to create a new wireshark instance and send all captured frames to it in real time. 
            This feature requires wireshark to be installed on the executing host.
            </remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.StartLogging(System.String,System.Boolean)">
            <summary>
            Starts logging into the given file
            </summary>
            <param name="strFile">The file to log the frames into</param>
            <param name="bAppend">A bool indicating whether the data should be appendet or not</param>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.StartLogging(System.String)">
            <summary>
            Starts logging into the given file
            </summary>
            <param name="strFile">The file to log the frames into</param>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.StartLiveLogging(System.String)">
            <summary>
            Starts live logging to a wireshark instance. The path to the wireshark executeable file must be given.
            </summary>
            <param name="strWiresharkExecuteableFilename">The path to the wireshark executeable file.</param>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.StopLiveLogging">
            <summary>
            Tries to stop the running wireshark instance.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.StopLogging">
            <summary>
            Stops the current logging process
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.WriteLogfieHeader(System.IO.BinaryWriter)">
            <summary>
            Writes a libpcap file header to the given binary writer.
            </summary>
            <param name="bw">The binary writer to write the header to.</param>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.WritePacketHeader(eExNetworkLibrary.Frame,System.IO.BinaryWriter)">
            <summary>
            Writes the packet header for the given frame to the given binary writer.
            </summary>
            <param name="fFrame">The frame to write the header for</param>
            <param name="bw">The binary writer to write the header to.</param>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Writes the given frame to the dump file
            </summary>
            <param name="fInputFrame">The frame to dump</param>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.Stop">
            <summary>
            Stops logging and all worker threads
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.Cleanup">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.WiresharkExited">
            <summary>
            This event is fired when the wireshark live logging process exits.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.WiresharkStarted">
            <summary>
            This event is fired when the wireshark live logging process is started.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.LoggingStarted">
            <summary>
            This event is rised when logging was started
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.LoggingStopped">
            <summary>
            This event is rised when logging was stopped
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.DumpByteCount">
            <summary>
            Returns the count of all dumped bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.FileName">
            <summary>
            Returns the name of the dump file
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.IsAppending">
            <summary>
            Returns a bool indicating whether this instance is appending its dumps to an existing file
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.IsLiveLogging">
            <summary>
            Returns a bool indicating whether this instance is logging all traffic to a running wireshark format
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.CommonTrafficAnalysis.LibCapDumper.IsDumping">
            <summary>
            Returns a bool indicating whether this instance is currently dumping
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.CommonTrafficAnalysis.LibCapInterfaceType">
            <summary>
            An enumeration for LibCapInterface types, which have to be written into the dumpfile
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.CommonTrafficAnalysis.LibCapInterfaceType.Ethernet">
            <summary>
            Ethernet
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.PortRule">
            <summary>
            This rule is capable of filtering traffic according to tcp or udp ports
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule">
            <summary>
            This class is the base of all conditional traffic splitter rules
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.tsaAction">
            <summary>
            The action to do on a match(drop, send to a, send to b)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.lLogic">
            <summary>
            The logic relation for source and destination. 
            Logic.And will cause the rule to only return true from the IsMatch method if the rule applies for source and destination.
            Logic.Or will cause to rule to return true from the IsMatch method if the rule applies for source or destination.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.IsMatch(eExNetworkLibrary.Ethernet.EthernetFrame,eExNetworkLibrary.IP.IPv4Frame,eExNetworkLibrary.UDP.UDPFrame,eExNetworkLibrary.TCP.TCPFrame)">
            <summary>
            Checkes whether this rule matches a given frame.
            </summary>
            <param name="ethFrame">The Ethernet part of the frame</param>
            <param name="ipv4Frame">The IPv4 part of the frame</param>
            <param name="udpFrame">The UDP part of the frame</param>
            <param name="tcpFrame">The TCP part of the frame</param>
            <returns>A bool indicating whether this rule matches a given frame.</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.ToString">
            <summary>
            Returns the name of this rule
            </summary>
            <returns>The name of this rule</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.GetLongDescription">
            <summary>
            Returns a long description of this rules function
            </summary>
            <returns>A long description of this rules function</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.GetShortDescription">
            <summary>
            Returns a short description of this rules function
            </summary>
            <returns>A short description of this rules function</returns>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.Logic">
            <summary>
            The logic relation for source and destination. 
            Logic.And will cause the rule to only return true from the IsMatch method if the rule applies for source and destination.
            Logic.Or will cause to rule to return true from the IsMatch method if the rule applies for source or destination.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.Action">
            <summary>
            The action to do on a match(drop, send to a, send to b)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule.Name">
            <summary>
            Gets the name of this rule
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.PortRule.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.PortRule.IsMatch(eExNetworkLibrary.Ethernet.EthernetFrame,eExNetworkLibrary.IP.IPv4Frame,eExNetworkLibrary.UDP.UDPFrame,eExNetworkLibrary.TCP.TCPFrame)">
            <summary>
            Checkes whether this rule matches a given frame.
            </summary>
            <param name="ethFrame">The Ethernet part of the frame</param>
            <param name="ipv4Frame">The IPv4 part of the frame</param>
            <param name="udpFrame">The UDP part of the frame</param>
            <param name="tcpFrame">The TCP part of the frame</param>
            <returns>A bool indicating whether this rule matches a given frame.</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.PortRule.ToString">
            <summary>
            Returns the name of this rule
            </summary>
            <returns>The name of this rule</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.PortRule.GetLongDescription">
            <summary>
            Returns a long description of this rules function
            </summary>
            <returns>A long description of this rules function</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.PortRule.GetShortDescription">
            <summary>
            Returns a short description of this rules function
            </summary>
            <returns>A short description of this rules function</returns>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.PortRule.SourcePort">
            <summary>
            Gets or sets the source port for which matches occour
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.PortRule.DestinationPort">
            <summary>
            Gets or sets the destination port for which matches occour
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.PortRule.Protocol">
            <summary>
            Gets or sets the transport protocol (UDP, TCP or both) for which matches occour
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.PortRule.Name">
            <summary>
            Gets this rule's name
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.TransportProtocol">
            <summary>
            An enumeration for transport protocols for which the rule should apply
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.TransportProtocol.TCP">
            <summary>
            TCP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.TransportProtocol.UDP">
            <summary>
            UDP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.TransportProtocol.Any">
            <summary>
            Any
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.Logic">
            <summary>
            The rule logic for source and destination
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.Logic.And">
            <summary>
            Logic.And will cause the rule to only return a match if the rule applies for source and destination.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.Logic.Or">
            <summary>
            Logic.Or will cause to rule to return a match method if the rule applies for source or destination.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.StreamMonitoring.NetworkStreamMonitor.Run">
            <summary>
            When overriden by a derived class, this method should read from the input stream 
            and parse the data.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HTTP.HTTPHeaderCollection">
            <summary>
            Represents a collection of HTTP headers
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeaderCollection.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeaderCollection.Contains(System.String)">
            <summary>
            Checks whether the header collection contains the given header at least once.
            </summary>
            <param name="strName">The header to search for.</param>
            <returns>A bool indicating whether the header collection contains the given header.</returns>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeaderCollection.Remove(System.String)">
            <summary>
            Removes the headers with the given name.
            </summary>
            <param name="strName">The name of the headers to remove.</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeaderCollection.Remove(eExNetworkLibrary.HTTP.HTTPHeader)">
            <summary>
            Removes the given header.
            </summary>
            <param name="hHeader">The header to remove.</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeaderCollection.Add(eExNetworkLibrary.HTTP.HTTPHeader)">
            <summary>
            Adds the given header to this collection.
            </summary>
            <param name="hHeader">The header to add.</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeaderCollection.Clear">
            <summary>
            Clears this header collection.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPHeaderCollection.Headers(System.String)">
            <summary>
            Gets the headers with the specified name
            </summary>
            <param name="strName">The name to get the headers for</param>
            <returns>The headers for the given name or an empty array if no header was not found.</returns>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPHeaderCollection.AllHeaders">
            <summary>
            Gets all header names present in this collection
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPHeaderCollection.Count">
            <summary>
            Returns the count of headers in this collection
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeader.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeader.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeader.ToString">
            <summary>
            Returns the string representation of this header.
            </summary>
            <returns>The string representation of this header.</returns>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeader.Equals(System.Object)">
            <summary>
            Compares this object to another object.
            </summary>
            <param name="obj">The object to compare to this object.</param>
            <returns>A bool indicating whether the two objects are the same.</returns>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPHeader.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPHeader.Name">
            <summary>
            Gets or sets the name of the header
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPHeader.Value">
            <summary>
            Gets or sets the value of the header
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HardwareAddressType">
            <summary>
            An enumeration for hardware address types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.Ethernet">
            <summary>
            Ethernet (MAC addresses)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.ExperimentalEthernet">
            <summary>
            Experimental Ethernet
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.AmateurRadioAX25">
            <summary>
            Amateur radio AX23
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.ProteonProNETTokenRing">
            <summary>
            Proteon pro NET token ring
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.Chaos">
            <summary>
            CHAOS protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.IEEE_802">
            <summary>
            IEEE 802
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.ARCNET">
            <summary>
            ARCNET
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.Hyperchannel">
            <summary>
            Hyperchannel
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.Lanstar">
            <summary>
            LAN star
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.AutonetShortAddress">
            <summary>
            Autonet short address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.LocalTalk">
            <summary>
            Local talk
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.LocalNet">
            <summary>
            Local net
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.Ultralink">
            <summary>
            Ultra link
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.SMDS">
            <summary>
            SMDS
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.FrameRelay">
            <summary>
            Frame relay
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.ATM1">
            <summary>
            Asyncronous transfer mode 1
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.HDLC">
            <summary>
            HDLC
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.FibreChannel">
            <summary>
            Fibre channel
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.ATM2">
            <summary>
            Asyncronous transfer mode 2
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.SerialLine">
            <summary>
            Serial line
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.ATM3">
            <summary>
            Asyncronous transfer mode 3
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.MIL_STD_188_220">
            <summary>
            MIL STD
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.Metricom">
            <summary>
            Metricom
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.IEEE_13941995">
            <summary>
            IEEE 1394 and 1995
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.MAPOS">
            <summary>
            MAPOS
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.Twinaxial">
            <summary>
            Twinaxial
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.EUI_64">
            <summary>
            EUI 64
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.HIPARP">
            <summary>
            HIPRAP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.ISO_7816_3">
            <summary>
            IP and ARP over ISO-7816-3
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.ARPSec">
            <summary>
            ARP Secure
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.IPsec">
            <summary>
            IPSec tunnel
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.Infiniband">
            <summary>
            Infiniband
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.CAI">
            <summary>
            CAI
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.WiegandInterface">
            <summary>
            Wiegand interface
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HardwareAddressType.PureIP">
            <summary>
            Pure IP
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.EtherType">
            <summary>
            An enumeration for some common ether types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.IPv4">
            <summary>
            Indictaes that the encasulated frame is an IPv4 frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.ARP">
            <summary>
            Indictaes that the encasulated frame is an ARP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.RARP">
            <summary>
            Indictaes that the encasulated frame is a RARP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.AppleTalk">
            <summary>
            Indictaes that the encasulated frame is an Apple Talk frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.AARP">
            <summary>
            Indictaes that the encasulated frame is an AARP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.VLANTag">
            <summary>
            Indictaes that the frame contains a VLAN tag
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.IPX">
            <summary>
            Indictaes that the encasulated frame is an IPX frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.Novell">
            <summary>
            Indictaes that the encasulated frame is a Novell frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.SERCOS_III">
            <summary>
            Indictaes that the encasulated frame is a SERCOS III frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.EtherType.IPv6">
            <summary>
            Indictaes that the encasulated frame is an IPv6 frame
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TCP.TCPFrame">
            <summary>
            Represents a TCP frame
            <remarks>
            If you change any properties of this frame, you have to manually calculate and set the checksum by crating an IP pseudo header and
            using the CalcualteChecksum method with it. The result must be saved into the Checksum property of this frame.
            </remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPFrame.#ctor">
            <summary>
            Creates a new empty instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPFrame.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The byte array to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPFrame.CalculateChecksum(System.Byte[])">
            <summary>
            Calculates the TCP checksum of this frame
            </summary>
            <param name="bPseudoHeader">The IP pseudo header to add to the checksum</param>
            <returns>The checksum data</returns>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPFrame.Clone">
            <summary>
            Returns a new identical instance of this frame
            </summary>
            <returns>A new identical instance of this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPFrame.ToString">
            <summary>
            Returns a string representation of this frame.
            </summary>
            <returns>A string representation of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.SourcePort">
            <summary>
            Gets or sets the TCP source port
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.DestinationPort">
            <summary>
            Gets or sets the TCP destination port
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.SequenceNumber">
            <summary>
            Gets or sets the TCP sequence number
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.AcknowledgementNumber">
            <summary>
            Gets or sets the TCP acknowledgement number
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.DataOffset">
            <summary>
            Gets or sets the data offset in bits
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.Urgent">
            <summary>
            Gets or sets the urgent flag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.AcknowledgementFlagSet">
            <summary>
            Gets or sets the value of the acknowledgement flag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.PushFlagSet">
            <summary>
            Gets or sets the value of the push flag 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.ResetFlagSet">
            <summary>
            Gets or sets the value of the reset flag 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.SynchronizeFlagSet">
            <summary>
            Gets or sets the value of the sync flag 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.FinishFlagSet">
            <summary>
            Gets or sets the value of the finish flag 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.Window">
            <summary>
            Gets or sets the TCP window size
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.Checksum">
            <summary>
            Gets or sets the checksum
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.UrgentPointer">
            <summary>
            Gets or sets the urgent pointer
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.Options">
            <summary>
            Gets or sets the TCP options
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.FrameType">
            <summary>
            Returns FrameType.TCP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.FrameBytes">
            <summary>
            Gets the frame converted to its byte representation
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPFrame.Length">
            <summary>
            Gets the length of the bytes of this frame and its encapsulated frames in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RIP.RIPFrame">
            <summary>
            This class represents a RIP frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPFrame.#ctor(System.Byte[])">
            <summary>
            Creates a new RIP frame by parsing the given data.
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPFrame.GetUpdates">
            <summary>
            Returns all RIP updates contained in this frame.
            </summary>
            <returns>All RIP updates contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPFrame.AddUpdate(eExNetworkLibrary.Routing.RIP.RIPUpdate)">
            <summary>
            Adds a RIP update to this frame
            </summary>
            <param name="ripUpdate">The RIP update to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPFrame.RemoveUpdate(eExNetworkLibrary.Routing.RIP.RIPUpdate)">
            <summary>
            Removes a RIP update from this frame.
            </summary>
            <param name="ripUpdate">The update to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPFrame.ClearUpdates">
            <summary>
            Clears all RIP updates from this frame.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPFrame.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPFrame.ToString">
            <summary>
            Returns a string representation of this frame.
            </summary>
            <returns>A string representation of this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPFrame.Clone">
            <summary>
            Clones this frame.
            </summary>
            <returns>A new, identical RIPFrame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPFrame.RIPv2MulticastAddress">
            <summary>
            Gets the default RIPv2 multicast address.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPFrame.Command">
            <summary>
            Gets or sets the RIP command
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPFrame.Version">
            <summary>
            Gets or sets the version of this RIP frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPFrame.FrameType">
            <summary>
            Returns FrameType.RIP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPFrame.FrameBytes">
            <summary>
            Gets the raw byte representation of this frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPFrame.Length">
            <summary>
            Gets the length of this frame's bytes.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RIP.RIPUpdate">
            <summary>
            Represents a RIP update, which is usually contained in a RIP frame.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPUpdate.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data.
            </summary>
            <param name="bData">The data to parse.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPUpdate.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPUpdate.#ctor(eExNetworkLibrary.Routing.RIP.RIPEntryAddressFamily,System.Byte[],eExNetworkLibrary.Subnetmask,System.Net.IPAddress,System.Net.IPAddress,System.UInt32)">
            <summary>
            Creates a new instance of this class with the given properties.
            </summary>
            <param name="afiAddressFamilyIdentifier">The address family identifier</param>
            <param name="bRouteTag">The route tag for RIPv2, a byte array of length two</param>
            <param name="smMask">The subnetmask for RIPv2</param>
            <param name="ipaNextHop">The IPAddress of the next hop for RIPv2</param>
            <param name="ipaAddress">The IPAddress of the destination</param>
            <param name="iMetric">The metric</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPUpdate.ToString">
            <summary>
            Returns the string representation of this RIP frame as RIPv1 frame.
            </summary>
            <returns>The string representation of this RIP frame as RIPv1 frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPUpdate.ToString(System.Int32)">
            <summary>
            Returns the string representation of this frame as the given RIP version.
            </summary>
            <param name="iVersion">The version of this frame.</param>
            <returns>A string describing this frame according to the given version.</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPUpdate.AddressFamilyIdentifier">
            <summary>
            Gets or sets the address family identifier.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPUpdate.Address">
            <summary>
            Gets or sets the IPAddress of the destination
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPUpdate.Ripv2NextHop">
            <summary>
            Gets or sets the IPAddress of the RIPv2 next hop
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPUpdate.Ripv2SubnetMask">
            <summary>
            Gets or sets the subnetmask for RIPv2
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPUpdate.Ripv2RouteTag">
            <summary>
            Gets or sets the RIPv2 route tag-
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPUpdate.Metric">
            <summary>
            Gets or sets the metric
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPUpdate.Raw">
            <summary>
            Returns the raw byte representation of this RIP update.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPUpdate.Length">
            <summary>
            Returns the length of this RIP update in bytes (always 20)
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RIP.RipCommand">
            <summary>
            An enum defining several RIP commands.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RIP.RipCommand.RIPRequest">
            <summary>
            A RIP request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RIP.RipCommand.RIPResponse">
            <summary>
            A RIP response
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RIP.RipCommand.TraceOn">
            <summary>
            The RIP TraceOn command
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RIP.RipCommand.TraceOf">
            <summary>
            The RIP TrafeOff command
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RIP.RipCommand.Reserved">
            <summary>
            A reserved RIP command
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RIP.RIPEntryAddressFamily">
            <summary>
            The RIP update's address family.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RIP.RIPEntryAddressFamily.IPv4">
            <summary>
            Internet protocol version 4
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.MACAddress">
            <summary>
            This class represents a MACAddress
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.MACAddress.#ctor(System.Byte[])">
            <summary>
            Creates a new MACAddress with the specified address bytes.
            </summary>
            <param name="bAddressBytes"></param>
        </member>
        <member name="M:eExNetworkLibrary.MACAddress.#ctor">
            <summary>
            Creates a new, empty MACAddress
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.MACAddress.ToString">
            <summary>
            Converts this MACAddress into a string
            </summary>
            <returns>A string representing the current MACAddress</returns>
        </member>
        <member name="M:eExNetworkLibrary.MACAddress.Parse(System.String)">
            <summary>
            Parses a string to a MACAddress.
            </summary>
            <param name="strIn">An input string in the form X:X:X:X:X:X, where X is a hexadecimal number between 0 and FF</param>
            <returns>A MACAddress</returns>
        </member>
        <member name="M:eExNetworkLibrary.MACAddress.Equals(System.Object)">
            <summary>
            Compares this MACAddress to an object
            </summary>
            <param name="obj">The object to compare to this MACAddress</param>
            <returns>A bool inicating, whether <paramref name="obj"/> equals to this MACAddress</returns>
        </member>
        <member name="M:eExNetworkLibrary.MACAddress.GetHashCode">
            <summary>
            Returns the hash code of this MACAddress
            </summary>
            <returns>The hash code of this MACAddress</returns>
        </member>
        <member name="P:eExNetworkLibrary.MACAddress.Empty">
            <summary>
            Returns an empty MACAddress (00:00:00:00:00:00)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.MACAddress.DeadCafeBabe">
            <summary>
            Returns the famous MACAddress DE:AD:CA:FE:BA:BE
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.MACAddress.Broadcast">
            <summary>
            Returns a broadcast MACAddress (FF:FF:FF:FF:FF:FF)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.MACAddress.Badcable">
            <summary>
            Returns the famous MACAddress BA:D0:CA:BL:E0:00
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.MACAddress.AddressBytes">
            <summary>
            Returns the address bytes of the current MACAddress
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.MACAddress.IsEmpty">
            <summary>
            Gets a bool determining whether this MACAddress is empty
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.MACAddress.IsBroadcast">
            <summary>
            Gets a bool determining whether this MACAddress is a broadcast address
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ARP.ARPHostEntry">
            <summary>
            This class represents an entry in an ARP host table
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ARP.ARPHostEntry.#ctor(eExNetworkLibrary.MACAddress,System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="macAddress">The IP address</param>
            <param name="ipAddress">The MAC address associated with the IP address</param>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPHostEntry.MAC">
            <summary>
            The MAC address associated with the IP address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ARP.ARPHostEntry.IP">
            <summary>
            The IP address
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.RingBuffer">
            <summary>
            Represents a thread safe buffer, which can be written to and read simultaneously. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.RingBuffer.#ctor(System.Int32)">
            <summary>
            Creates a new instance of this class with the given capacity
            </summary>
            <param name="iSize">The initial capacity, in bytes, of this ring buffer</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.RingBuffer.Read">
            <summary>
            Reads a byte from the buffer.
            This method blocks until data for reading is available.
            </summary>
            <returns>A value between 0 and 255 and -1 if the buffer was forcibly closed while reading.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.RingBuffer.Write(System.Byte)">
            <summary>
            Writes a byte to the buffer.
            This method blocks until space for writing is available
            </summary>
            <param name="b">The byte to write</param>
            <exception cref="!:InvalidOperationExceptoin">Is thrown if the buffer is full.</exception>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.RingBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from this buffer and stores them in <paramref name="arBuffer"/>.
            This method blocks until all the bytes to read are available. 
            </summary>
            <param name="arBuffer">The array which is filled with the data read from the buffer.</param>
            <param name="iOffset">The offset in <paramref name="arBuffer"/> at which to begin</param>
            <param name="iCount">The count of bytes to read</param>
            <returns>The number of bytes written into <paramref name="arBuffer"/></returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.RingBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a number of bytes into this buffer.
            This method blocks until enough free space to write all the bytes is available. 
            </summary>
            <param name="arBuffer">The data to write</param>
            <param name="iStartIndex">The index at where writing should begin</param>
            <param name="iCount">The number of bytes to write</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.RingBuffer.Close">
            <summary>
            Closes this buffer and frees all associated resources.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.RingBuffer.Finalize">
            <summary>
            Destroys and closes this ring buffer
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.RingBuffer.Count">
            <summary>
            Gets the count of bytes in this buffer
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.RingBuffer.Size">
            <summary>
            Gets the size of this buffer
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.RingBuffer.Closed">
            <summary>
            Gets a bool indicating whether this buffer is closed.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.PacketCorrupter">
            <summary>
            This class represents an abstract implementation of a packet corrupting simulator chain item where corruption occours based on a given probability and on a random error count between two given bounds.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.RandomEventTrafficSimulatorItem">
            <summary>
            This abstract class represents a base for all kinds of simulator items where events occour according to a given probability.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.RandomEventTrafficSimulatorItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.RandomEventTrafficSimulatorItem.Push(eExNetworkLibrary.Frame)">
            <summary>
            Applies the effect of this simulator chain item to the given frame.
            </summary>
            <param name="f">The input frame</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.RandomEventTrafficSimulatorItem.CaseHappening(eExNetworkLibrary.Frame)">
            <summary>
            Is called when the case happens.
            </summary>
            <param name="f">The frame to process</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.RandomEventTrafficSimulatorItem.CaseNotHappening(eExNetworkLibrary.Frame)">
            <summary>
            Is called when the case does not happen.
            </summary>
            <param name="f">The frame to process</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.RandomEventTrafficSimulatorItem.Start">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.RandomEventTrafficSimulatorItem.Stop">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.RandomEventTrafficSimulatorItem.Probability">
            <summary>
            Gets or sets the probability of the event to happen in percent (between 0 and 100).
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Simulation.PacketCorrupter.iMinErrorCount">
            <summary>
            This varaible represents the minimum error count for the random chosen frame.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Simulation.PacketCorrupter.iMaxErrorCount">
            <summary>
            This varaible represents the maximal error count for the random chosen frame.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketCorrupter.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketCorrupter.CaseHappening(eExNetworkLibrary.Frame)">
            <summary>
            Corrupts the frame
            </summary>
            <param name="f">The frame to corrupt</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketCorrupter.DoErrors(System.Byte[])">
            <summary>
            This method is called to do the errors
            </summary>
            <param name="bData">The data to corrupt</param>
            <returns>The corrupted data</returns>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketCorrupter.CaseNotHappening(eExNetworkLibrary.Frame)">
            <summary>
            Forwards the frame
            </summary>
            <param name="f">The frame to forward</param>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.PacketCorrupter.MinErrorCount">
            <summary>
            Sets the minimum errors for the random chosen frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.PacketCorrupter.MaxErrorCount">
            <summary>
            Sets the maximum errors for the random chosen frame.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficModifiers.TCPStreamModifier">
            <summary>
            This class can be used for modifying TCP streams
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficModifiers.TCPStreamModifier.RemoveIfClosed(eExNetworkLibrary.TrafficModifiers.TCPStreamModifierStack)">
            <summary>
            Checks whether all worker threads exited and all resources have been disposed. If true, removes the stack. 
            </summary>
            <param name="tsmsStack">The stack to check</param>
            <returns>A bool indicating whether all worker threads exited and all resources have been disposed.</returns>
        </member>
        <member name="P:eExNetworkLibrary.TrafficModifiers.TCPStreamModifier.AutoExcludeLocalConnections">
            <summary>
            A bool indicating whether connections from or to addresses which 
            are assigned to this hosts network card by the operating system should be 
            intercepted or not. 
            
            Local addresses are queried when this handler is created from the operating systems interface configuration.  
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.Portscan">
            <summary>
            This class is capable of doing simple portscans
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.Portscan.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="ipaTarget">The IPAddress to scan</param>
            <param name="iPort">The port to scan</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.Portscan.Scan">
            <summary>
            Scans the target port on the target host synchronously.
            </summary>
            <returns>A bool indicating whether the port is open.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.Portscan.ScanAsync">
            <summary>
            Scans the target port on the target host asynchronously.
            The result will be delivered by rising the PortscanCompleted event.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.Portscan.StopAsyncScan">
            <summary>
            Immideately stops the current asyncronous scan.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.Portscan.onPortscanCompleted">
            <summary>
            This event is fired whan a portscan is finished
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.Portscan.PortscanCompletetEventHandler">
            <summary>
            A delegate for handling finished portscans
            </summary>
            <param name="sender">The calling object</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.PortscanCompletedEventArgs">
            <summary>
            A class which represents simple EventArgs to deliver a completed portscans status.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.PortscanCompletedEventArgs.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="ipaTarget">The target host</param>
            <param name="iPort">The target port</param>
            <param name="bSuccess">A bool indicating whether the port was open</param>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.PortscanCompletedEventArgs.Target">
            <summary>
            The target host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.PortscanCompletedEventArgs.Port">
            <summary>
            The target port
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.PortscanCompletedEventArgs.Success">
            <summary>
            A bool indicating whether the port was open
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.FrameType">
            <summary>
            Describes several types of well-known eExNetworkLibrary frames.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.TrafficDescriptionFrame">
            <summary>
            A traffic description frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.Ethernet">
            <summary>
            An ethernet frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.IP">
            <summary>
            An IP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.UDP">
            <summary>
            A UDP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.TCP">
            <summary>
            A TCP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.ByteData">
            <summary>
            A raw data (unparsed) frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.ARP">
            <summary>
            An ARP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.RIP">
            <summary>
            A RIP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.TLVItem">
            <summary>
            A TLV item
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.DHCP">
            <summary>
            A DHCP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.ICMP">
            <summary>
            An ICMP frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFHeader">
            <summary>
            An OSPF header
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFHello">
            <summary>
            An OSPF hello message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFDatabaseDescription">
            <summary>
            An OSPF database description message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFLSAHeader">
            <summary>
            An OSPF database description message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFRouterLSA">
            <summary>
            An OSPF router LSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFNetworkLSA">
            <summary>
            An OSPF network LSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFSummaryLSA">
            <summary>
            An OSPF summary LSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFExternalLSA">
            <summary>
            An OSPF external LSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFLSARequest">
            <summary>
            An OSPF LSA request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFLSAcknowledgement">
            <summary>
            An OSPF LSA acknowledgement
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.OSPFLSAUpdate">
            <summary>
            An OSPF LSA update
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.DNS">
            <summary>
            A DNS frame
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.FrameType.UserDefined">
            <summary>
            User protocol implementations
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.ChecksumCalculator">
            <summary>
            A simple checksum calculator, which can be used to calculate IP checksums and so on.
            This check sum calculator is a little bit buggy and not always works right.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.ChecksumCalculator.CalculateChecksum(System.Byte[])">
            <summary>
            Calculates a checksum from the given data
            </summary>
            <param name="bData">The data to calculate the checksum from</param>
            <returns>The resulting checksum</returns>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.Simulator">
            <summary>
            This class represents the base for a simulator filled with simulator chain items. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.Simulator.#ctor">
            <summary>
            Creates a new instance of this class. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.Simulator.AddSimulatorChainItems">
            <summary>
            This is a method which is responsible to add simulator items in a derived class. 
            These items should be chained together and will then be handled like the items of a linked list. 
            Do not forget to link the Next propertie of the last item to this class. 
            The class Simulator will call the Start method of each given item. 
            <example><code>
            //Code snippet from WAN Emulator
            protected ITrafficSimulatorChainItem AddSimulatorChainItems();
            {
                // create traffic simulator chain items
                scSpeedConstrainer = new SpeedConstrainer();
                pdPacketDropper = new PacketDropper();
                pdPacketDuplicator = new PacketDuplicator();
                pdPacketReorderer = new PacketReorderer();
                bfByteFlipper = new ByteFlipper();
                tjTimeJitter = new DelayJitter();
            
                // link the items together like they were a linked list
                scSpeedConstrainer.Next = pdPacketDropper;
                pdPacketDropper.Next = pdPacketDuplicator;
                pdPacketDuplicator.Next = pdPacketReorderer;
                pdPacketReorderer.Next = bfByteFlipper;
                bfByteFlipper.Next = tjTimeJitter;
                
                // assign the simulator itself as the last item of the chain
                tjTimeJitter.Next = this;
            
                // return the first item of the chain
                return scSpeedConstrainer;
            }
            </code></example>
            </summary>
            <returns>The root of a linked chain of Traffic Simulator Modify Items</returns>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.Simulator.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Pushes the frame forward to the first item in this simulators item chain
            </summary>
            <param name="fInputFrame">The frame to push</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.Simulator.Push(eExNetworkLibrary.Frame)">
            <summary>
            Pushes the frame to the next given traffic handler.
            </summary>
            <param name="f">The frame to push</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.Simulator.Cleanup">
            <summary>
            Stops all simulation items.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.Simulator.Start">
            <summary>
            Starts all simulation items.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.Simulator.Next">
            <summary>
            returns null. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField">
            <summary>
            This class represents an OSPF options field
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.#ctor(System.Byte)">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.TBit">
            <summary>
            Gets or sets the T-bit, which indicates the router's TOS capability.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.EBit">
            <summary>
            Gets or sets the E-bit, which indicates the router's external routing capability.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.MCBit">
            <summary>
            Gets or sets the MC-bit, which indicates the router's multicast capability.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.DNBit">
            <summary>
            Gets or sets the routers DN-bit
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.OBit">
            <summary>
            Gets or sets the OSPF O-bit, which indicates the use of opaque-LSAs
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.DemandCircuitsSupported">
            <summary>
            Gets or sets a bit, which indicates the router's demand circuits capability.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.ContainsLLSData">
            <summary>
            Gets or sets a bit indicating whether the OSPF frame this options belong contains LLS data.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.SupportsNSSA">
            <summary>
            Gets or sets a bit, which indicates the router's NSSA capability.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.Data">
            <summary>
            Returns this OSPF option class compressed to a single byte
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFOptionsField.Length">
            <summary>
            Returns the length of the OSPF options field in bytes (1)
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.LSAHeader">
            <summary>
            This class represents an OSPF LSA header, the common part of each LSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSAHeader.LS_MaxAge">
            <summary>
            Defines the LS maximum age
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.LSAHeader.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.LSAHeader.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data.
            This constructor also creates the LSA body,
            which is set as encapsulated frame of the created instance.
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.LSAHeader.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Creates a new instance of this class by parsing the given data.
            </summary>
            <param name="bData">The data to parse</param>
            <param name="bCreateBody">A bool indicating whether a LSA body should be created. Set this property to false for database descriptions and LS acknowledgements messages</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.LSAHeader.Clone">
            <summary>
            Returns an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.OrigalLength">
            <summary>
            Cached original Length for LSA Acknowledgements and DB Descriptions. Set this value to -1 to use a self-calculated length in the output frame.
            This property is important for database descriptions and LSA acknowledgements, because LSA headers without a body are used.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.OriginalChecksum">
            <summary>
            Cached original checksum for LSA Acknowledgements and DB Descriptions. Set this array to a zero-length array to use a self-calculated checksum in the output frame. 
            This property is important for database descriptions and LSA acknowledgements, because LSA headers without a body are used.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.Options">
            <summary>
            Gets or sets the OSPF options field
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.LSType">
            <summary>
            Gets or sets the LS type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.LinkStateID">
            <summary>
            Gets or sets the link state ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.AdvertisingRouter">
            <summary>
            Gets or sets the ID of the advertising router
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.SequenceNumber">
            <summary>
            Gets or sets the sequence number
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.LSAge">
            <summary>
            Gets or sets the LS age
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.FrameType">
            <summary>
            Returns FrameType.OSPFLSAHeader
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.LSAHeader.Length">
            <summary>
            Gets the length of this frame and its encapsulated frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.LSType">
            <summary>
            An enumeration for diffrent LSA types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.Unknown">
            <summary>
            Unknwon
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.Router">
            <summary>
            Router LSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.Network">
            <summary>
            Network LSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.Summary_IP">
            <summary>
            Summary LSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.Summary_ASBR">
            <summary>
            Autonomous system border router summary
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.External">
            <summary>
            External
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.GroupMembership">
            <summary>
            Group membership
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.NSSA">
            <summary>
            NSSA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.NotUsed">
            <summary>
            Not used / reserved
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.Opaque9">
            <summary>
            Opaque9
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.Opaque10">
            <summary>
            Opaque10
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.LSType.Opaque11">
            <summary>
            Opaque11
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Spoofing.APRAttack">
            <summary>
            This class is capable of initiating an ARP poison routing attack by spoofing ARP packets
            This class also includes its own MAC address analyzing component
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Throws an exception since APR attacks only generate traffic
            </summary>
            <param name="fInputFrame">The frame to handle</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.AddToVictimList(eExNetworkLibrary.Attacks.MITMAttackEntry)">
            <summary>
            Adds an MITM Attack Entry to this MITM Attack. Adding victims not in direct connected subnets or not present in the interface's ARP-table will be without any effect. 
            To avoid the last situation, it is wise to run an ARP scan first on the subnet to attack.
            </summary>
            <param name="apreVicim">The victims to add to this attack.</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.RemoveFromVictimList(eExNetworkLibrary.Attacks.MITMAttackEntry)">
            <summary>
            Removes a man in the middle attack entry from the victim list of this attack
            </summary>
            <param name="apreVicim">The man in the middle attack entry to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.VictimListContains(eExNetworkLibrary.Attacks.MITMAttackEntry)">
            <summary>
            Checks whether a specific man in the middle attack entry is contained in this attack
            </summary>
            <param name="apreVicim">A specific man in the middle attack entry</param>
            <returns>A bool indicating whether a specific man in the middle attack entry is contained in this attack</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.ClearVictimList">
            <summary>
            Clears the victim list
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.GetVictims">
            <summary>
            Returns all man in the middle attack entries of this attack's victim list
            </summary>
            <returns></returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.Start">
            <summary>
            Starts this attack
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.Cleanup">
            <summary>
            Stops this attack and restores the ARP tables of the attacked hosts, which causes the traffic flow not to interrupt
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.Stop">
            <summary>
            Stops 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.InvokePoisoned">
            <summary>
            Rises the poisoned event
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.AddInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Adds an interface to this APR attack
            </summary>
            <param name="ipInterface">The IP interface to add. This interface has to be an ethernet interface.</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.PauseAttack">
            <summary>
            Pauses the attack until ResumeAttack() is called.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.APRAttack.ResumeAttack">
            <summary>
            Resumes the attack which was suspended when PauseAttack() was called.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Attacks.Spoofing.APRAttack.OnAttackEntryStatusChanged">
            <summary>
            This event is fired whenever the status of an ARP attack entry has changed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Attacks.Spoofing.APRAttack.Poisoned">
            <summary>
            This event is fired when poisened ARP packets are sent
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.APRAttack.SpoofInterval">
            <summary>
            Gets or sets the interval at which spoofed ARP packets should be sent in milliseconds
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.APRAttack.AttackRunning">
            <summary>
            Gets a bool inidicating whether a APR attack is currently running
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.APRAttack.OutputHandler">
            <summary>
            Setting output handlers is not supported by APR attacks
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.APRAttack.Method">
            <summary>
            Gets or sets the APR attack method
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Spoofing.APRAttack.APRAttackEntryStatusChanged">
            <summary>
            This delegate represents the method which handles ARP attack entry events.
            </summary>
            <param name="sender">The object which fired the event</param>
            <param name="arpChanged">The event arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Spoofing.APRAttackMethod">
            <summary>
            An enumeration for APR attack methods
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Attacks.Spoofing.APRAttackMethod.UseReplyPackets">
            <summary>
            Use reply packets
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Attacks.Spoofing.APRAttackMethod.UseRequestPackets">
            <summary>
            Use request packets. This method will cause more traffic since each request packet will be answered
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IPInterface">
            <summary>
            This class represents an physical IP interface of a computer.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IPInterface.ipaIpAddresses">
            <summary>
            All IP addresses of this interface
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IPInterface.subNetmasks">
            <summary>
            All subnetmasks of this interface
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IPInterface.ipStandardgateways">
            <summary>
            The gateways of this interface - must be set by deriving class in the constructor
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IPInterface.bShutdownPending">
            <summary>
            Indicates whether a shutdown is in progress. An interface must immideately stop receiving traffic when this variable is set to true
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IPInterface.aType">
            <summary>
            The adapter type of this interface - must be set by deriving class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.Send(eExNetworkLibrary.Frame,System.Net.IPAddress)">
            <summary>
            Pushes this frame to the output queue after updating layer 2 data according to the properties of this interface. 
            </summary>
            <param name="fFrame">The frame to send.</param>
            <param name="ipaDestination">The destination of the given frame</param>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.Send(eExNetworkLibrary.Frame)">
            <summary>
            Pushes this frame to the output qeueue as it is, without changin anything.
            </summary>
            <param name="fFrame">The frame to send.</param>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.Send(System.Byte[])">
            <summary>
            Pushes the given bytes to the output queue as they are.
            </summary>
            <param name="bBytes">The bytes to send.</param>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.Pause">
            <summary>
            Stops this IPInterface.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.AddAddress(System.Net.IPAddress,eExNetworkLibrary.Subnetmask)">
            <summary>
            Adds an IP address and the corresponding subnetmask to this interface
            </summary>
            <param name="ipa">The IPAddress to add</param>
            <param name="smMask">The subnetmask to add</param>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.GetMaskForAddress(System.Net.IPAddress)">
            <summary>
            Returns the subnetmask for an IPAddress associated to this interface
            </summary>
            <param name="ipa">The IPAddress for which the subnetmask should be searched</param>
            <returns>The subnetmask of the given IPAddres</returns>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.RemoveAddress(System.Net.IPAddress)">
            <summary>
            Removes an IPAddress and its corresponding subnetmask from this interface
            </summary>
            <param name="ipa">The IPAddress to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.InvokeBytesCaptured(System.Byte[])">
            <summary>
            Rises the BytesCaptured event
            </summary>
            <param name="bBuffer">The bytes which were captured</param>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.InvokePacketCaptured(eExNetworkLibrary.Frame)">
            <summary>
            Rises the PacketCaptured event with the given frame
            </summary>
            <param name="fFrame">The frame which was captured</param>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Pushes the given frame to the output queue of the underlying interface without changing the frame.
            </summary>
            <param name="fInputFrame">The frame to send</param>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.Cleanup">
            <summary>
            Causes this interface to stop forwarding traffic. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IPInterface.ContainsAddress(System.Net.IPAddress)">
            <summary>
            Checks wheter a given address is used by this interface
            </summary>
            <param name="iPAddress">The address to search for</param>
            <returns>A bool indicating wheter a given address is used by this interface</returns>
        </member>
        <member name="E:eExNetworkLibrary.IPInterface.PacketCaptured">
            <summary>
            This event is fired when a packet is captured at this interface
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.IPInterface.BytesCaptured">
            <summary>
            This event is fired when bytes are captured at this interface
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.IPInterface.AddressAdded">
            <summary>
            This event is fired when an IPAddress and a Subnetmask are added to this IPInterface
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.IPInterface.AddressRemoved">
            <summary>
            This event is fired when an IPAddress and a Subnetmask are removed from this IPInterface
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.IPInterface.DelayWarning">
            <summary>
            This event is fired when delays are higher than 250 milliseconds.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IPInterface.IsUp">
            <summary>
            Gets a bool inidcating whether this interface is online and running
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IPInterface.Standardgateways">
            <summary>
            Gets this interfaces standard gateways
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IPInterface.Subnetmasks">
            <summary>
            Gets this interfaces subnetmasks
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IPInterface.IpAddresses">
            <summary>
            Gets this interfaces IPAddresses
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IPInterface.Description">
            <summary>
            Must return this interfaces description
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IPInterface.Name">
            <summary>
             Must return this interfaces name
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IPInterface.DNSName">
            <summary>
            Must return this interfaces DNS name
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IPInterface.AdapterType">
            <summary>
            Returns the AdapterType of this interface
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IPInterface.AddressEventHandler">
            <summary>
            This delegate is used to handle address events
            </summary>
            <param name="sender">The object which fired the event</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.IPInterface.PacketCapturedHandler">
            <summary>
            This delegate is used for handling captured frames
            </summary>
            <param name="fFrame">The captured frame</param>
            <param name="sender">The calling object</param>
        </member>
        <member name="T:eExNetworkLibrary.IPInterface.BytesCapturedHandler">
            <summary>
            This delegate is used for handling captured bytes
            </summary>
            <param name="bData">The captured bytes</param>
            <param name="sender">The calling object</param>
        </member>
        <member name="T:eExNetworkLibrary.AddressEventArgs">
            <summary>
            Represents a EventArgs for address changes
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.AddressEventArgs.#ctor(System.Net.IPAddress,eExNetworkLibrary.Subnetmask,eExNetworkLibrary.IPInterface)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="ipa">The IPAddress</param>
            <param name="smMask">The subnetmask</param>
            <param name="ipiInterface">The interface</param>
        </member>
        <member name="P:eExNetworkLibrary.AddressEventArgs.IP">
            <summary>
            Gets the IPAddress
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.AddressEventArgs.Netmask">
            <summary>
            Gets the subnetmask
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.AddressEventArgs.Interface">
            <summary>
            Gets the interface
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.InterfaceException">
            <summary>
            This class represents an exception occoured during the sending process of an interface
            This exception occours on errors during the forwarding process of a frame, e.g. data link or physical errors errors
            See the message of the exception for more details
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.InterfaceException.#ctor(System.String)">
            <summary>
            Creates a new instance of this class with the given params
            </summary>
            <param name="strMessage">The message of this exception</param>
        </member>
        <member name="M:eExNetworkLibrary.InterfaceException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this class with the given params
            </summary>
            <param name="strMessage">The message of this exception</param>
            <param name="exInnerException">The inner exception of this exception</param>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.SocketBase">
            <summary>
            This class represents the base for socket implementations. 
            This class is designed to be modular and stackable. 
            
            Considerations:
            
            
                            [....]         
                    *                    *
                   \ /                  / \
              **********************************
              * PushDown()    FrameDecapsulated*
              *                                *
              *                                *
              *                                *
              *          Parent Socket         *
              *                                *
              *                                *
              *                                *
              *FrameEncapsulated      PushUp() *
              **********************************
                   \ /                  / \
                    *                    *
                    *                    *
                    *                    *
                   \ /                  / \
              **********************************
              * PushDown()    FrameDecapsulated*
              *                                *
              *                                *
              *                                *
              *          Child  Socket         *
              *                                *
              *                                *
              *                                *
              *FrameEncapsulated      PushUp() *
              **********************************
                   \ /                  / \
                    *                    *
                            [....]        
                            
            If you use the ChildSocket and ParentSocket properties to assign to sockets to be child and parent, the connections
            of event handlers will be done automatically. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.InvokeExternal(System.Delegate,System.Object)">
            <summary>
            Invokes a delegate on any external object with the given params and waits for the invoke's completion.
            This method automatically determines whether dynamic invoking is possible or a invoke over the ISynchronizeInvoke interface is required.
            </summary>
            <param name="d">The delgate to invoke</param>
            <param name="param">The params for the invocation</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.InvokeExternalAsync(System.Delegate,System.Object)">
            <summary>
            Invokes a delegate asyncronously on any external object with the given params.
            This method automatically determines whether dynamic invoking is possible or a invoke over the ISynchronizeInvoke interface is required.
            </summary>
            <param name="d">The delgate to invoke</param>
            <param name="param">The params for the invocation</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.InvokeFrameDecapsulated(eExNetworkLibrary.Frame)">
            <summary>
            Fires the FrameDecapsulated event asynchronously. 
            </summary>
            <param name="fFrame">The frame associated with this event.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.InvokeFrameDecapsulated(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Fires the FrameDecapsulated event asynchronously.
            </summary>
            <param name="fFrame">The frame associated with this event.</param>
            <param name="fFrame">A bool indicating whether this frame was delivered with a push flag.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.InvokeFrameEncapsulated(eExNetworkLibrary.Frame)">
            <summary>
            Fires the FrameEncapsulated event asynchronously. 
            </summary>
            <param name="fFrame">The frame associated with this event.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.InvokeFrameEncapsulated(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Fires the FrameEncapsulated event asynchronously.
            </summary>
            <param name="fFrame">The frame associated with this event.</param>
            <param name="fFrame">A bool indicating whether this frame was delivered with a push flag.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.PushUp(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            This method has to accept any type of frames. If the frame pushed to the socket is matching the socket's binding, 
            the frame should be <b>decapsulated</b> and true should be returned. Otherwise the frame should be discarded by this instance 
            and false should be returned.
            After successfully processing the frame, the FrameDecapsulated event must be called with the decapsulated frame as paramater. 
            </summary>
            <param name="fFrame">The frame to process. <b>This frame instance should only be read, not edited.</b></param>
            <param name="bPush">A bool indicating whether the frame was delivered with a push flag.</param>
            <returns>A bool indicating whether the submitted frame matches this socket's binding.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.Flush">
            <summary>
            Forces the socket to send out all data waiting to be send immedeately, if possible.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.Close">
            <summary>
            Closes this socket and frees all used resources.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.PushDown(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            This method has to accept any type of frames. 
            The given frame should be <b>encapsulated</b> according to this socket's binding.
            After successfully processing the frame, the FrameEncapsulated event must be called with the encapsulated frame as paramater. 
            </summary>
            <param name="fFrame">The frame to process. <b>This frame instance should only be read, not edited.</b></param>
            <param name="bPush">A bool indicating whether the frame was delivered with a push flag.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketBase.PushDown(System.Byte[],System.Boolean)">
            <summary>
            This method accepts an array of bytes. 
            The given bytes are <b>encapsulated</b> according to this socket's binding.
            After successfully processing the frame, the FrameEncapsulated event is called with the encapsulated frame as paramater. 
            </summary>
            <param name="bPush">A bool indicating whether the frame was delivered with a push flag.</param>
            <param name="bData">The bytes to process</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.SocketBase.IsOpen">
            <summary>
            A bool indicating whether the socken can receive or send data.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.SocketBase.ChildSocket">
            <summary>
            Gets or sets the socket which is located under this sockets instance in the socket-stack and automatically registers the FrameDecapsulated event handler to ensure stack functionality. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.SocketBase.ParentSocket">
            <summary>
            Gets or sets the socket which is located over this sockets instance in the socket-stack and automatically registers the FrameEncapsulated event handler to ensure stack functionality. 
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Sockets.SocketBase.FrameDecapsulated">
            <summary>
            This event is fired whenever frame processing and decapsulation finished and the decapsulated frame can be pushed upwards the stack. 
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Sockets.SocketBase.FrameEncapsulated">
            <summary>
            This event should be fired whenever frame processing and encapsulation finished and the encapsulated frame can be pushed downwards the stack. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.SocketBase.BindingInformation">
            <summary>
            This accessor has to return a BindingInformation object containing information about this socket's binding. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.TCPListenerSocket.#ctor(System.Int32,System.Int32,eExNetworkLibrary.Sockets.IPseudoHeaderSource)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="iSourcePort">The source (remote) port to bind this socket to</param>
            <param name="iDestinationPort">The destination (local) port to bind this socket to</param>
            <param name="bPseudoHeader">The layer 3 pseudeo header to calculate the checksum with</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.TCPListenerSocket.PushUp(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Decapsulates the given TCP frame if the binding of this socket matches the frame and invokes the FrameDecapsulated event when finished.
            </summary>
            <param name="fFrame">The frame to process</param>
            <param name="bPush">The TCP Socket ignores this parameter, since TCP push flags can be set in the TCP frame directly.</param>
            <returns>A bool indicating whether the given frame is matching the binding of this socket</returns>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.TCPListenerSocket.LocalBinding">
            <summary>
            Gets the local port to which this socket is bound
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.TCPListenerSocket.RemoteBinding">
            <summary>
            Gets the remote port to which this socket is bound
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HTTP.HTTPMessageType">
            <summary>
            Represents the HTTP message type
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMessageType.Response">
            <summary>
            A HTTP response
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMessageType.Request">
            <summary>
            A HTTP request
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RoutingTable">
            <summary>
            This class represents a routing table and has full support of querying routes per destination and metric. 
            <remarks>All public members of this class are thread safe.</remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.AddRoute(eExNetworkLibrary.Routing.RoutingEntry)">
            <summary>
            Adds a routing entry to this routing table.
            </summary>
            <param name="reToAdd">The routing entry to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.RemoveRoute(eExNetworkLibrary.Routing.RoutingEntry)">
            <summary>
            Removes a routing entry from this routing table.
            </summary>
            <param name="reToRemove">The routing entry to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.GetRouteToDestination(System.Net.IPAddress)">
            <summary>
            Gets the best match route with the lowest metric to the given destination.
            </summary>
            <param name="ipa">The destination to search the route for.</param>
            <returns>The best route to the destination, or null if no route is found.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.ContainsEntry(eExNetworkLibrary.Routing.RoutingEntry)">
            <summary>
            Returns a bool indicating whether this routing table contains a specific entry
            </summary>
            <param name="reEntry">The entry to search for</param>
            <returns>A bool indicating whether this routing table contains a specific entry</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.GetRoutes(System.Net.IPAddress)">
            <summary>
            Gets all matching routes for a destination.
            </summary>
            <param name="ipa">The destination to get the routes for.</param>
            <returns>An array filled with all routes for the given destination.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.GetRoutes">
            <summary>
            Gets all routes.
            </summary>
            <returns>All routes in this routing table.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.Clear">
            <summary>
            Clears all routes from this routing table.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.InvokeRouteUpdated(eExNetworkLibrary.Routing.RoutingEntry)">
            <summary>
            Rises the RouteUpdated event. If a class changes a routing entry, it has to rise this event immediatly after changing the routing entry.
            </summary>
            <param name="re">The changed routing entry.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTable.Invoke(System.Delegate,System.Object)">
            <summary>
            Invokes a delegate asynchronously.
            </summary>
            <param name="d">The delegate to invoke</param>
            <param name="param">The parameters</param>
        </member>
        <member name="E:eExNetworkLibrary.Routing.RoutingTable.RouteAdded">
            <summary>
            This event is rised when a route is added.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Routing.RoutingTable.RouteRemoved">
            <summary>
            This event is rised whan a route is removed.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Routing.RoutingTable.RouteUpdated">
            <summary>
            This event is rised when a rout is updated.
            The updating class has to rise this event by calling the corresponding method. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RoutingTable.RoutingTableEventHandler">
            <summary>
            This delegate is used to handle routing table changes
            </summary>
            <param name="sender">The class which rised this event</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RoutingTableEventArgs">
            <summary>
            This class represents a simple class to store information about routing table events.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingTableEventArgs.#ctor(eExNetworkLibrary.Routing.RoutingEntry,eExNetworkLibrary.Routing.RoutingTable)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="reEntry">The routing entry</param>
            <param name="rtOwner">The routing table owning the routing entry</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingTableEventArgs.Owner">
            <summary>
            Gets or sets the routing table which owned the route.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingTableEventArgs.Entry">
            <summary>
            Gets or sets the route.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage">
            <summary>
            This class represents an OSPF LSA acknowledgement message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.ClearItems">
            <summary>
            Removes all LSA headers from this acknowledgement message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.AddItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Adds an LSA header to this frame
            </summary>
            <param name="lsa">The LSA header to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.GetItems">
            <summary>
            Gets all LSA headers contained in this frame
            </summary>
            <returns>All LSA headers contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.ContainsItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Returns a bool indicating whether a specific LSA header is contained in this frame
            </summary>
            <param name="lsa">The LSA header to search for</param>
            <returns>A bool indicating whether a specific LSA header is contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.RemoveItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Removes a specific LSA header
            </summary>
            <param name="lsa">The LSA header to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.Clone">
            <summary>
            Returns an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.FrameType">
            <summary>
            Returns FrameType.OSPFLSAcknowledgement 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSAAcknowledgementMessage.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.NetDiscoveryUtility">
            <summary>
            This class represents a simple utility for network discovery, pinging and tracing.
            <remarks>Warning: The implementation is a little bit sloppy (e.g. Thread.Abort etc.), but the class should work.</remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.PerformPingAsync(System.Net.IPAddress)">
            <summary>
            Performs an asyncronous pathping to a specified target.
            </summary>
            <param name="ipaTarget">The target</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.PerformPing(System.Net.IPAddress)">
            <summary>
            Performs an ping to a specified target
            </summary>
            <param name="ipaTarget">The target</param>
            <returns>The ping reply</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.NetScanAsync(System.Net.IPAddress,System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Starts an asyncronous netscan.
            </summary>
            <param name="ipaStart">The start IPAddress of the scan range</param>
            <param name="ipaEnd">The end IPAddress of the scan range</param>
            <param name="iSleepDuration">The timeout between each ping</param>
            <param name="iTimeout">The timeout to wait for each ping</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.NetScan(System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
            <summary>
            Starts an syncronous netscan.
            </summary>
            <param name="ipaStart">The start IPAddress of the scan range</param>
            <param name="ipaEnd">The end IPAddress of the scan range</param>
            <param name="iTimeout">The timeout to wait for each ping</param>
            <returns>The ping replies for this netscan</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.PerformPathping(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Performs a pathping
            </summary>
            <param name="ipaTarget">The target</param>
            <param name="iHopcount">The maximum hopcount</param>
            <param name="iTimeout">The timeout for each ping</param>
            <returns>An array of PingReplys for the whole path</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.PerformPathpingAsync(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Performs an asnycronous pathping
            </summary>
            <param name="ipTarget">The target</param>
            <param name="iHopcount">The maximum hopcount</param>
            <param name="iTimeout">The timeout for each ping</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.CancelAll">
            <summary>
            Cancels all currently running operations
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.CancelNetScans">
            <summary>
            Cancels all currently running netscans
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.ResolveHostnameAsnc(System.Net.IPAddress)">
            <summary>
            Resolves a hostname asyncronously
            </summary>
            <param name="ipaToResolve">The IPAddress to resolve</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.NetDiscoveryUtility.Finalize">
            <summary>
            Disposes this class and stops all threads
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.NetDiscoveryUtility.OnPingCompleted">
            <summary>
            This event is fired whenever a ping is completed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.NetDiscoveryUtility.OnPathpingStepCompleted">
            <summary>
            This event is fired whenever a pathping step is completed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.NetDiscoveryUtility.OnNetScanStepCompleted">
            <summary>
            This event is fired whenever a network scan step is completed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.NetDiscoveryUtility.OnNetScanFinished">
            <summary>
            This event is fired whenever a net scan is completed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.NetDiscoveryUtility.OnPathpingFinished">
            <summary>
            This event is fired whenever a pathping is completed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.NetDiscoveryUtility.OnResolveFinished">
            <summary>
            This event is fired whenever a name resolve is completed
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.NetDiscoveryUtility.MaxParalellPathpings">
            <summary>
            Gets or sets the maximum count of parralell pathpings.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.NetDiscoveryUtility.PingResultEventHandler">
            <summary>
            Delegate for handling ping results
            </summary>
            <param name="sender">The calling object</param>
            <param name="args">Result params</param>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.NetDiscoveryUtility.PathpingStepEventHandler">
            <summary>
            Delegate for handling pathping step results
            </summary>
            <param name="sender">The calling object</param>
            <param name="args">Result params</param>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.NetDiscoveryUtility.PathpingCompletedEventHandler">
            <summary>
            Delegate for handling pathping results
            </summary>
            <param name="sender">The calling object</param>
            <param name="args">Result params</param>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.NetDiscoveryUtility.ResolveCompletedEventHandler">
            <summary>
            Delegate for name resolves results
            </summary>
            <param name="sender">The calling object</param>
            <param name="args">Result params</param>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.PathpingCompletedEventArgs">
            <summary>
            Represents simple class to notify about pathping results
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.PathpingCompletedEventArgs.#ctor(System.Net.NetworkInformation.PingReply[],System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="prReplies">A array of replies</param>
            <param name="ipaTarget">The target</param>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.PathpingCompletedEventArgs.Replies">
            <summary>
            The replies
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.PathpingCompletedEventArgs.Target">
            <summary>
            The target
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.InterfaceConfiguration">
            <summary>
            This class is capable of fetching and caching the interface configuration of IPInterfaces from the operating system
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.LoadCache">
            <summary>
            Loads the interface configuration into a cache for quick access
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetAdapterTypeForInterface(System.String)">
            <summary>
            Gets the adapter type for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>The adapter type</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetIndexForName(System.String)">
            <summary>
            Gets the interface index for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>The interface index</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetMacAddressForInterface(System.String)">
            <summary>
            Gets the MACAddress for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>The MACAddress</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetIsIPEnabled(System.String)">
            <summary>
            Gets a bool indicating whether IP is enabled for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>A bool indicating whether IP is enabled</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetEasyName(System.String)">
            <summary>
            Gets the easy name for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>The easy name</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.IsLocalAddress(System.Net.IPAddress)">
            <summary>
            Returns a bool inidcating whether the given IP address is an address allocated by the operating system.
            </summary>
            <param name="ipa">The IP address to check for</param>
            <returns>A bool inidcating whether the given IP address is an address allocated by the operating system.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetFriendlyName(System.String)">
            <summary>
            Gets the description for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>The description</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetIPStandardGatewaysForInterface(System.String)">
            <summary>
            Gets the standard gateways for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>The standard gateways</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetIPAddressesForInterface(System.String)">
            <summary>
            Gets the IPAddresses for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>The IPAddresses</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetIPSubnetsForInterface(System.String)">
            <summary>
            Gets the subnetmasks for a specific interface
            </summary>
            <param name="strName">The interface name</param>
            <returns>The subnetmasks</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.InterfaceConfiguration.GetAllInterfaceNames">
            <summary>
            Gets all known interface names
            </summary>
            <returns>All known interface names</returns>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.InterfaceConfiguration.LocalAddresses">
            <summary>
            Returns the local addresses allocated by the operating system.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPTLVItem">
            <summary>
            This class represents a DHCP TLV item which is used to carry various parameters and options in DHCP frames
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TLVItem">
            <summary>
            This class represents a simple Type-Lentgh-Value item which can be used by various protocols
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TLVItem.#ctor">
            <summary>
            Creates a new, empty instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TLVItem.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing <paramref name="bByte"/>
            </summary>
            <param name="bByte">The byte array to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.TLVItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing <paramref name="bByte"/> starting at <paramref name="iStartIndex"/>
            </summary>
            <param name="bByte">The byte array to parse</param>
            <param name="iStartIndex">The index at which parsing should start</param>
        </member>
        <member name="M:eExNetworkLibrary.TLVItem.Clone">
            <summary>
            Clones this frame.
            </summary>
            <returns>An identic clone of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.TLVItem.Type">
            <summary>
            Gets or sets the TLV type of this TLV item
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TLVItem.Data">
            <summary>
            Gets or sets the TLV data
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TLVItem.FrameType">
            <summary>
            Gets the type of this frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TLVItem.FrameBytes">
            <summary>
            Gets this frames converted to bytes.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TLVItem.Length">
            <summary>
            Gets the length of the bytes of this frame.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPTLVItem.#ctor">
            <summary>
            Creates a new instance of this class initialized with DHCPOptions.AddressRequest
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPTLVItem.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPTLVItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data starting at the given index
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The index at which parsing should begin</param>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPTLVItem.DHCPOptionType">
            <summary>
            Gets or sets the DHCP option type
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPOptions">
            <summary>
            An enumeration for various DHCP options. 
            See http://www.iana.org/assignments/bootp-dhcp-parameters/ 
            and http://www.faqs.org/rfcs/rfc2132.html 
            for more information.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Padding">
            <summary>
            Padding (Does nothing)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.SubnetMask">
            <summary>
            Subent mask value
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.TimeOffset">
            <summary>
            Time Offset in Seconds from UTC
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Router">
            <summary>
            Router address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.TimeServer">
            <summary>
            Time server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NameServer">
            <summary>
            Name server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DomainNameServer">
            <summary>
            DNS server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.LogServer">
            <summary>
            Log server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.QuotesServer">
            <summary>
            Quotes server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.LPRServer">
            <summary>
            LPR server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ImpressServer">
            <summary>
            Impress server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RLPServer">
            <summary>
            RLP server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Hostname">
            <summary>
            Hostname as ASCII string
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.BootFileSize">
            <summary>
            Size of boot file in 512 byte chunks
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.MeritDumpFile">
            <summary>
            Client to dump and name of the file to dump the merit dump file to
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DomainName">
            <summary>
            The DNS domain name of the client  
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.SwapServer">
            <summary>
            Swap Server address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RootPath">
            <summary>
            Path name for root disk 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ExtentionFile">
            <summary>
            Path name for more BOOTP info
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ForwardOnOff">
            <summary>
             Enable/Disable IP Forwarding 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.SourceRouteOnOff">
            <summary>
            Enable/Disable Source Routing 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PolicyFilter">
            <summary>
            Routing Policy Filters
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.MaxDatagramReassemblySize">
            <summary>
            Max Datagram Reassembly Size
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DefaultIPTTL">
            <summary>
            Default IP Time to Live
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.MTUTimeout">
            <summary>
            Path MTU Aging Timeout
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.MTUPlateau">
            <summary>
            Path MTU Plateau Table
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.MTUInterface">
            <summary>
            Interface MTU Size
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.MTUSubnet">
            <summary>
            All Subnets are Local Option
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.BroadcastAddress">
            <summary>
            Broadcast Address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.MaskDiscovery">
            <summary>
            Perform Mask Discovery
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.MaskSupplier">
            <summary>
            Mask Supplier
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RouterDiscovery">
            <summary>
            Perform Router Discovery 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RouterRequest">
            <summary>
            Router Solicitation Address 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.StaticRoute">
            <summary>
            Static Routing Table
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Trailers">
            <summary>
            Trailer Encapsulation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ARPTimeout">
            <summary>
            ARP Cache Timeout
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Ethernet">
            <summary>
            Ethernet Encapsulation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DefaultTCPTTL">
            <summary>
            Default TCP Time to Live
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.KeepaliveTime">
            <summary>
            TCP Keepalive Interval 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.KeepaliveData">
            <summary>
            TCP Keepalive Garbage
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NISDomain">
            <summary>
            NIS Domain Name 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NISServers">
            <summary>
            NIS Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NTPServers">
            <summary>
            NIS Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.VendorSpecific">
            <summary>
            Vendor Specific Information
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NETBIOSNameServer">
            <summary>
            NETBIOS Name Servers
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NETBIOSDistServer">
            <summary>
            NETBIOS Datagram Distribution
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NETBIOSNodeType">
            <summary>
            NETBIOS Node Type
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NETBIOSScope">
            <summary>
            NETBIOS Scope
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.XWindowFontserver">
            <summary>
            X Window Font Server
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.XWindowManager">
            <summary>
            X Window Display Manager
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.AddressRequest">
            <summary>
            Requested IP Address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.LeaseTime">
            <summary>
            IP Address Lease Time
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Overload">
            <summary>
            Overload "sname" or "file"
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DHCPMessageType">
            <summary>
            DHCP Message Type
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DHCPServerID">
            <summary>
            DHCP Server Identification 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ParameterList">
            <summary>
            Parameter Request List 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DHCPMessage">
            <summary>
            DHCP Error Message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DHCPMaxMsgSize">
            <summary>
            DHCP Maximum Message Size
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RenewalTime">
            <summary>
            DHCP Renewal (T1) Time
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RebindingTime">
            <summary>
            DHCP Rebinding (T2) Time
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ClassID">
            <summary>
            Class Identifier
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ClientID">
            <summary>
            Client Identifier 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NetWareIPDomain">
            <summary>
            NetWare/IP Domain Name
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NetWareIPOption">
            <summary>
            NetWare/IP sub Options
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NISDOmainName">
            <summary>
            NIS+ v3 Client Domain Name 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NISServerAddress">
            <summary>
            NIS+ v3 Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ServerName">
            <summary>
            TFTP Server Name 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.BootfileName">
            <summary>
            Boot File Name  
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.HomeAgendAddress">
            <summary>
            Home Agent Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.SMTPServer">
            <summary>
            Simple Mail Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.POP3Server">
            <summary>
            Post Office Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NNTPServer">
            <summary>
            Network News Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.WWWServer">
            <summary>
            WWW Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.FingerServer">
            <summary>
            Finger Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.IRCServer">
            <summary>
            Chat Server Addresses 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.StreetTalkServer">
            <summary>
            StreetTalk Server Addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.STDAServer">
            <summary>
            StreetTalk Directory Assistance (STDA) Server 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.UserClass">
            <summary>
            User Class Information
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DirectoryAgent">
            <summary>
            Directory Agent Information
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ServiceScope">
            <summary>
            Service Location Agent Scope
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RapidCommit">
            <summary>
            Rapid Commit
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ClientFQDN">
            <summary>
            Fully Qualified Domain Name
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RelayAgendInformation">
            <summary>
            Relay Agent Information
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.iSNS">
            <summary>
            Internet Storage Name Service
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NDSServers">
            <summary>
            Novell Directory Services 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NDSTreeName">
            <summary>
            Novell Directory Services 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NDSContext">
            <summary>
            Novell Directory Services 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.BCMCSControllerDomainNameList">
            <summary>
            BCMCS Controller Domain Name list
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.BCMCSControllerIPv4AddressOption">
            <summary>
            BCMCS Controller IPv4 address option
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Authentication">
            <summary>
            Authentication
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ClientLastTransactionTimeOption">
            <summary>
            Client Last Transaction Time
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.AssociatedIPOption">
            <summary>
            Accosiated IP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.CientSystem">
            <summary>
            Client System Architecture
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ClientNDI">
            <summary>
            Client Network Device Interface
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.LDAP">
            <summary>
            Lightweight Directory Access Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.UUID_GUID">
            <summary>
            UUID/GUID-based Client Identifier
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.UserAuth">
            <summary>
            Open Group's User Authentication
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.GEOCONF_CIVIC">
            <summary>
            GEOCONF CIVIC
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PCode">
            <summary>
            IEEE 1003.1 TZ String
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.TCode">
            <summary>
            Reference to the TZ Database
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NetInfoAddress">
            <summary>
            NetInfo Parent Server Address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NetInfoTag">
            <summary>
            NetInfo Parent Server Tag
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.URL">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.AutoConfig">
            <summary>
            DHCP Auto-Configuration
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.NameServiceSearch">
            <summary>
            Name Service Search 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.SubnetSelectionOption">
            <summary>
            Subnet Selection Option
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.DomainSearch">
            <summary>
            DNS domain search list
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.SIPServersDHCPOption">
            <summary>
            SIP Servers DHCP Option 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ClasslessStaticRouteOption">
            <summary>
            Classless Static Route Option
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.CCC">
            <summary>
            CableLabs Client Configuration 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.GeoConfOption">
            <summary>
            GeoConf 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.V_I_VendorClass">
            <summary>
            Vendor-Identifying Vendor Class 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.V_I_VendorSpecificInformation">
            <summary>
            Vendor-Identifying Vendor-Specific Information
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXE_EtherbootSignature_or_TFTPServerIP">
            <summary>
            PXE - undefined (vendor specific) or 
            Etherboot signature (E4:45:74:68:00:00) or 
            DOCSIS "full security" server IP address or
            TFTP Server IP address (for IP Phone software load)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXE_KernelOptoins_or_CallServerIP">
            <summary>
            PXE - undefined (vendor specific) or
            Kernel options. Variable length string or
            Call Server IP address 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXE_EthernetInterface_or_DiscriminationString">
            <summary>
            PXE - undefined (vendor specific) or
            Ethernet interface. Variable length string. or
            Discrimination string (to identify vendor)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXE_RemoteStatistics">
            <summary>
            PXE - undefined (vendor specific) or
            Remote statistics server IP address
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXE_802dot1Q_VlanID">
            <summary>
            PXE - undefined (vendor specific) or
            IEEE 802.1Q VLAN ID 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXE_802dot1DP_Layer2Priority">
            <summary>
            PXE - undefined (vendor specific) or
            IEEE 802.1D/p Layer 2 Priority
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXE_DiffservCodePoint">
            <summary>
            PXE - undefined (vendor specific) or
            Diffserv Code Point (DSCP) for VoIP signalling and media streams
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXE_HTTPProxy_for_phone">
            <summary>
            PXE - undefined (vendor specific) or
            HTTP Proxy for phone-specific applications
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PANA_AGENT">
            <summary>
            PANA Agent
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.V4_LOST">
            <summary>
            V4 Lost
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.CAPWAP_AC_V4">
            <summary>
            CAPWAP Access Controller addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.IPv4_Address_MoS">
            <summary>
            A series of suboptions 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.IPv4_FQDN_MoS">
            <summary>
            A series of suboptions 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.TFPTServer_or_Etherboot_or_GrubConfigPath">
            <summary>
            TFTP server address or
            Etherboot or
            GRUB configuration path name
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Etherboot">
            <summary>
            Etherboot 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.IPTelephone">
            <summary>
            IP Telephone
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.Etherboot_or_PacketCable">
            <summary>
            Etherboot or PacketCable and CableHome 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PXELinuxMagic">
            <summary>
            Magic String (F1:00:74:7E)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.ConfigurationFile">
            <summary>
            Configuration file 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.PathPrefix">
            <summary>
            Path Prefix Option 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.RebootTime">
            <summary>
            Reboot Time
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.SubnetAllocationOption">
            <summary>
            Subnet Allocation Option
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.VirtualSubnetSelectionOption">
            <summary>
            Virtual Subnet Selection Option 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPOptions.End">
            <summary>
            End of List
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPMessageType">
            <summary>
            Defines constants for the DHCP message type (Option field value 53)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.Discover">
            <summary>
            A DHCP discover
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.Offer">
            <summary>
            A DHCP offer
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.Request">
            <summary>
            A DHCP request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.Decline">
            <summary>
            A DHCP decline
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.ACK">
            <summary>
            A DHCP acknowledgement
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.NAK">
            <summary>
            A DHCP not acknowledged message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.Release">
            <summary>
            A DHCP release
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.Inform">
            <summary>
            A DHCP inform
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.ForceRenew">
            <summary>
            A DHCP force renew
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.LeaseQuery">
            <summary>
            A DHCP lease query
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.LeaseUnassingned">
            <summary>
            A DHCP lease unassigned message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.LeaseUnknown">
            <summary>
            A DHCP lease unknown message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPMessageType.LeaseActieve">
            <summary>
            A DHCP lease active message
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPPool">
            <summary>
            This class represents a pool filled with DHCP leases
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPool.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPool.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,eExNetworkLibrary.Subnetmask)">
            <summary>
            Creates a DHCP pool and fills it according to the given params
            </summary>
            <param name="ipaPoolStart">The start IP address of the pool</param>
            <param name="ipaPoolEnd">The end IP address of the pool</param>
            <param name="ipaStandardgateway">The standardgateway's IP address</param>
            <param name="ipaDNSServer">The DNS server's IP address</param>
            <param name="smMask">The subnetmask</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPool.AddDHCPPoolItem(eExNetworkLibrary.DHCP.DHCPPoolItem)">
            <summary>
            Adds a DHCP pool item to this DHCP pool
            </summary>
            <param name="dhcpItem">The item to add</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPool.GetItemForAddress(System.Net.IPAddress)">
            <summary>
            Returns the DHCP pool item associated with the given address 
            </summary>
            <param name="ipa">The IP address to get the pool item for</param>
            <returns>The DHCP pool item associated with the given address </returns>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPool.GetNextFreeAddress">
            <summary>
            Returns the next non-leased pool item from this DHCP pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPool.RemoveFromPool(eExNetworkLibrary.DHCP.DHCPPoolItem)">
            <summary>
            Removes a given item from this pool
            </summary>
            <param name="dhcpPoolItem">The item to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPool.PoolContains(eExNetworkLibrary.DHCP.DHCPPoolItem)">
            <summary>
            Returns a bool indicating whether a specific item is contained in this pool
            </summary>
            <param name="dhcpPoolItem">The DHCP pool item to search for</param>
            <returns>A bool indicating whether a specific item is contained in this pool</returns>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPool.Pool">
            <summary>
            Returns all items in this pool
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPPoolItem">
            <summary>
            This class represents an item contained in a DHCP pool which holds a IP address, 
            settings like gateway and DNS server and if available facts like the mac address 
            and hostname of the host which got this address leased from a DHCP server.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPoolItem.#ctor(System.Net.IPAddress,eExNetworkLibrary.Subnetmask,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class with the given params
            </summary>
            <param name="ipaAddress">The IP address</param>
            <param name="smMask">The subnetmask</param>
            <param name="ipaGateway">The gateway address</param>
            <param name="ipaDNSServer">The DNS server address</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPPoolItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.LeasedTo">
            <summary>
            The MAC address to which this item was leased
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.Netmask">
            <summary>
            The subnetmask of this item
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.DNSServer">
            <summary>
            The DNS server address to lease
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.Gateway">
            <summary>
            The gateway address to lease
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.Address">
            <summary>
            The IP address to lease
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.LeasedToHostname">
            <summary>
            The hostname to which this item was leased
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.LeaseDuration">
            <summary>
            The lease duration of this item
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.DHCPServer">
            <summary>
            The DHCP server which leases this item
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPPoolItem.DHCPServerMAC">
            <summary>
            The MAC address of the DHCP server
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.NetworkStream">
            <summary>
            This class represents the base for a network stream which is capable of saving 
            push flags for bytes which are written. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes the given bytes to the network stream.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset in buffer where writing starts.</param>
            <param name="count">The count of bytes to write.</param>
            <param name="bPush">A bool indicating whether a push flag should be set for the bites written.</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.NetworkStream.IsPush">
            <summary>
            A bool indicating whether the last bytes which were read last were written with a push flag set.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.CodeLab.IDynamicHandler">
            <summary>
            This interface provides an interface for dynamic handlers which are used by the dynamic function compiler
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.IDynamicHandler.ModifyTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Modifies or analyzes the given frame
            </summary>
            <param name="fInputFrame">The frame to analyze or modify</param>
            <returns>The modified frame, or null if the frame should be dropped</returns>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.IDynamicHandler.Cleanup">
            <summary>
            Starts the cleanup process
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.IDynamicHandler.Stop">
            <summary>
            Stops this dynamic handler 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.IDynamicHandler.Start">
            <summary>
            Starts this dynamic handler
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPv4Frame">
            <summary>
            This class represents an IPv4 frame.
            <remarks>This class was one of the first written classes in this library, probably an historic one.</remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Frame.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data.
            </summary>
            <param name="bRaw">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Frame.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Frame.GetPseudoHeader">
            <summary>
            Returns the pseudo header for this frame.
            This header can be used to calculate TCP and UDP checksums.
            </summary>
            <returns>The IP pseudo header of this instance.</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Frame.ToString">
            <summary>
            Returns the string representation of this frame
            </summary>
            <returns>The string representation of this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Frame.Clone">
            <summary>
            Returns an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.FragmentOffset">
            <summary>
            Gets or sets the fragment offset
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.FrameType">
            <summary>
            Returns FrameType.IP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.FrameBytes">
            <summary>
            Gets the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.Options">
            <summary>
            Gets the IPv4 options of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.DestinationAddress">
            <summary>
            Gets the destination IP-address of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.SourceAddress">
            <summary>
            Gets the source IP-address of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.HeaderChecksum">
            <summary>
            Gets the calculated header checksum of this frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.Protocol">
            <summary>
            Gets or sets the protocol of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.PacketFlags">
            <summary>
            Gets or sets the IP packet flags of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.TimeToLive">
            <summary>
            Gets or sets the time to live
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.Identification">
            <summary>
            Gets or sets the identification
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.TotalPacketLength">
            <summary>
            Gets the total packet length in bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.TypeOfService">
            <summary>
            Gets or sets the IP type of service
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.InternetHeaderLength">
            <summary>
            Gets the internet header length in 32 bit words
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.Version">
            <summary>
            Gets or sets the IP version (4 for this frame)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Frame.Length">
            <summary>
            Gets the length of this frame and its encapsulated frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPTypeOfService">
            <summary>
            This class represents the IP type of service fields
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPTypeOfService.#ctor(System.Byte)">
            <summary>
            Creates a new instance of this class from the given data
            </summary>
            <param name="bRaw">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPTypeOfService.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPTypeOfService.ToString">
            <summary>
            Returns a string representation of this class.
            </summary>
            <returns>A string representation of this class</returns>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPTypeOfService.Raw">
            <summary>
            Gets the raw byte representation of this structure
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPTypeOfService.PacketReliablility">
            <summary>
            Gets or sets the IP packet reliability
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPTypeOfService.PacketThroughput">
            <summary>
            Gets or sets the IP packet throughput
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPTypeOfService.PacketDelay">
            <summary>
            Gets or sets the IP packet delay
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPTypeOfService.PacketPrecedence">
            <summary>
            Gets or sets the IP precedence
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPFlags">
            <summary>
            This class represents the IP flags of an IP frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPFlags.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of this class with the given values.
            </summary>
            <param name="DontFragment">The value for the don't fragment bit</param>
            <param name="MoreFragments">The value for the more fragments bit</param>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPFlags.ToString">
            <summary>
            Returns a string representation of this structure
            </summary>
            <returns>A string representation of this structure</returns>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPFlags.MoreFragments">
            <summary>
            Gets or sets a bool indicating whether the more fragments bit is set.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPFlags.DontFragment">
            <summary>
            Gets or sets a bool indicating whether the don't fragment bit is set.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPProtocol">
            <summary>
            An enumeration for IP protocols
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.HOPOPT">
            <summary>
            IPv6 Hop-by-Hop Option
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ICMP">
            <summary>
            Internet Control Message Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IGMP">
            <summary>
            Internet Group Management Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.GGP">
            <summary>
            Gateway-To-Gateway
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IP">
            <summary>
            IP in IP encapsulation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.Stream">
            <summary>
            Stream
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.TCP">
            <summary>
            Transmission control protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.CBT">
            <summary>
            Core based trees
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.EGP">
            <summary>
            Exterior Gateway Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IGP">
            <summary>
            Any Interior Gateway Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.BBN_RCC_MON">
            <summary>
            DDN RCC Monitoring
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.NVP_II">
            <summary>
            Network Voice Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.PUP">
            <summary>
            PARC Universal Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ARGUS">
            <summary>
            ARGUS Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.EMCON">
            <summary>
            Emission Control Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.XNET">
            <summary>
            Cross Net Debugger
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.CHAOS">
            <summary>
            CHAOS Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.UDP">
            <summary>
            User Datagram Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MUX">
            <summary>
            Multiplexing Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.DCN_MEAS">
            <summary>
            DCN Measurement Subsystems Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.HMP">
            <summary>
            Host Monitoring Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.PRM">
            <summary>
            Packet Radio Measurement
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.XNS_IDP">
            <summary>
            Xerox NS IDP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.TRUNK_1">
            <summary>
            Trunk-1 Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.TRUNK_2">
            <summary>
            Trunk-2 Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.LEAF_1">
            <summary>
            Leaf-1 Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.LEAF_2">
            <summary>
            Leaf-2 Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.RDP">
            <summary>
            Reliable Data Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IRTP">
            <summary>
            Internet Reliable Transaction Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ISO_TP4">
            <summary>
            ISO Transport Protocol Class 4
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.NETBLT">
            <summary>
            Bulk Data Transfer Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MFE_NSP">
            <summary>
            MFE Network Services Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MERIT_INP">
            <summary>
            MERIT Internodal Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.DCCP">
            <summary>
            Datagram Congestion Control Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol._3PC">
            <summary>
            Third Party Connect Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IDPR">
            <summary>
            Inter-Domain Policy Routing Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.XTP">
            <summary>
            XTP Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.DDP">
            <summary>
            Datagram Delivery Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IDPR_CMTP">
            <summary>
            IDPR Control Message Transport Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.TP_PLUSPLUS">
            <summary>
            TP++ Transport Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IL">
            <summary>
            IL Transport Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPv6">
            <summary>
            IPv6 in IP encapsulation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SDRP">
            <summary>
            Source Demand Routing Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPv6_Route">
            <summary>
            Routing Header for IPv6
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPv6_Frag">
            <summary>
            Fragment Header for IPv6
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IDRP">
            <summary>
            Inter-Domain Routing Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.RSVP">
            <summary>
            Reservation Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.GRE">
            <summary>
            Generic Routing Encapsulation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MHRP">
            <summary>
            Mobile Host Routing Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.BNA">
            <summary>
            BNA Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ESP">
            <summary>
            Encap Security Payload
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.AH">
            <summary>
            Authentication Header
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.I_NLSP">
            <summary>
            Integrated Net Layer Security TUBA
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SWIPE">
            <summary>
            IP with Encryption
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.NARP">
            <summary>
            NBMA Address Resolution Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MOBILE">
            <summary>
            IP Mobility
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.TLSP">
            <summary>
            Transport Layer Security Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SKIP">
            <summary>
            SKIP Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPv6_ICMP">
            <summary>
            ICMP for IPv6
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPv6_NoNxt">
            <summary>
            No next header for IPv6
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPv6_Opts">
            <summary>
            Destination Options for IPv6
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.AnyHostInternalProtocol">
            <summary>
            Every host internal protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.CFTP">
            <summary>
            CFTP Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.AnyLocalNetwork">
            <summary>
            Any local network
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SAT_EXPAK">
            <summary>
            SATNET and Backroom EXPAK
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.KRYPTOPLAN">
            <summary>
            KRYPTOLAN Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.RVD">
            <summary>
            MIT Remote Virtual Disk Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPPC">
            <summary>
            Internet Pluribus Packet Core
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.AnyDistributedFileSystem">
            <summary>
            Any distributed file system
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SAT_MON">
            <summary>
            SATNET Monitoring
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.VISA">
            <summary>
            VISA Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPCV">
            <summary>
            Internet Packet Core Utility
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.CPNX">
            <summary>
            Computer Protocol Network Executive
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.CPHB">
            <summary>
            Computer Protocol Heart Beat
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.WSN">
            <summary>
            Wang Span Network
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.PVP">
            <summary>
            Packet Video Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.BR_SAT_MON">
            <summary>
            Backroom SATNET Monitoring
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SUN_ND">
            <summary>
            SUN ND PROTOCOL-Temporary
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.WB_MON">
            <summary>
            WIDEBAND Monitoring
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.WB_EXPAK">
            <summary>
            WIDEBAND EXPAK
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ISO_IP">
            <summary>
            ISO Internet Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.VMTP">
            <summary>
            Versatile Message Transaction Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SECURE_VMTP">
            <summary>
            Secure Versatile Message Transaction Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.VINES">
            <summary>
            VINES Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.TTP">
            <summary>
            Time Triggered Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.NSFNET_IGP">
            <summary>
            NSFNET Interior Gateway Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.DGP">
            <summary>
            Dissimilar Gateway Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.TCF">
            <summary>
            TCF Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.EIGRP">
            <summary>
            Enhanced Interior Gateway Routing Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.OSPF">
            <summary>
            Open shortest path first
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.Sprite_RPC">
            <summary>
            Sprite RPC Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.LARP">
            <summary>
            Locus Address Resolution Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MTP">
            <summary>
            Multicast Transport Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.AX_25">
            <summary>
            AX.25 Frames
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPIP">
            <summary>
            IP-within-IP Encapsulation Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MICP">
            <summary>
            Mobile Internetworking Control Pro
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SSC_SP">
            <summary>
            Semaphore Communications Secure Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ETHERIP">
            <summary>
            Ethernet-within-IP Encapsulation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ENCAP">
            <summary>
            Encapsulation Header
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.AnyPrivateEncryptionScheme">
            <summary>
            Any private encryption scheme
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.GMTP">
            <summary>
            GMTP Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IFMP">
            <summary>
            Ipsilon Flow Management Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.PNNI">
            <summary>
            PPNI over IP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.PIM">
            <summary>
            Protocol Independent Multicast
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ARIS">
            <summary>
            ARIS Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SCPS">
            <summary>
            SCPS Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.QNX">
            <summary>
            QNX Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ActiveNetworks">
            <summary>
            Active Networks
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPComp">
            <summary>
            IP Payload Compression Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SNP">
            <summary>
            Sitara Networks Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.Compaq_Peer">
            <summary>
            Compaq Peer Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPX_in_IP">
            <summary>
            IPX in IP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.VRRP">
            <summary>
            Virtual Router Redundancy Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.PGM">
            <summary>
            PGM Reliable Transport Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.AnyZeroHopProtocol">
            <summary>
            any 0-hop protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.L2TP">
            <summary>
            Layer Two Tunneling Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.DDX">
            <summary>
            D-II Data Exchange (DDX
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IATP">
            <summary>
            Interactive Agent Transfer Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.STP">
            <summary>
            Schedule Transfer Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SRP">
            <summary>
            SpectraLink Radio Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.UTI">
            <summary>
            UTI Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SMP">
            <summary>
            Simple Message Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SM">
            <summary>
            SM Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.PTP">
            <summary>
            Performance Transparency Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.ISIS_over_IPv4">
            <summary>
            ISIS over IPv4
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.FIRE">
            <summary>
            FIRE Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.CRTP">
            <summary>
            Combat Radio Transport Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.CRUDP">
            <summary>
            Combat Radio User Datagram
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SSCOPMCE">
            <summary>
            SSCOPMCE Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.IPLT">
            <summary>
            IPLT Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SPS">
            <summary>
            Secure Packet Shield
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.PIPE">
            <summary>
            Private IP Encapsulation within IP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.SCTP">
            <summary>
            Stream Control Transmission Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.FC">
            <summary>
            Fibre Channel
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.RSVP_E2E_IGNORE">
            <summary>
            RSVP-E2E-IGNORE Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MobilityHeader">
            <summary>
            Mobility Header
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.UDPLite">
            <summary>
            UDP Lite
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.MPLS_in_IP">
            <summary>
            MPLS in IP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.manet">
            <summary>
            MANET Protocols
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.HIP">
            <summary>
            Host Identity Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.Shim6">
            <summary>
            Shim6 Protocol
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.Reserved">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPProtocol.Other">
            <summary>
            Unknown protocol
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPPrecedence">
            <summary>
            Enumeration for varios values of IP precedence
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPPrecedence.Routine">
            <summary>
            Routine priority
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPPrecedence.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPPrecedence.Immediate">
            <summary>
            IMmediate
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPPrecedence.Flash">
            <summary>
            Flash
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPPrecedence.FlashOverride">
            <summary>
            Flash override
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPPrecedence.CRITIC_ECP">
            <summary>
            Critic ECP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPPrecedence.InternetworkControl">
            <summary>
            Internetwork Control
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPPrecedence.NetworkControl">
            <summary>
            Network Control
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPDelay">
            <summary>
            Enumeration for the IP delay
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPDelay.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPDelay.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPThroughput">
            <summary>
            Enumeration for the IP throughput
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPThroughput.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPThroughput.High">
            <summary>
            High
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPReliability">
            <summary>
            Enumeration for the IP reliability
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPReliability.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPReliability.High">
            <summary>
            High
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficDescriptionFrame">
            <summary>
            This class represents a frame which carries several information about a captured frame, like capture time and the source interface.
            <remarks>
            Every frame should contain a traffic description frame. 
            The IP interface classes are responsible for creating and adding an instance of this class to each frame.
            This frames contents are ignored when converting a frame to bytes.
            </remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficDescriptionFrame.#ctor(eExNetworkLibrary.IPInterface,System.DateTime)">
            <summary>
            Ceates a new instance of this frame
            </summary>
            <param name="iSourceInterface">The interface which captured this frame</param>
            <param name="dtCaptureTime">The capture time of this frame</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficDescriptionFrame.Clone">
            <summary>
            Clones this frame.
            </summary>
            <returns>An identic clone of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.TrafficDescriptionFrame.SourceInterface">
            <summary>
            Gets the interface wich captured this frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficDescriptionFrame.CaptureTime">
            <summary>
            Gets the time when this frame was captured
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficDescriptionFrame.FrameType">
            <summary>
            Gets the type of this frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficDescriptionFrame.FrameBytes">
            <summary>
            Gets this frames converted to bytes.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficDescriptionFrame.Length">
            <summary>
            Gets the length of the bytes of this frame.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage">
            <summary>
            Represents an OSPF database description message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.ClearItems">
            <summary>
            Removes all LSA headers from this acknowledgement message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.AddItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Adds an LSA header to this frame
            </summary>
            <param name="lsa">The LSA header to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.GetItems">
            <summary>
            Gets all LSA headers contained in this frame
            </summary>
            <returns>All LSA headers contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.ContainsItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Returns a bool indicating whether a specific LSA header is contained in this frame
            </summary>
            <param name="lsa">The LSA header to search for</param>
            <returns>A bool indicating whether a specific LSA header is contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.RemoveItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Removes a specific LSA header
            </summary>
            <param name="lsa">The LSA header to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.Clone">
            <summary>
            Returns an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.Options">
            <summary>
            Gets or sets the OSPF options field
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.SequenceNumber">
            <summary>
            Gets or sets the sequence number
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.InterfaceMTU">
            <summary>
            Gets or sets the interface MTU
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.IsInit">
            <summary>
            Gets or sets a bool indicating whether the init-bit is set
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.IsOOBResync">
            <summary>
            Gets or sets a bool indicating whether the OOB-resync-bit is set
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.IsMore">
            <summary>
            Gets or sets a bool indicating whether the more-bit is set
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.IsMaster">
            <summary>
            Gets or sets a bool indicating whether the master-bit is set
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.FrameType">
            <summary>
            Returns FrameType.OSPFDatabaseDescription
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFDatabaseDescriptionMessage.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.TrafficSplitterActions">
            <summary>
            Action to do on a match (drop, send to a, send to b)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.TrafficSplitterActions.SendToA">
            <summary>
            Sends the frame to output handler A
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.TrafficSplitterActions.SendToB">
            <summary>
            Sends the frame to output handler B
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TrafficSplitting.TrafficSplitterActions.Drop">
            <summary>
            Drops the frame
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.BindingInformation">
            <summary>
            This class represents binding information of a socket
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.BindingInformation.#ctor(eExNetworkLibrary.Sockets.EndPoint,eExNetworkLibrary.Sockets.EndPoint)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="localBinding">The local binding information</param>
            <param name="remoteBinding">The remote binding Information</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.BindingInformation.ToString">
            <summary>
            Gets the description of this endpoint
            </summary>
            <returns>The description of this endpoint</returns>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.BindingInformation.LocalBinding">
            <summary>
            The local endpoint of the socket.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.BindingInformation.RemoteBinding">
            <summary>
            The remote endpoint of the socket.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.EndPoint">
            <summary>
            This class represents an EndPoint of a socket conversation
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.EndPoint.#ctor(System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="strDescription">The description of this EndPoint</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.EndPoint.ToString">
            <summary>
            Gets the description of this EndPoint
            </summary>
            <returns>The description of this EndPoint</returns>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.EndPoint.Description">
            <summary>
            Gets the description of this EndPoint
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPv4Options">
            <summary>
            This class represents the IPv4 options field
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Options.AddOption(eExNetworkLibrary.IP.IPOption)">
            <summary>
            Adds an option to this structure
            </summary>
            <param name="oOption">The option to add</param>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Options.RemoveOption(eExNetworkLibrary.IP.IPOption)">
            <summary>
            Removes an option from this structure
            </summary>
            <param name="oOption">The option to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Options.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bOptionBytes">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Options.#ctor">
            <summary>
            Creates a new, empty instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4Options.ToString">
            <summary>
            Returns a string representation of this class.
            </summary>
            <returns>A string representation of this class.</returns>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Options.Options">
            <summary>
            Returns all contained options
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Options.OptionLength">
            <summary>
            Returns the length of this structure in bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPv4Options.Raw">
            <summary>
            Returns the raw byte representation of this tructure
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPOption">
            <summary>
            This class represents a single IP Option
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPOption.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bOptionBytes">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPOption.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPOption.ToString">
            <summary>
            Returns a string representation of this class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPOption.OptionData">
            <summary>
            Gets or sets the option data
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPOption.OptionLength">
            <summary>
            Gets the option length
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPOption.OptionNumber">
            <summary>
            Gets or sets the option number
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPOption.OptionClass">
            <summary>
            Gets or sets the option class
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPOption.CopyFlagSet">
            <summary>
            Gets or sets a bool indicating whether the copy flag is set
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.IP.IPOption.Raw">
            <summary>
            Gets the raw byte representation of this structure
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPOptionClass">
            <summary>
            An enumeration for IP option classes
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionClass.Control">
            <summary>
            Control class
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionClass.DebuggingAndMeasurement">
            <summary>
            Debugging and measurement class
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPOptionNumber">
            <summary>
            An enumeration for IP option numbers
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionNumber.EndOfList">
            <summary>
            Marks the end of an options list
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionNumber.NoOperation">
            <summary>
            No operation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionNumber.Security">
            <summary>
            Security
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionNumber.LooseSecurityRouting">
            <summary>
            Loose security routing
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionNumber.StrictSourceRouting">
            <summary>
            Strict source routing
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionNumber.RecordRoute">
            <summary>
            Record route
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionNumber.StreamID">
            <summary>
            Stream ID
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPOptionNumber.InternetTimestamp">
            <summary>
            Internet timestamp
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPv4AddressAnalysis">
            <summary>
            This class provides diffrent methods for IPv4 address analysis and the calculating of network and broadcast addresses
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetIpCount(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Returns the count of all IPv4 addresses in the given address range.
            </summary>
            <param name="ipaStart">The start IPv4 address of the range</param>
            <param name="ipaEnd">The end IPv4 address of the range</param>
            <returns>The count of all IPv4 addresses between the given addresses</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.CheckForV4(System.Net.IPAddress)">
            <summary>
            Checks whether the given address is an IPv4Address and throws an exception if not.
            </summary>
            <param name="ipaAddress">The address to check</param>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetIPRange(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Returns all IPv4 addresses in the given address range, including the start and end IPv4 address.
            </summary>
            <param name="ipaStart">The start IPv4 address of the range</param>
            <param name="ipaEnd">The end IPv4 address of the range</param>
            <returns>All IPv4 addresses in the given address range</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetClassfullBroadcastAddress(System.Net.IPAddress)">
            <summary>
            Returns the classfull broadcast IPv4 address for the given IPv4 network
            </summary>
            <param name="ipa">The IPv4 network to get the broadcast address for</param>
            <returns>The classfull broadcast IPv4 address for the given IPv4 network</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetClasslessNetworkAddress(System.Net.IPAddress,eExNetworkLibrary.Subnetmask)">
            <summary>
            Returns the classless network IPv4 address for the given IPv4 network and the given IPv4 subnetmask
            </summary>
            <param name="ipa">The IPv4 network the get the network address for</param>
            <param name="sMask">The IPv4 subnet mask to get the network address for</param>
            <returns>The classless network IPv4 address for the given IPv4 network and the given IPv4 subnetmask</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetClasslessBroadcastAddress(System.Net.IPAddress,eExNetworkLibrary.Subnetmask)">
            <summary>
            Returns the classless broadcast IPv4 address for the given IPv4 network and the given IPv4 subnetmask
            </summary>
            <param name="ipa">The IPv4 network the get the broadcast address for</param>
            <param name="sMask">The IPv4 subnet mask to get the broadcast address for</param>
            <returns>The classless broadcast IPv4 address for the given IPv4 network and the given IPv4 subnetmask</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetClassfullNetworkAddress(System.Net.IPAddress)">
            <summary>
            Returns the classfull network IPv4 address for the given IPv4 network
            </summary>
            <param name="ipa">The IPv4 network to get the network address for</param>
            <returns>The classfull network IPv4 address for the given IPv4 network</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetClass(System.Net.IPAddress)">
            <summary>
            Returns the class of the given IPv4 address
            </summary>
            <param name="ipaIn">The IPv4 address to determine the class for</param>
            <returns>The class of the given IPv4 address</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetClassfullSubnetMask(System.Net.IPAddress)">
            <summary>
            Returns the classfull subnet mask of a given IPv4 network
            </summary>
            <param name="ipa">The network to get the classfull subnetmask for</param>
            <returns>The classfull subnet mask of a given IPv4 network</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.GetPrivacyLevel(System.Net.IPAddress)">
            <summary>
            Gets the privacy level of an IPv4 address
            </summary>
            <param name="ipaIn">The IPv4 address to get the privacy level for</param>
            <returns>THe privacy level of the given IPv4 address</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.Increase(System.Net.IPAddress)">
            <summary>
            Increases the given IPv4Address by one.
            </summary>
            <param name="ipaAddress">The IPv4Address to increase</param>
            <returns>The increased IPv4Address</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.Decrease(System.Net.IPAddress)">
            <summary>
            Decreases the given IPv4Address by one.
            </summary>
            <param name="ipaAddress">The IPv4Address to increase</param>
            <returns>The decreased IPv4Address</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.Increase(System.Byte[])">
            <summary>
            Increases the given IPv4Address by one.
            </summary>
            <param name="bAddress">The IPv4Address to increase as an array of unsigned bytes</param>
            <returns>The increased IPv4Address as an array of unsigned bytes</returns>
        </member>
        <member name="M:eExNetworkLibrary.IP.IPv4AddressAnalysis.Decrease(System.Byte[])">
            <summary>
            Decreases the given IPv4Address by one.
            </summary>
            <param name="bAddress">The IPv4Address to increase as an array of unsigned bytes</param>
            <returns>The decreased IPv4Address as an array of unsigned bytes</returns>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPv4AddressClass">
            <summary>
            An enumeration for IPv4 classes
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPv4AddressClass.A">
            <summary>
            IP class A - Initial byte: 0 - 127 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPv4AddressClass.B">
            <summary>
            IP class B - Initial byte: 128 - 191 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPv4AddressClass.C">
            <summary>
            IP class C - Initial byte: 192 - 223 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPv4AddressClass.D">
            <summary>
            IP class D - Initial byte: 224 - 247
            This class contains only multicast addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPv4AddressClass.E">
            <summary>
            IP class E - Initial byte: 248 - 255 
            Reserved for experimental use
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPv4AddressClass.Unknown">
            <summary>
            Unkown class
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.IP.IPv4AddressPrivacyLevel">
            <summary>
            An enumeration for IPv4 privacy levels
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPv4AddressPrivacyLevel.Public">
            <summary>
            Public addresses
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.IP.IPv4AddressPrivacyLevel.Private">
            <summary>
            Private addresses. These addresses are not routed on the internet backbone. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Ethernet.EthernetFrame">
            <summary>
            This class represents a simple ethernet frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Ethernet.EthernetFrame.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Ethernet.EthernetFrame.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Ethernet.EthernetFrame.Clone">
            <summary>
            Creates a new, identical instance of this frame
            </summary>
            <returns>A new, identical instance of this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Ethernet.EthernetFrame.ToString">
            <summary>
            Returns the string representation of this frame
            </summary>
            <returns>The string representation of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.Source">
            <summary>
            Gets or sets the source MAC address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.Destination">
            <summary>
            Gets or sets the destination MAC address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.VlanTagExists">
            <summary>
            Gets or sets a bool indicating whether a VLAN tag exists
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.VlanID">
            <summary>
            Gets or sets the VLAN ID. This will be ignored if the property VlanTagExists is set to false.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.VlanPriotity">
            <summary>
            Gets or sets the VLAN priority. This will be ignored if the property VlanTagExists is set to false.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.CanocialFormatIndicator">
            <summary>
            Gets or sets a bool indicating whether the cnaocial format indicator has been set
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.EtherType">
            <summary>
            Gets or sets the ethernet type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.FrameType">
            <summary>
            Returns FrameType.Ethernet. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.FrameBytes">
            <summary>
            Returns the byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Ethernet.EthernetFrame.Length">
            <summary>
            Returns the length of this frame and its encapsulated frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.PacketDropper">
            <summary>
            This class is capable of dropping packets according to a given probability. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketDropper.CaseHappening(eExNetworkLibrary.Frame)">
            <summary>
            Drops the frame
            </summary>
            <param name="f">The frame to drop</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketDropper.CaseNotHappening(eExNetworkLibrary.Frame)">
            <summary>
            Forwards the frame
            </summary>
            <param name="f">The frame to forward</param>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RIP.RIPRouter">
            <summary>
            This class represents a RIP version 1 or 2 routing process.
            This Router will announce all direct connected interfaces by default. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RoutingProcess">
            <summary>
            This class buildes the base for routing process implementations like RIP or OSPF.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingProcess.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingProcess.RemoveEntry(eExNetworkLibrary.Routing.RoutingEntry)">
            <summary>
            Removes a routing entry from this instance and the router to manage. 
            </summary>
            <param name="re">The routing entry to remove.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingProcess.InvokeEntryUpdated(eExNetworkLibrary.Routing.RoutingEntry)">
            <summary>
            Invokes the routing entry updated event for a specific routing entry.
            </summary>
            <param name="re">The routing entry which has been updated.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingProcess.AddRoutingEntry(eExNetworkLibrary.Routing.RoutingEntry)">
            <summary>
            Adds a routing entry to this instance and the router to manage. 
            </summary>
            <param name="re">The routing entry to add</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingProcess.RoutingEntries">
            <summary>
            Returns all routing entries owned by this routing process.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingProcess.RouterToManage">
            <summary>
            Gets or sets the router of which the routing tables should be updated. If a router is detached this way, all routes owned by this instance will automatically be removed.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.AddPassiveInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Adds an interface to this RIP routers passive interface list.
            </summary>
            <param name="ipi">The IPInterface to mark as passive</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.RemovePassiveInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Removes an interface from this RIP routers passive interface list. 
            </summary>
            <param name="ipi">The IPInterface to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.ContainsPassiveInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Check whether an interface is contained in this RIP routers passive interface list. 
            </summary>
            <param name="ipi">Thie IPInterface to search for</param>
            <returns>A boolean indicating whether an interface is contained in this RIP routers passive interface list. </returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.GetPassiveInterfaces">
            <summary>
            Returns all passive interfaces of this instance.
            </summary>
            <returns>All passive interfaces of this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.DistributeUpdate">
            <summary>
            Forces this instance to distribute updates immideately.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.DistributeUpdate(eExNetworkLibrary.IPInterface)">
            <summary>
            Forces this instance to distribute traffic immidiately, with exluding the specified interface from forwarding operations.
            </summary>
            <param name="ipiExcludeInterface">The interface to exclude from forwarding operations or null, if no interface should be excluded.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Checks the incoming traffic for RIP updates.
            </summary>
            <param name="fInputFrame">The frame to handle.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.HandleRIPV1(eExNetworkLibrary.UDP.UDPFrame,eExNetworkLibrary.IP.IPv4Frame)">
            <summary>
            Handles RIPv1 updates
            </summary>
            <param name="udpFrame"></param>
            <param name="ipFrame"></param>
            <returns>Bool indicating if something changed</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.UpdateEntry(System.Net.IPAddress,System.Net.IPAddress,eExNetworkLibrary.Subnetmask,System.Int32)">
            <summary>
            Updates an RIP Entry
            </summary>
            <param name="ipaNextHop"></param>
            <param name="ipaDestinatoin"></param>
            <param name="smMask"></param>
            <param name="iMetric"></param>
            <returns>Bool indicating if something changed</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.HandleRIPV2(eExNetworkLibrary.UDP.UDPFrame,eExNetworkLibrary.IP.IPv4Frame)">
            <summary>
            Handles RIPv2 Frames
            </summary>
            <param name="udpFrame"></param>
            <param name="ipFrame"></param>
            <returns>Bool indicating if something changed</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.Cleanup">
            <summary>
            Clears the associated router's Routingtable and stops all timers and working threads.
            Also after calling this method, this instance will not be receiving or sending RIP updates any more.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.Start">
            <summary>
            Starts this RIP router.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RIP.RIPRouter.Stop">
            <summary>
            Stops this RIP router.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPRouter.HoldDownTimer">
            <summary>
            Gets or sets the RIP holddown timer in secods
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPRouter.UpdatePeriod">
            <summary>
            Gets or sets the RIP update period in millisecods
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPRouter.RIPPort">
            <summary>
            Gets or sets the Port used by RIP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPRouter.Version">
            <summary>
            Gets or sets the RIP version of this instance (1 or 2)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPRouter.RIPv2Address">
            <summary>
            Gets or sets the multicast address used by RIPv2
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RIP.RIPRouter.RedistributeStatic">
            <summary>
            Gets or sets a bool indicating whether static routes should also be forwarded.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader">
            <summary>
            This class represents the OSPF common header of all OSPF messages.
            The specific OSPF message for this header (Database description, Hello message, etc.) should be
            placed as encapsulated frame of this frame.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data.
            The corresponding sub-frames (Database description, Hello message etc.) will 
            automatically instanced and placed into this frames encapsulated frame property.
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.Clone">
            <summary>
            Returns an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.Version">
            <summary>
            Gets or sets the OSPF version
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.OSPFType">
            <summary>
            Gets or sets the OSPF frame type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.RouterID">
            <summary>
            Gets or sets the router ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.AreaID">
            <summary>
            Gets or sets the area ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.AuthType">
            <summary>
            Gets or sets the OSPF authentication type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.AuthenticationValue">
            <summary>
            Gets or sets the value of the authentication data
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.AttachedData">
            <summary>
            Gets or sets the attached data, for example, LLS data
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.FrameType">
            <summary>
            Returns FrameType.OSPFHeader
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.FrameBytes">
            <summary>
            Gets the raw byte representation of this frame and the encapsulated frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFCommonHeader.Length">
            <summary>
            Gets the length of this frame and the encapsulated frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFAuthenticationType">
            <summary>
            An enumeration for OSPF authentication types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFAuthenticationType.NoAuthentication">
            <summary>
            No authentication is used
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFAuthenticationType.SimplePasswordAuthentication">
            <summary>
            Simple password authentication is used
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFAuthenticationType.CryptographicAuthentication">
            <summary>
            A cryptographic authentication (MD5) i used
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFFrameType">
            <summary>
            A enumeration for all OSPF frame types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFFrameType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFFrameType.Hello">
            <summary>
            OSPF hello message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFFrameType.DatabaseDescription">
            <summary>
            OSPF database description message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFFrameType.LinkStateRequest">
            <summary>
            OSPF link state request message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFFrameType.LinkStateUpdate">
            <summary>
            OSPF link state update message
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.OSPFFrameType.LinkStateAcknowledgement">
            <summary>
            OSPF link state acknowledgement message
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HelperStructure">
            <summary>
            Represents a small, frame-like helper structure
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HelperStructure.Bytes">
            <summary>
            Gets the bytes of this helper structure
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HelperStructure.Length">
            <summary>
            Gets the length of this helper structure
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPServer">
            <summary>
            This class represents a DHCP server which is capable of assigning IPv4 addresses to clients
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPServer.iDHCPInPort">
            <summary>
            The DHCP in port (UDP)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPServer.iDHCPOutPort">
            <summary>
            The DHCP out port (UDP)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPServer.iIPIDCounter">
            <summary>
            The IP identification counter
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPServer.ipaGateway">
            <summary>
            The gateway IP address. Setting this field to null will cause this DHCP server to announce the outgoing interfac address as gateway.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPServer.ipaDNSServer">
            <summary>
            The DNS server IP address. Setting this field to null will cause this DHCP server to announce the outgoing interface address as DNS server.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.CreatePool(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Creates a pool filled with addresses from the given start to the given end IP address and associates the pool to the according interfaces.
            Items which cannot be asooicated with an interface are ignored.
            </summary>
            <param name="ipaStart">The start address of the pool range</param>
            <param name="ipaEnd">The end address of the pool range</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.AddToPool(eExNetworkLibrary.DHCP.DHCPPoolItem[])">
            <summary>
            Adds the specified items.
            If the items can be associated with more than one connected interfaces, multiple pools are created - one for each interface.
            Items which cannot be associated with an interface are ignored.
            </summary>
            <param name="dhItems">The items to add.</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.AddToPool(eExNetworkLibrary.DHCP.DHCPPoolItem)">
            <summary>
            Adds the specified item.
            An item which cannot be associated with an interface will be ignored.
            </summary>
            <param name="dhItem">The item to add.</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.CreatePool(System.Net.IPAddress,System.Net.IPAddress,eExNetworkLibrary.IPInterface,System.Int32)">
            <summary>
            Creates a pool from the given parameters
            </summary>
            <param name="ipaStart">The start address of the pool range</param>
            <param name="ipaEnd">The end address of the pool range</param>
            <param name="ipi">The IP idnterface to which this pool should be associated</param>
            <param name="iAddrCounter">The index of the address of the interface to use if the interface has multiple IP addresses assigned</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.AddPoolItem(eExNetworkLibrary.DHCP.DHCPPoolItem,eExNetworkLibrary.DHCP.DHCPPool,eExNetworkLibrary.IPInterface)">
            <summary>
            Adds a pool item to a pool of an interface
            </summary>
            <param name="dhPoolItem">The pool item to add</param>
            <param name="dhPool">The DHCP pool to which this item should be added</param>
            <param name="ipi">The interface to which this pool item is associated (or null if it is unknown)</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.RemovePoolItem(eExNetworkLibrary.DHCP.DHCPPoolItem,eExNetworkLibrary.DHCP.DHCPPool,eExNetworkLibrary.IPInterface)">
            <summary>
            Removes a pool item from a pool of an interface
            </summary>
            <param name="dhPoolItem">The pool item to remove</param>
            <param name="dhPool">The DHCP pool from which this item should be removed</param>
            <param name="ipi">The interface to which this pool item is associated (or null if it is unknown)</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.RemovePoolItem(eExNetworkLibrary.DHCP.DHCPPoolItem)">
            <summary>
            Removes a pool item.
            </summary>
            <param name="dhItemToRemove">The item to remove.</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.RemovePoolItems(eExNetworkLibrary.DHCP.DHCPPoolItem[])">
            <summary>
            Removes a range of pool items.
            </summary>
            <param name="dhItemsToRemove">The items to remove.</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.Cleanup">
            <summary>
            Starts the cleanup process and stops the leasing of new addresses
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.GetPoolForInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Gets the address pool associated with an given interface
            </summary>
            <param name="ipi">The interface for which the address pool should be returned</param>
            <returns>The address pool associated with the given interface</returns>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.IncrementIPIDCounter">
            <summary>
            This method is used internally to increment the IP identification counter.
            It increments the IP ID counter and returns the value
            </summary>
            <returns>The current value of the IP ID counter</returns>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.AddInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Adds an interface to this DHCP server
            </summary>
            <param name="ipInterface">The IP interface to add</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.RemoveInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Removes an interface from this DHCP server
            </summary>
            <param name="ipInterface">The IP interface to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Tries to extract a DHCP frame from this frame and forwards it to the HandleDHCPFrame method
            </summary>
            <param name="fInputFrame">The frame to handle</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.HandleDHCPFrame(eExNetworkLibrary.DHCP.DHCPFrame,eExNetworkLibrary.Ethernet.EthernetFrame,eExNetworkLibrary.UDP.UDPFrame,eExNetworkLibrary.IP.IPv4Frame,eExNetworkLibrary.TrafficDescriptionFrame)">
            <summary>
            Handles a DHCP frame and sends responses or leases addresses according to its contents
            </summary>
            <param name="dhcFrame">The DHCP frame to handle</param>
            <param name="ethFrame">The according ethernet frame</param>
            <param name="udpFrame">The according UDP frame</param>
            <param name="ipv4Frame">The according IPv4 frame</param>
            <param name="tdf">The according traffic description frame</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.InvokeAddressLeased(eExNetworkLibrary.DHCP.DHCPServerEventArgs)">
            <summary>
            Invokes the AddressLeased events
            </summary>
            <param name="args">The event args</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.InvokeAddressCreated(eExNetworkLibrary.DHCP.DHCPServerEventArgs)">
            <summary>
            Invokes the AddressCreated events
            </summary>
            <param name="args">The event args</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServer.InvokeAddressRemoved(eExNetworkLibrary.DHCP.DHCPServerEventArgs)">
            <summary>
            Invokes the AddressRemoved events
            </summary>
            <param name="args">The event args</param>
        </member>
        <member name="E:eExNetworkLibrary.DHCP.DHCPServer.AddressCreated">
            <summary>
            This event is fired if an DHCP pool item is created
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.DHCP.DHCPServer.AddressLeased">
            <summary>
            This event is fired if an address is leased
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.DHCP.DHCPServer.AddressRemoved">
            <summary>
            This event is fired if an DHCP pool item is removed
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServer.DHCPPools">
            <summary>
            Returns all DHCP pools of this DHCP server
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServer.DHCPOutPort">
            <summary>
            Gets or sets the DHCP out port
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServer.DHCPInPort">
            <summary>
            Gets or sets the DHCP in Port
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServer.LeaseDuration">
            <summary>
            Gets or sets the DHCP lease duration in seconds
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServer.GatewayAddress">
            <summary>
            The gateway IP address. Setting this property to null will cause this DHCP server to announce the outgoing interface address as gateway.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServer.DNSAddress">
            <summary>
            The DNS server IP address. Setting this property to null will cause this DHCP server to announce the outgoing interface address as DNS server.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServer.OutputHandler">
            <summary>
            Setting output handlers is not supported by DHCP servers
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPServer.DHCPServerEventHandler">
            <summary>
            Represents the method which is used to handle DHCP server events
            </summary>
            <param name="sender">The object which rised the event</param>
            <param name="args">The arguments of the event</param>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPServerEventArgs">
            <summary>
            This class contains event data for DHCP server event args
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPServerEventArgs.#ctor(eExNetworkLibrary.DHCP.DHCPPool,eExNetworkLibrary.DHCP.DHCPPoolItem,eExNetworkLibrary.IPInterface)">
            <summary>
            Creates a new instance of this class with the given parameters
            </summary>
            <param name="pPool">The pool item associated with the event</param>
            <param name="dhcpItem">The DHCP pool associated with the event</param>
            <param name="ipiInterface">The IP interface associated with the event</param>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServerEventArgs.PoolItem">
            <summary>
            The pool item associated with the event
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServerEventArgs.Pool">
            <summary>
            The DHCP pool associated with the event
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPServerEventArgs.Interface">
            <summary>
            The IP interface associated with the event
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.CodeLab.DynamicFunctionCompiler">
             <summary>
             This class can be used to compile class sourcecode which implements IDynamicHandler to just in time plugins or plugin DLLs which can
             in turn be used by the dynamic function handler.
              <example><code>
             // Load the sourcecode
             string strSourcecode = "your class sourcecode which implements IDynamicHandler goes here";
            
             // Create a new dynamic function handler
             DynamicFunctionHandler dfHandler = new DynamicFunctionHandler();
             
             // Start the dynamic function handler
             dfHandler.Start();
             
             // Create a new dynamic function compiler
             DynamicFunctionCompiler dfCompiler = new DynamicFunctionCompiler();
             
             // Compile the sourcecode to a just in time plugin
             IDynamicHandler dynamicHandler = dfCompiler.BuildPreview(strSourcecode);
             
             // Assign the just compiled dynamic handler to the dynamic function handler
             dfHandler.DynamicHandler = dynamicHandler;
             </code></example>
             </summary>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.DynamicFunctionCompiler.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.DynamicFunctionCompiler.BuildPreview(System.String)">
            <summary>
            Builds a just in time plugin from the given sourcecode
            </summary>
            <param name="strSource">The sourcecode to compile. This code must be a class sourcecode including the using directives. The class in this code must implement IDynamicHandler</param>
            <returns>A just in time plugin which can be used with the DynamicFunctionHandler</returns>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.DynamicFunctionCompiler.BuildPlugin(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds a blugin DLL for the eExNetLab from the given source code to the given destination
            </summary>
            <param name="strSource">The sourcecode to compile. This code must be a class sourcecode including the using directives. The class in this code must implement IDynamicHandler</param>
            <param name="strName">The name of this plugin</param>
            <param name="strDescription">The description of this plugin</param>
            <param name="strAuthor">The author of this plugin</param>
            <param name="strDestinationFolder">The destination folder where the generated code and plugin should be saved</param>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.DynamicFunctionCompiler.GeneratePluginSource(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates the sourcecode of a plugin DLL for the eExNetLab but does not compile it
            </summary>
            <param name="strSource">The sourcecode to compile. This code must be a class sourcecode including the using directives. The class in this code must implement IDynamicHandler</param>
            <param name="strName">The name of this plugin</param>
            <param name="strDescription">The description of this plugin</param>
            <param name="strAuthor">The author of this plugin</param>
            <param name="strDestinationFolder">The destination folder where the generated code and plugin should be saved</param>
        </member>
        <member name="T:eExNetworkLibrary.CodeLab.CompilerErrorException">
            <summary>
            This class represents a wrapper for compuler errors
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.CompilerErrorException.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="crErrors">The compiler error collection</param>
        </member>
        <member name="M:eExNetworkLibrary.CodeLab.CompilerErrorException.#ctor(System.CodeDom.Compiler.CompilerErrorCollection,System.String)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="crErrors">The compiler error collection</param>
            <param name="strMessage">The message of this exception</param>
        </member>
        <member name="P:eExNetworkLibrary.CodeLab.CompilerErrorException.Errors">
            <summary>
            Gets the errors which happend during compile time
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer">
            <summary>
            This class provides the function of a DHCP server but adds some attack functionalities. 
            It is capable of forcing an existing DHCP server into starvation by requesting all its addresses
            with spoofed MAC addresses. Further this DHCP spoofer is capable of adding the stolen addresses
            to its own DHCP pool to release them, which does not work every time because the real DHCP server will respond
            with a DHCP NACK. The solution to this problem is to fill the pool of this DHCP spoofer with addresses for a diffrent subnet,
            then attack the original DHCP server and finally route between the subnets
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.Cleanup">
            <summary>
            Stops leasing and stealing addresses and releases all stolen addresses to avoid denial of service situations.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.ReleasePools">
            <summary>
            Forces this DHCP spoofer to release all stolen addresses (Experimental)
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.AddInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Adds an interface to this DHCP spoofer
            </summary>
            <param name="ipInterface">The interface to add only ethernet Interfaces are supported</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.GetSpoofedAddressforItem(eExNetworkLibrary.DHCP.DHCPPoolItem)">
            <summary>
            Gets the spoofed MAC for a stolen DHCP lease
            </summary>
            <param name="dhpItem">The DHCP lease to get the spoofed MAC address for</param>
            <returns>The spoofed MAC for a stolen DHCP lease</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.Start">
            <summary>
            Starts the underlying DHCP server and the stealing of addresses
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.Stop">
            <summary>
            Stops the underlying DHCP server
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Tries to extract a DHCP frame from this frame and forwards it to the HandleDHCPFrame method
            </summary>
            <param name="fInputFrame">The frame to handle</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.HandleDHCPFrame(eExNetworkLibrary.DHCP.DHCPFrame,eExNetworkLibrary.Ethernet.EthernetFrame,eExNetworkLibrary.UDP.UDPFrame,eExNetworkLibrary.IP.IPv4Frame,eExNetworkLibrary.TrafficDescriptionFrame)">
            <summary>
            Handles a DHCP frame and sends responses and requests or leases addresses according to its contents
            </summary>
            <param name="dhcFrame">The DHCP frame to handle</param>
            <param name="ethFrame">The according ethernet frame</param>
            <param name="udpFrame">The according UDP frame</param>
            <param name="ipv4Frame">The according IPv4 frame</param>
            <param name="tdf">The according traffic description frame</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.InvokeAddressStolen(eExNetworkLibrary.DHCP.DHCPServerEventArgs)">
            <summary>
            Fires the AddressStolen event
            </summary>
            <param name="args">The event arguments</param>
        </member>
        <member name="E:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.AddressStolen">
            <summary>
            This event is fired when an address is stolen and placed into this spoofer's pool
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.HostenameToSpoof">
            <summary>
            Gets or sets the hostname which should be spoofed when stealing addresses
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.RequestInterval">
            <summary>
            Gets or sets the interval for stealing addresses in milliseconds
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.StealAdresses">
            <summary>
            Gets or sets a bool which indicates if addresses should be stolen
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.AnswerARPRequests">
            <summary>
            Gets or sets a bool which indicates if ARP requests for stolen addresses should be answered
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.RedirectDNSServer">
            <summary>
            Gets or sets a bool which indicates if the DNS server of stolen leases should be redirected to the attacker's host or the value of DNSAddress
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Spoofing.DHCPSpoofer.RedirectGateway">
            <summary>
            Gets or sets a bool which indicates if the geateway of stolen leases should be redirected GatewayAddress
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TCP.TCPOptions">
            <summary>
            Represents the Options part of a TCP frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPOptions.AddOption(eExNetworkLibrary.TCP.TCPOption)">
            <summary>
            Adds a single TCP option
            </summary>
            <param name="oOption">The option to add</param>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPOptions.RemoveOption(eExNetworkLibrary.TCP.TCPOption)">
            <summary>
            Removes a single TCP option
            </summary>
            <param name="oOption">The option to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPOptions.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class with the contents specified in the given byte array
            </summary>
            <param name="bOptionBytes">The byte array to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPOptions.#ctor">
            <summary>
            Creates a new empty instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPOptions.ToString">
            <summary>
            Returns a string representation of this class
            </summary>
            <returns>A string representation of this class</returns>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPOptions.Options">
            <summary>
            Returns all single options
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPOptions.OptionLength">
            <summary>
            Returns the length of the data of this frame part in bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPOptions.Raw">
            <summary>
            Returns this frame part converted to bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TCP.TCPOption">
            <summary>
            Represents a single option
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPOption.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the specified byte array
            </summary>
            <param name="bOptionBytes">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPOption.#ctor">
            <summary>
            Creates a new empty instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TCP.TCPOption.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns>The string representation of this object</returns>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPOption.OptionData">
            <summary>
            Gets or sets the option data
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPOption.OptionLength">
            <summary>
            Gets the length of this option
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPOption.OptionKind">
            <summary>
            Returns the kind of this option
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TCP.TCPOption.Raw">
            <summary>
            Gets the byte representation of this option
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TCP.TCPOptionKind">
            <summary>
            Specifies various TCP options.
            More Details can be found here: http://www.iana.org/assignments/tcp-parameters/tcp-parameters.xml
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.EndOfList">
            <summary>
            End of the TCP options list
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.NoOperation">
            <summary>
            No operation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.MaximumSegmentSize">
            <summary>
            TCP maximum segment size
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.WindowScale">
            <summary>
            TCP Window Scale (WSOPT)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.SACKPermitted">
            <summary>
            TCP SACK Permitted
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.SACK">
            <summary>
            SACK
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.Echo">
            <summary>
            TCP Echo (Obsoleted)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.EchoReply">
            <summary>
            TCP Echo reply (Obsoleted)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.TSOPT">
            <summary>
            Time Stamp Option
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.PartialOrderConnectionPermitted">
            <summary>
            Partial Order Connection Permitted
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.PartialOrderServiceProfile">
            <summary>
            Partial Order Service Profile
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.CC">
            <summary>
            CC [RFC1644]
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.CCNew">
            <summary>
            CC.New [RFC1644]
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.CCEcho">
            <summary>
            CC.Echo [RFC1644]
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.AlternateChecksumRequest">
            <summary>
            TCP Alternate Checksum Request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.AlternateChecksumData">
            <summary>
            TCP Alternate Checksum Data
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.Skeeter">
            <summary>
            Skeeter
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.Bubba">
            <summary>
            Bubba
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.TrailerChecksumOption">
            <summary>
            TCP Trailer Checksum Option
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.MD5SignatureOption">
            <summary>
            MD5 Signature Option (Obsoleted)
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.SCPSCapabilities">
            <summary>
            SCPS Capabilities
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.SlectiveNegativeAcknowledgements">
            <summary>
            Selective Negative Acknowledgements
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.RecordBoundaries">
            <summary>
            Record Boundaries
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.CorruptionExperienced">
            <summary>
            Corruption Experienced
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.SNAP">
            <summary>
            SNAP
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.TCPCompressionFilter">
            <summary>
            TCP Compression Filter
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.QuickStartResponse">
            <summary>
            Quick Start Response
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.UserTimeoutOperation">
            <summary>
            User Timeout Operation
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.TCP.TCPOptionKind.TCPAuthentiactionOption">
            <summary>
            TCP Authentication Option (TCP-AO)
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.ByteFlipper">
            <summary>
            This simulator item class is capable of flipping bits inside a frame's data. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.ByteFlipper.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.ByteFlipper.DoErrors(System.Byte[])">
            <summary>
            Flips a random chosen count of bits inside the given frame
            </summary>
            <param name="bData">The data to corrupt</param>
            <returns>The corrupted data</returns>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.MITMAttackEntry">
            <summary>
            This class represents attack targets for man in the middle attacks.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.MITMAttackEntry.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class with the given params
            </summary>
            <param name="arphVictimBoB">The IP address of the first victim</param>
            <param name="arphVictimAlice">The IP address of the second victim</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.MITMAttackEntry.#ctor">
            <summary>
            Creates a new instance of this class 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.MITMAttackEntry.Equals(System.Object)">
            <summary>
            Returns a bool indicating whether an object equals this instance
            </summary>
            <param name="obj">The object to compare to this instance</param>
            <returns>A bool indicating whether an object equals this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.MITMAttackEntry.GetHashCode">
            <summary>
            Returns the hash code of this instance
            </summary>
            <returns>The hash code of this instance</returns>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.MITMAttackEntry.VictimBob">
            <summary>
            Gets or sets the IP address of the first victim
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.MITMAttackEntry.VictimAlice">
            <summary>
            Gets or sets the IP address of the second victim
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.MITMAttackEntry.IsRoutingFromAliceToBob">
            <summary>
            Gets or sets a bool indicating whether routing from the first victim to the second victim is done
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.MITMAttackEntry.IsRoutingFromBobToAlice">
            <summary>
            Gets or sets a bool indicating whether routing from the second victim to the first victim is done
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.MITMAttackEntry.IsFullRouting">
            <summary>
            Gets a bool indicating whether full routing is done
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.BufferNetworkStream">
            <summary>
            This class represents a network stream which is capable of
            writing and reading data to and from a buffer. 
            This class is supposed to be used to connect network stream modifiers. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.BufferNetworkStream.ReadByte">
            <summary>
            Reads a single byte from the stream.
            </summary>
            <returns>The byte read.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.BufferNetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given bytes to the network stream.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset in buffer where writing starts.</param>
            <param name="count">The count of bytes to write.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.BufferNetworkStream.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes the given bytes to the network stream.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset in buffer where writing starts.</param>
            <param name="count">The count of bytes to write.</param>
            <param name="bPush">A bool indicating whether a push flag should be set for the bites written.</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.BufferNetworkStream.IsPush">
            <summary>
            A bool indicating whether the last bytes which were read last were written with a push flag set.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RoutingEntry">
            <summary>
            This class represents a routing entry.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingEntry.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingEntry.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32,eExNetworkLibrary.Subnetmask,eExNetworkLibrary.Routing.RoutingEntryOwner)">
            <summary>
            Creates a new instance of this class with the given properties.
            </summary>
            <param name="ipaDestination">The destination IP</param>
            <param name="ipaNextHop">The next hop's IP</param>
            <param name="iMetric">The metric</param>
            <param name="bSubnetMask">The subnetmask of the destination</param>
            <param name="reoOwner">The owner of this route</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingEntry.Equals(System.Object)">
            <summary>
            Compares whether two routing entries are equal or not. 
            </summary>
            <param name="obj">The routing entry to compare to this instance.</param>
            <returns>A bool indicating whether the two routing entries are equal or not</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingEntry.GetHashCode">
            <summary>
            Returns the hash code of this object.
            </summary>
            <returns>The hash code of this object.</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingEntry.Owner">
            <summary>
            Gets or sets the owner of this routing entry.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingEntry.NextHopInterface">
            <summary>
            Gets or sets the next hop's interface associated with this router or null, if the next hop interface is not directly known.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingEntry.Destination">
            <summary>
            Gets or sets the destination IP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingEntry.NextHop">
            <summary>
            Gets or sets the next hop's IP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingEntry.Metric">
            <summary>
            Gets or sets the metric
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.RoutingEntry.Subnetmask">
            <summary>
            Gets or sets the subnetmask of the destination
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RoutingEntryOwner">
            <summary>
            Defines the owner protocol of this routing entry.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.Unknown">
            <summary>
            Unknown sources
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.System">
            <summary>
            Route from the operating system
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.UserStatic">
            <summary>
            User entered static routes
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.Interface">
            <summary>
            A direct route to a subnet connected to an interface
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.OSPF">
            <summary>
            An OSPF route
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.RIP">
            <summary>
            A RIP route
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.BGP">
            <summary>
            A BGP route
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.EIGRP">
            <summary>
            An EIGRP route
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.RoutingEntryOwner.Other">
            <summary>
            A route from any other routing protocol
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Scanning.ARPScanTask">
            <summary>
            This class represents a scan task for the ARP net scanner
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPScanTask.#ctor(System.Net.IPAddress,System.Net.IPAddress,eExNetworkLibrary.MACAddress,System.Net.IPAddress,eExNetworkLibrary.TrafficHandler)">
            <summary>
            Creates a new instance of this class with the given params
            </summary>
            <param name="ipaStart">The start IP address of the range to scan</param>
            <param name="ipaEnd">The end IP address of the range to scan</param>
            <param name="macLocal">The MAC address which should be spoofed during scanning</param>
            <param name="ipLocal">The IP address which should be spoofed during scanning</param>
            <param name="thOut">The traffic handler to which the generated ARP frames should be forwarded. It is wise to assign an ARP net scanner here</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Scanning.ARPScanTask.ScanNext">
            <summary>
            Scans the next host in the range of this scan task
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Scanning.ARPScanTask.IsFinished">
            <summary>
            Gets a bool indicating whether this scan task is finished
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Scanning.ARPScanTask.LastScannedAddress">
            <summary>
            Returns the IP address which was scanned last
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Scanning.ARPScanTask.ScanCount">
            <summary>
            Returns the count of all hosts in this scan range
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Scanning.ARPScanTask.ScannedCount">
            <summary>
            Returns the count of all scanned hosts in this scan range
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.EthernetInterface">
            <summary>
            This class represents an IP-interface which is opened with WinPcap to support layer 2 sniffing and injection
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.GetAllPcapInterfaces">
            <summary>
            Returns all known network adapters
            </summary>
            <returns>All known WinPcap network adapters</returns>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.#ctor(eExNetworkLibrary.Utilities.WinPcapInterface)">
            <summary>
            Creates a new instance of this class, listening to the given interface
            </summary>
            <param name="wpcInterface">A WinPcapInterface which defines the interface to listen to</param>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.AddToSpoofedAddresses(eExNetworkLibrary.MACAddress)">
            <summary>
            Adds a MACAddress here to announce it as spoofed address. The interface will not pass traffic with this source MACAddress to connected traffic handlers if the property AutoExcludeOwnTraffic is also set.
            </summary>
            <param name="macAddress">The MACAddress to add</param>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.RemoveFromSpoofedAddresses(eExNetworkLibrary.MACAddress)">
            <summary>
            Removes a MACAddress from the spoofed address list
            </summary>
            <param name="macAddress">The MACAddress to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.UsesSpoofedAddress(eExNetworkLibrary.MACAddress)">
            <summary>
            Returns whether a MACAddress is contained in this interfaces spoofed address list.
            </summary>
            <param name="macAddress">The MACAddress to search for</param>
            <returns>A bool indicating whether a MACAddress is contained in this interfaces spoofed address list.</returns>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.UsesAddress(eExNetworkLibrary.MACAddress)">
            <summary>
            Returns whether a MACAddress is used by this interface.
            </summary>
            <param name="macAddress">The MACAddress to search for</param>
            <returns>A bool indicating whether a MACAddress is used by this interface.</returns>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.HandleARP(eExNetworkLibrary.Frame)">
            <summary>
            Checks a frame for ARP requests and handles the ARP request
            </summary>
            <param name="fFrame">The frame to check for ARP requests</param>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.Send(System.Byte[])">
            <summary>
            Pushes bytes to the output queue as they are.
            </summary>
            <param name="bBytes">The bytes to send.</param>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.Stop">
            <summary>
            Stops this interface's processing threads and closes the underlying interface.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.Start">
            <summary>
            Starts this interface's processing threads and opens the underlying interface for sniffing.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.Send(eExNetworkLibrary.Frame,System.Net.IPAddress)">
            <summary>
            Pushes this frame to the output queue and updates the ethernet component of this frame according to the given destination address and interface properties.
            </summary>
            <param name="fFrame">The frame to send. This frame must contain an IPv4 frame.</param>
            <param name="ipaDestination">The next hop's IP address of the given frame</param>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.UtilitzeARP(eExNetworkLibrary.Frame)">
            <summary>
            Checks for available ARP messages and updates the ARP table.
            </summary>
            <param name="fInputFrame">A frame to analyze.</param>
        </member>
        <member name="M:eExNetworkLibrary.EthernetInterface.Send(eExNetworkLibrary.Frame)">
            <summary>
            Pushes this frame to the output qeueue as it is, without changin anything.
            </summary>
            <param name="fFrame">The frame to send.</param>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.ARPTable">
            <summary>
            Gets the ARPTable of this interface
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.AutoAnswerARPRequests">
            <summary>
            Gets or sets a bool determining whether this interface should automatically answer ARPRequests for its IPAddresses.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.FilterExpression">
            <summary>
            Gets or sets the WinPcap kernel level filter expression associated with this interface. 
            <remarks>The filter expression will be optimized and the subnetmask used to compile the expression is the first subnetmask of this interface or 255.255.255.255 if no subnetmask is present.</remarks>
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.ExcludeOwnTraffic">
            <summary>
            Gets or sets a bool determining whether this interface should automatically filter its own sent traffic from the input packets.
            <remarks>As this method forces an interface re-open, it causes the WinPcap filter expression of this interface to be recompiled and some packets to pass the driver without being read.</remarks>
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.ExcludeLocalHostTraffic">
            <summary>
            Gets or sets a bool indicating whether all traffic addressed to the localhost at IP level should be filtered out by the FrameCaptured event. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.MACAddress">
            <summary>
            Gets the MACAddress of this interface, as it is known to the operating system.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.PrimaryMACAddress">
            <summary>
            Gets or sets the primary address of this interface. This address will be used by this interface for network communication.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.Description">
            <summary>
            Gets this interfaces description
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.Name">
            <summary>
            Gets this interfaces name
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.EthernetInterface.DNSName">
            <summary>
            Gets this interfaces DNS name
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Threading.WorkItem">
            <summary>
            A work item used internally by the ISynchronizeInvoke model
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.TrafficSplitter">
            <summary>
            This class is capable of cloning frames for further forwarding and for analyzing
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitter.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitter.ContainsTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            Checks whether a specific traffic analyzer is attached to this traffic splitter
            </summary>
            <param name="taAnalyzer">The traffic analyzer to search for</param>
            <returns>A bool indicating whether the given analyzer is attached to this handler</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitter.AddTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            Attachs a specific traffic analyzer to this traffic splitter
            </summary>
            <param name="taAnalyzer">The traffic analyzer to attach</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitter.RemoveTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            Detaches a specific traffic analyzer from this traffic splitter
            </summary>
            <param name="taAnalyzer">The traffic analyzer to detach</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitter.GetTrafficAnalyzers">
            <summary>
            Returns all attavhrf traffic analyzers
            </summary>
            <returns></returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitter.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Forwards the given frame
            </summary>
            <param name="fInputFrame">The frame to forward</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitter.NotifyNext(eExNetworkLibrary.Frame)">
            <summary>
            Forwards the given frame to all attached traffic analyzers and to the default output handler
            </summary>
            <param name="fInputFrame">The frame to forward</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficSplitter.Cleanup">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DNS.DNSQuestion">
            <summary>
            Represents a DNS question encapsulated in a DNS frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSQuestion.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSQuestion.#ctor(System.Byte[],System.Int32@)">
             <summary>
             Creates a new instance of this class by parsing the given data
             <example><code>
             // For parsing DNS frames, set the index variable to 12, because the question section starts there
             int iIndex = 12;
            
             // Parse all questions
             while (lQuestions.Count &lt; iQCount)
             {
                 // Create a new DNS question from the data and pass the index as pointer to the constructor.
                 // The index will be increased during parsing so that it will point to the beginning of the next record.
                 DNSQuestion qLast = new DNSQuestion(bData, ref iIndex);
                 lQuestions.Add(qLast);
             }
             </code></example>
             </summary>
             <param name="bData">The data to parse</param>
             <param name="iParserIndex">The index where parsing begins. This index must be passed as pointer for it will be increased during parsing.</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSQuestion.GetCompressedBytes(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32)">
             <summary>
             Returns the compressed bytes of this DNS question
             <example><code>
             // For constucting DNS frames, set the index variable to 12, because the question section starts there
             int iIndex = 12;
             // Create a new, empty dictionary
             Dictionary&lt;string, int&gt; dictCompression = new Dictionary&lt;string, int&gt;();
            
             // For all questions...
             foreach (DNSQuestion q in lQuestions)
             {
                 // Get the compressed bytes by passing the index at which this record will be inserted in the DNS frame and the dictionary to the corresponding method.
                 bData = q.GetCompressedBytes(dictCompression, iIndex);
                 
                 // Increase the index value
                 iIndex += bData.Length;
                 
                 // ... Do something with the data ...
             }
             
             // For a maximum compression factor re-use the same dictionary in the answer, authorotive and additional section of this frame. 
             </code></example>
             </summary>
             <param name="dictCompression">A dictionary containing strings and their corresponding indexes from a DNS frame. If this is the first call to this function for a specific DNS frame, an empty instance of
             Dictionar&lt;string, int&gt; should be passed, which can be reused in further calls of this method</param>
             <param name="iStartIndex">The index at which this record will be inseted</param>
             <returns>This DNS question compressed as byte array</returns>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSQuestion.Class">
            <summary>
            Gets or sets the DNS resource class
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSQuestion.Type">
            <summary>
            Gets or sets the DNS resource type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSQuestion.Query">
            <summary>
            Gets or sets the query string
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSQuestion.Length">
            <summary>
            Returns the length of this structure in bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSQuestion.Bytes">
            <summary>
            Returns the raw byte representation of this structure
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.DNSQueryLogger">
            <summary>
            This traffic analyzer is capable of logging diffrent DNS queries and their responses
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSQueryLogger.ClearLog">
            <summary>
            Clears the current log
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSQueryLogger.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSQueryLogger.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Checks whether the input frame contains a DNS component. 
            If it contains a DNS frame, the DNS frame will be parsed and logged
            </summary>
            <param name="fInputFrame">The frame to analyze</param>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSQueryLogger.Cleanup">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSQueryLogger.DNSPort">
            <summary>
            Gets or sets the DNS port to use
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Monitoring.DNSQueryLogger.ItemUpdated">
            <summary>
            This event is rised by this class if an item in the current log is added or updated
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSQueryLogger.Log">
            <summary>
            Returns the current log
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.DNSQueryLogger.DNSLoggerEventHandler">
            <summary>
            This delegate is used to handle DNS logger events
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="dsEventArgs">The event arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.DNSEventArgs">
            <summary>
            A simple class which derives from event args and is used to notify about log updates
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSEventArgs.#ctor(eExNetworkLibrary.Monitoring.DNSItem)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="itemChanged">The DNS item which changed</param>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSEventArgs.DNSItem">
            <summary>
            Gets the DNS item which was updated
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.DNSItem">
            <summary>
            Represents a DNS item in the log
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSItem.ClearAnswers">
            <summary>
            Removes all answers
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSItem.AddAnswer(System.Net.IPAddress)">
            <summary>
            Adds a answer
            </summary>
            <param name="ipa">The answer to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSItem.GetAnswers">
            <summary>
            Gets all answers
            </summary>
            <returns>All associated answers</returns>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSItem.ContainsAnswer(System.Net.IPAddress)">
            <summary>
            Returns a bool indicating whether a answer is contained in this frame
            </summary>
            <param name="ipa">The answer to search for</param>
            <returns>A bool indicating whether a answer is contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSItem.RemoveAnswer(System.Net.IPAddress)">
            <summary>
            Removes a specific answer from this frame
            </summary>
            <param name="ipa">The answer to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSItem.#ctor(System.String,System.Net.IPAddress,System.Net.IPAddress,System.TimeSpan,System.Int32)">
            <summary>
            Creates a new instance of this class with the given properties
            </summary>
            <param name="strQueryName">The query name</param>
            <param name="ipaQueryingHost">The querying host</param>
            <param name="ipaAnsweringServer">The answering server</param>
            <param name="tsChacheTime">The cache time</param>
            <param name="iTransactionID">The transaction ID</param>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.DNSItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSItem.TransactionComplete">
            <summary>
            Gets or sets a bool indicating whether the transaction is complete
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSItem.TransactionID">
            <summary>
            Gets or sets the transaction ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSItem.QueryName">
            <summary>
            Gets or sets the query name
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSItem.QueryingHost">
            <summary>
            Gets or sets the querying host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSItem.AnsweringServer">
            <summary>
            Gets or sets the answering server
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.DNSItem.ChacheTime">
            <summary>
            Gets or sets the cache time
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DNS.DNSFrame">
            <summary>
            This class represents a DNS frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.ClearQuestions">
            <summary>
            Clears all question records from this instance
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.AddQuestion(eExNetworkLibrary.DNS.DNSQuestion)">
            <summary>
            Adds a question record to this instance
            </summary>
            <param name="item">The question record to add</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.GetQuestions">
            <summary>
            Returns all question records of this instance
            </summary>
            <returns>All question records of this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.ContainsQuestion(eExNetworkLibrary.DNS.DNSQuestion)">
            <summary>
            Checks whether a specific question record is contained in this instance
            </summary>
            <param name="item">The question record to search for</param>
            <returns>A bool indication whether a specific question record is contained in this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.RemoveQuestion(eExNetworkLibrary.DNS.DNSQuestion)">
            <summary>
            Removes a question record from this instance
            </summary>
            <param name="item">The record to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.ClearAnswers">
            <summary>
            Clears all answer records from this instance
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.AddAnswer(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Adds a answer record to this instance
            </summary>
            <param name="item">The answer record to add</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.GetAnswers">
            <summary>
            Returns all answer records of this instance
            </summary>
            <returns>All answer records of this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.ContainsAnswer(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Checks whether a specific answer record is contained in this instance
            </summary>
            <param name="item">The answer record to search for</param>
            <returns>A bool indication whether a specific answer record is contained in this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.RemoveAnswer(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Removes a answer record from this instance
            </summary>
            <param name="item">The record to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.ClearAuthorotives">
            <summary>
            Clears all authorative records from this instance
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.AddAuthorotive(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Adds a authorotive record to this instance
            </summary>
            <param name="item">The authorotive record to add</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.GetAuthorotives">
            <summary>
            Returns all authorative records of this instance
            </summary>
            <returns>All authorative records of this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.ContainsAuthorotive(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Checks whether a specific authorative record is contained in this instance
            </summary>
            <param name="item">The authorative record to search for</param>
            <returns>A bool indication whether a specific authorative record is contained in this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.RemoveAuthorotive(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Removes a authorotive record from this instance
            </summary>
            <param name="item">The record to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.ClearAdditionals">
            <summary>
            Clears all additional records from this instance
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.AddAdditional(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Adds a additional record to this instance
            </summary>
            <param name="item">The additional record to add</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.GetAdditionals">
            <summary>
            Returns all additional records of this instance
            </summary>
            <returns>All additional records of this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.ContainsAdditional(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Checks whether a specific additional record is contained in this instance
            </summary>
            <param name="item">The additional record to search for</param>
            <returns>A bool indication whether a specific additional record is contained in this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.RemoveAdditional(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Removes a additional record from this instance
            </summary>
            <param name="item">The record to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSFrame.Clone">
            <summary>
            Creates a new identical instance of this frame
            </summary>
            <returns>A new identical instance of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.ResponseCode">
            <summary>
            Gets or sets the DNS response code
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.Identifier">
            <summary>
            Gets or sets the identifier
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.RAFlag">
            <summary>
            Gets or sets the recoursion allowed flag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.QRFlag">
            <summary>
            Gets or sets the QR flag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.AAFlag">
            <summary>
            Gets or sets the authorotive answer flag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.TCFlag">
            <summary>
            Gets or sets the truncated response flag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.RDFlag">
            <summary>
            Gets or sets the recourson desired flag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.FrameType">
            <summary>
            Returns FrameType.DNS
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSFrame.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DNS.DNSResourceType">
            <summary>
            An enumeration for DNS resource types
            Fore more information see http://www.dns.net/dnsrd/rr.html
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.A">
            <summary>
            IPv4 Address of a single host
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.NS">
            <summary>
            Authoritative name server
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.MD">
            <summary>
            Mail destination
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.MF">
            <summary>
            Mail forwarder
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.CNAME">
            <summary>
            Canonical name for a DNS alias
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.SOA">
            <summary>
            Start of authority
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.MB">
            <summary>
            Mailbox
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.MG">
            <summary>
            Mail group member
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.MR">
            <summary>
            Mail rename domain name
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.NULL">
            <summary>
            Null record
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.WKS">
            <summary>
            Well-known service
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.PTR">
            <summary>
            Domain name pointer
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.HINFO">
            <summary>
            Host Information
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.MINFO">
            <summary>
            Mailbox or mailing list information
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.MX">
            <summary>
            Mail Exchanger
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.TXT">
            <summary>
            Text string
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceType.All">
            <summary>
            All available information
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DNS.DNSResourceClass">
            <summary>
            An enumeration for DNS resource classes
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceClass.Internet">
            <summary>
            DNS resource class IN, the internet
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceClass.CSNETClass">
            <summary>
            DNS resource class CS
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceClass.CHAOS">
            <summary>
            DNS resource class CH
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceClass.Hesiod">
            <summary>
            DNS resource class HS
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResourceClass.Any">
            <summary>
            Any DNS resource class
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DNS.DNSOptCode">
            <summary>
            An enumeration for DNS option codes
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSOptCode.Query">
            <summary>
            A query
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSOptCode.IQuery">
            <summary>
            An incerse query
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSOptCode.Status">
            <summary>
            Status 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSOptCode.Reserved">
            <summary>
            Reserverd
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSOptCode.Notify">
            <summary>
            Notify
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSOptCode.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DNS.DNSResponseCode">
            <summary>
            AN enumeration for DNS response codes
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.NoError">
            <summary>
            No error occoured
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.FormatError">
            <summary>
            There was a format error
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.ServerFailure">
            <summary>
            There was a server failure
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.NameError">
            <summary>
            There was a name error
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.NotImplemented">
            <summary>
            The requested function was not implemented
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.Refused">
            <summary>
            The requested function was refused
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.YXDomain">
            <summary>
            
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.YXRRSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.NXRRSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.NotAutorotive">
            <summary>
            
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DNS.DNSResponseCode.NotZone">
            <summary>
            
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter">
            <summary>
            This traffic handler is capable of filtering traffic according to specific rules.
            These rules define whether a frame should be forwarded to the OutputA or OutputB handler or should be dropped on a Match.
            If no rule matches, the frame is forwarded to handler A per default.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.AddRule(eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule)">
            <summary>
            Adds a rule to this conditional traffic splitter
            </summary>
            <param name="tsr">The rule to add</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.RemoveRule(eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule)">
            <summary>
            Removes a rule from this conditional traffic splitter
            </summary>
            <param name="tsr">The rule to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.ContainsRule(eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule)">
            <summary>
            Returns a bool indicating whether a rule is contained in this conditional traffic splitter
            </summary>
            <param name="tsr">The rule to search for</param>
            <returns>A bool indicating whether a rule is contained in this conditional traffic splitter</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.ClearRules">
            <summary>
            Removes all traffic splitter rules from this conditional traffic splitter
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.GetRules">
            <summary>
            Gets all traffic splitter rules from this conditional traffic splitter
            </summary>
            <returns></returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.Cleanup">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Applies all known rules sequentially to the given frame, until a rule matches
            </summary>
            <param name="fInputFrame">The frame to analyze</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.NotifyA(eExNetworkLibrary.Frame)">
            <summary>
            Forwardes a frame to output handler A
            </summary>
            <param name="fInputFrame">The frame to forward</param>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.NotifyB(eExNetworkLibrary.Frame)">
            <summary>
            Forwardes a frame to output handler B
            </summary>
            <param name="fInputFrame">The frame to forward</param>
        </member>
        <member name="E:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.RuleAdded">
            <summary>
            This event is fired when a rule is added
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.RuleRemoved">
            <summary>
            This event is fired when a rule is removed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.FrameForwardedB">
            <summary>
            This event is fired when a frame is forwarded to OutputHandlerB
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.OutputB">
            <summary>
            Gets or sets the OutputB handler.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.OutputA">
            <summary>
            Gets or sets the OutputA handler.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.ConditionalTrafficSplitter.TrafficSplitterEventHandler">
            <summary>
            This delegate is used to handle traffic splitter rule events
            </summary>
            <param name="sender">The calling object</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.TrafficRuleEventArgs">
            <summary>
            A simple class used to carry properties for traffic rule events
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.TrafficRuleEventArgs.#ctor(eExNetworkLibrary.TrafficSplitting.TrafficSplitterRule)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="tsrRule">The rule associated with the event</param>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.TrafficRuleEventArgs.Rule">
            <summary>
            The rule associated with the event
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficModifiers.StreamModification.NetworkStreamModifier.RunAlice">
            <summary>
            When overriden by a derived class, this method should read from alice's stream and write to bob's stream. 
            the data on the stream can safely be modified. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficModifiers.StreamModification.NetworkStreamModifier.RunBob">
            <summary>
            When overriden by a derived class, this method should read from bob's stream and write to alice's stream. 
            the data on the stream can safely be modified. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficModifiers.StreamModification.StreamReplacementOperator.EnableBuffering">
            <summary>
            Gets a bool which indicates whether streams should be buffered for comparison with 
            the data to find. This is especially useful for telnet connections, but can lead to 
            connection lagging due to data not being flushed immediately. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HTTP.HTTPRequest">
            <summary>
            This class represents an HTTP request
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPRequest.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPRequest.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPRequest.#ctor(System.Byte[],System.Int32@)">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iLength">An integer which is set to the length of this HTTP message in bytes</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPRequest.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="sStream">The stream to read from</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPRequest.#ctor(System.IO.Stream,System.Int32@)">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="sStream">The stream to read from</param>
            <param name="iLength">An integer which is set to the length of this HTTP message in bytes</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPRequest.ParseStatusLine(System.String)">
            <summary>
            Parses an HTTP request's status line
            </summary>
            <param name="strFirstLine">The string to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPRequest.GenerateStatusLine">
            <summary>
            Generates this HTTP request's status line.
            </summary>
            <returns>The generated status line.</returns>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPRequest.Method">
            <summary>
            Gets or sets the HTTP method
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPRequest.Response">
            <summary>
            Gets or sets the HTTP response associated with this HTTP request
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPRequest.Target">
            <summary>
            Gets or sets the request's targt
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPRequest.Version">
            <summary>
            Gets or sets the request's version
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.HTTP.HTTPRequest.MessageType">
            <summary>
            Returns HTTPMessageType.Request
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HTTP.HTTPMethod">
            <summary>
            An enumeration representing various HTTP methods
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMethod.Get">
            <summary>
            The GET method
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMethod.Head">
            <summary>
            The HEAD method
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMethod.Post">
            <summary>
            The POST method
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMethod.Put">
            <summary>
            The PUT method
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMethod.Delete">
            <summary>
            The DELETE method
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMethod.Link">
            <summary>
            The LINK method
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMethod.Unlink">
            <summary>
            The UNLINK method
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.HTTP.HTTPMethod.Trace">
            <summary>
            The TRACE method
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer">
            <summary>
            This class represents a DNS on the fly spoofer which is capable of changin DNS responses on the fly and initiating a man in the middle attack this way.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.AddDNSSpooferEntry(eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry)">
            <summary>
            Adds a DNS spoofer entry to this DNS spoofer
            </summary>
            <param name="dnsEntry">The DNS spoofer entry to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.GetDNSSpooferEntries">
            <summary>
            Gets all DNS spoofer entries
            </summary>
            <returns>All DNS spoofer entries</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.ContainsDNSSpooferEntry(eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry)">
            <summary>
            Returns a bool indicating whether this instance contains a specific DNS spoofer entry
            </summary>
            <param name="dnsSpooferEntry">The DNS spoofer entry to search for</param>
            <returns>A bool indicating whether this instance contains a specific DNS spoofer entry</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.RemoveDNSSpooferEntry(eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry)">
            <summary>
            Removes a DNS spoofer entry from this DNS spoofer
            </summary>
            <param name="dnsSpooferEntry">The DNS spoofer entry to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.ModifyTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Checks for DNS frames in this frame and spoofes the response, if a response entry does match
            </summary>
            <param name="fInputFrame">The frame to handle</param>
            <returns>The modified frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.Cleanup">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.DNSPort">
            <summary>
            Gets or sets the DNS port to use
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.DNSSpooferEntryAdded">
            <summary>
            This event is fired whan a DNS spoofer entry is added
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.DNSSpooferEntryRemoved">
            <summary>
            This event is fired whan a DNS spoofer entry is removed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.Spoofed">
            <summary>
            This event is fired when a DNS response was spoofed 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.DNSSpooferEventHandler">
            <summary>
            Represents the method which is used to handle DNS spoofer events like DNSSpooferEntryAdded and DNSSpooferEntryRemoved
            </summary>
            <param name="sender">The object which fired the event</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Modification.DNSOnTheFlySpoofer.DNSSpoofedEventHandler">
            <summary>
            Represents the medhod which is used to handle the DNS spoofed event
            </summary>
            <param name="sender">The object which fired the event</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Modification.DNSSpooferEventArgs">
            <summary>
            This class contains arguments for DNS spoofer events
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSSpooferEventArgs.#ctor(eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="dsSpooferEntry">The DNS spoofer entry associated with the event</param>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Modification.DNSSpooferEventArgs.SpooferEntry">
            <summary>
            The DNS spoofer entry associated with the event
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Modification.DNSSpoofedEventArgs">
            <summary>
            This class contains arguments for DNS spoofed events
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSSpoofedEventArgs.#ctor(eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry,System.Net.IPAddress,System.String)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="dsSpooferEntry">The DNS spoofer entry associated with the event</param>
            <param name="ipaVictim">The IP address of the victim of this spoof</param>
            <param name="strMatchingName">The DNS name which matched</param>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Modification.DNSSpoofedEventArgs.Victim">
            <summary>
            The IP address of the victim of this spoof
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Modification.DNSSpoofedEventArgs.MatchingName">
            <summary>
            The DNS name which matched
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry">
            <summary>
            This class represents an DNS spoofer entry
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry.#ctor(System.String,System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="strName">Gets or sets the DNS name for which the IP address should be spoofed</param>
            <param name="ipaToRedirect">The address which sould be inserted instead of the real address</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry.IsMatch(System.String)">
            <summary>
            Returns a bool indicating whether the name associated with this DNSSpooferEntry is contained in the given name
            </summary>
            <param name="strName">The given name</param>
            <returns>A bool indicating whether the name associated with this DNSSpooferEntry is contained in the given name</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry.IsMatch(eExNetworkLibrary.DNS.DNSResourceRecord)">
            <summary>
            Returns a bool indicating whether the name associated with this DNSSpooferEntry is contained in the given DNSResourceRecord
            </summary>
            <param name="dnsRecord">The given DNS record</param>
            <returns>A bool indicating whether the name associated with this DNSSpooferEntry is contained in the given DNSResourceRecord</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry.Equals(System.Object)">
            <summary>
            Returns a bool indicating whether this instance equals an given object
            </summary>
            <param name="obj">The object to compare this instance to</param>
            <returns>A bool indicating whether this instance equals an given object</returns>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry.GetHashCode">
            <summary>
            Returns the hash code of this instance
            </summary>
            <returns>The hash code of this instance</returns>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry.Name">
            <summary>
            Gets or sets the DNS name for which the IP address should be spoofed
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.Modification.DNSSpooferEntry.Address">
            <summary>
            The address which sould be inserted instead of the real address
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.VirtualHostBase">
            <summary>
            This class represents the definition of a basic host in a network for representation in a graph
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.VirtualHostBase.#ctor(System.Net.IPAddress)">
            <summary>
            Creates a new instance of this class with the given IP-Address
            </summary>
            <param name="ipaHostAddress">The IP-Address to assign</param>
        </member>
        <member name="M:eExNetworkLibrary.VirtualHostBase.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.VirtualHostBase.HostAddress">
            <summary>
            The IP-Address of this host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.VirtualHostBase.NextHops">
            <summary>
            All next hops connected to this host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.VirtualHostBase.PreviousHops">
            <summary>
            All previous hops connected to this hosts
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.VirtualHostBase.RoundtripTime">
            <summary>
            The estimated roundtrip time of a ping to this host
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.VirtualHostBase.Name">
            <summary>
            The name of this host
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.UDP.UDPFrame">
            <summary>
            This class represents a UDPFrame
            <remarks>
            If you change any properties of this frame, you have to manually calculate and set the checksum by crating an IP pseudo header and
            using the CalcualteChecksum method with it. The result must be saved into the Checksum property of this frame.
            </remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.UDP.UDPFrame.#ctor">
            <summary>
            Creates a new instance of this class initialized with default values
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.UDP.UDPFrame.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class with the parsed data of the given byte array
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.UDP.UDPFrame.CalculateChecksum(System.Byte[])">
            <summary>
            Returns the checksum for this UDPFrame. This method works not always clean. An alternative is to set the checksum of an UDP frame to an empty byte array with the length of two.
            </summary>
            <param name="bPseudoHeader">The IP which should be included into the checksum calculation</param>
            <returns>The checksum data</returns>
        </member>
        <member name="M:eExNetworkLibrary.UDP.UDPFrame.ToString">
            <summary>
            Returns a string representation of this frame.
            </summary>
            <returns></returns>
        </member>
        <member name="M:eExNetworkLibrary.UDP.UDPFrame.Clone">
            <summary>
            Creates an identical copy of this UDP frame
            </summary>
            <returns>An identical copy of this UDP frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.UDP.UDPFrame.SourcePort">
            <summary>
            Gets or sets the source port
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.UDP.UDPFrame.DestinationPort">
            <summary>
            Gets or sets the destination port
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.UDP.UDPFrame.Checksum">
            <summary>
            Gets or sets the checksum
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.UDP.UDPFrame.FrameType">
            <summary>
            Gets the frame type for this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.UDP.UDPFrame.FrameBytes">
            <summary>
            Gets the byte data of this UDP frame and its encapsulated frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.UDP.UDPFrame.Length">
            <summary>
            Returns the length of this UDP frame and its encapsulated frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ExceptionEventArgs">
            <summary>
            This class represents EventArgs for exception handling
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ExceptionEventArgs.#ctor(System.Exception,System.DateTime)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="ex">An exception which was thrown</param>
            <param name="dtTime">The time of the excpetion happening</param>
        </member>
        <member name="P:eExNetworkLibrary.ExceptionEventArgs.Exception">
            <summary>
            An exception which was thrown
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.ExceptionEventArgs.Time">
            <summary>
            The time of the exception happening
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.RouterLSA">
            <summary>
            This class represents an OSPF router LSA
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.ClearLinkItems">
            <summary>
            Clears all link items from this frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.AddLinkItem(eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem)">
            <summary>
            Adds a link item to this frame
            </summary>
            <param name="link">The link item to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.GetLinkItems">
            <summary>
            Returns all link items contained in this router LSA
            </summary>
            <returns>All link items contained in this router LSA</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.ContainsLinkItem(eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem)">
            <summary>
            Returns a bool indicating whether a specific link item is contained in this router LSA
            </summary>
            <param name="link">The link item to search for.</param>
            <returns>A bool indicating whether a specific link item is contained in this router LSA</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.RemoveLinkItem(eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem)">
            <summary>
            Removes a specific link item from this router LSA
            </summary>
            <param name="link">The link item to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data.
            </summary>
            <param name="bData"></param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.Clone">
            <summary>
            Returns an identical copy of this router LSA
            </summary>
            <returns>An identical copy of this router LSA</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.IsVirtualEndpoint">
            <summary>
            Gets or sets a bool indicating whether the announced router is a virtual endpoint
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.IsASBoundaryRouter">
            <summary>
            Gets or sets a bool indicating whether the announced router is a boundary router
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.IsAreaBorderRouter">
            <summary>
            Gets or sets a bool indicating whether the announced router is an area border router
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.FrameType">
            <summary>
            Returns FrameType.OSPFRouterLSA
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.Length">
            <summary>
            Returns the length of this router LSA in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem">
            <summary>
            This class represents a link item contained in a OSPF router LSA
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.ClearTOSItems">
            <summary>
            Clears all TOS items contained in this structure
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.AddTOSItem(eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem)">
            <summary>
            Adds a TOS item to this link item
            </summary>
            <param name="tos">The TOS item to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.GetTOSItems">
            <summary>
            Returns all TOS items contained in this link item
            </summary>
            <returns>All TOS items contained in this link item</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.ContainsTOSItem(eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem)">
            <summary>
            Returns a bool indicating whether a specific TOS item is contained in this link item
            </summary>
            <param name="tos">The TOS item to search for</param>
            <returns>A bool indicating whether a specific TOS item is contained in this link item</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.RemoveTOSItem(eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem)">
            <summary>
            Removes a specific TOS item from this link item
            </summary>
            <param name="tos">The TOS item to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data.
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data, starting at a given index.
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The index at which parsing starts</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.Equals(System.Object)">
            <summary>
            Compares this link item to another object.
            </summary>
            <param name="obj">The object to compare this item to</param>
            <returns>A bool indicating whether the object equals this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.GetHashCode">
            <summary>
            Gets the hash code of this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.LinkID">
            <summary>
            Gets or sets the link ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.LinkData">
            <summary>
            Gets or sets the data associated with the link
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.Type">
            <summary>
            Gets or sets the type of the link
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.ZeroTOSMetric">
            <summary>
            Gets or sets the zero TOS metric
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.Length">
            <summary>
            Returns the length of this link item in bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkItem.Bytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkType">
            <summary>
            An enum defining OSPF link types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkType.Unknown">
            <summary>
            An unknown link
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkType.P2P">
            <summary>
            A point to point link
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkType.Transit">
            <summary>
            A transit link
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkType.Stub">
            <summary>
            A stub link
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Routing.OSPF.RouterLSA.LinkType.Virtual">
            <summary>
            A virtual link
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem">
            <summary>
            This class represents a TOS item contained in an OSPF 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem.Equals(System.Object)">
            <summary>
            Compares this TOS item to another object.
            </summary>
            <param name="obj">The object to compare this TOS item to</param>
            <returns>A bool indicating whether the given object and this instance are equal</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem.GetHashCode">
            <summary>
            Gets the hash code of this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem.Metric">
            <summary>
            Gets or sets the metric
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem.TOS">
            <summary>
            Gets or sets the TOS (Type of Service)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem.Length">
            <summary>
            Returns the length of a TOS item in bytes (4)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.RouterLSA.TOSItem.Bytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage">
            <summary>
            This class represents an OSPF LSA update message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.ClearItems">
            <summary>
            Clears all LSA headers from this update message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.AddItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Adds an LSA header to this update message
            </summary>
            <param name="lsa">The LSA header to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.GetItems">
            <summary>
            Returns all LSA headers contained in this instance
            </summary>
            <returns>All LSA headers contained in this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.ContainsItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Returns a bool indicating whether a LSAHeader is contained in this LSA update message
            </summary>
            <param name="lsa">The LSAHeader to search for</param>
            <returns>A bool indicating whether a LSAHeader is contained in this LSA update message</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.RemoveItem(eExNetworkLibrary.Routing.OSPF.LSAHeader)">
            <summary>
            Removes a LSAHeader from this instance
            </summary>
            <param name="lsa">The LSAHeader to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data.
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.Clone">
            <summary>
            Creates an identical copy of this OSPF LSA update message
            </summary>
            <returns>An identical copy of this OSPF LSA update message</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.FrameType">
            <summary>
            Returns FrameType.OSPFLSAUpdate
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSAUpdateMessage.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DNS.DNSResourceRecord">
            <summary>
            This class represens an DNS resource record encapsulated in a DNS frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSResourceRecord.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSResourceRecord.#ctor(System.Byte[],System.Int32@)">
             <summary>
             Creates a new instance of this class by parsing the given data
             <seealso cref="T:eExNetworkLibrary.DNS.DNSQuestion"/>
             <example><code>
             // For parsing DNS frames, set the index variable to the index where parsing should begin. 
             // This is in case of DNS frames 12 + the length of all records before this record
             int iIndex = 12;
            
             // Parse all records
             while (lRecords.Count &lt; iCount)
             {
                 // Create a new DNS records from the data and pass the index as pointer to the constructor.
                 // The index will be increased during parsing so that it will point to the beginning of the next record.
                 DNSResourceRecord qLast = new DNSResourceRecord(bData, ref iIndex);
                 lRecords.Add(qLast);
             }
             </code></example>
             </summary>
             <param name="bData">The data to parse</param>
             <param name="iParserIndex">The index where parsing starts. This index will be incremented automatically during parsing</param>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSResourceRecord.GetCompressedBytes(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32)">
             <summary>
             Returns the compressed bytes of this DNS record
             <example><code>
             // For parsing DNS frames, set the index variable to the index where parsing should begin. 
             // This is in case of DNS frames 12 + the length of all records before this record
             int iIndex = 12;
             // If available, you should use the Dictionary created when compression the DNS questions. Else create a new, empty dictionary
             Dictionary&lt;string, int&gt; dictCompression = new Dictionary&lt;string, int&gt;();
            
             // For all recirds...
             foreach (DNSResourceRecord r in lRecords)
             {
                 // Get the compressed bytes by passing the index at which this record will be inserted in the DNS frame and the dictionary to the corresponding method.
                 bData = r.GetCompressedBytes(dictCompression, iIndex);
                 
                 // Increase the index value
                 iIndex += bData.Length;
                 
                 // ... Do something with the data ...
             }
             
             // For a maximum compression factor re-use the same dictionary in the other resource sections of the frame. 
             </code></example>
             </summary>
             <param name="dictCompression">A dictionary containing strings and their corresponding indexes from a DNS frame. If this is the first call to this function for a specific DNS frame, an empty instance of
             Dictionar&lt;string, int&gt; should be passed, which can be reused in further calls of this method</param>
             <param name="iStartIndex">The index at which this record will be inseted</param>
             <returns>This DNS question compressed as byte array</returns>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSResourceRecord.ResourceData">
            <summary>
            Gets or sets the resource data
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSResourceRecord.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSResourceRecord.Type">
            <summary>
            Gets or sets the resource type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSResourceRecord.Class">
            <summary>
            Gets or sets the resource type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSResourceRecord.TTL">
            <summary>
            Gets or sets the TTL
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSResourceRecord.Length">
            <summary>
            Returns the length of this structure in bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DNS.DNSResourceRecord.Bytes">
            <summary>
            Returns the byte representation of this structure
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.HTTP.HTTPConversationParser">
            <summary>
            This class is capable of parsing a captured HTTP conversation
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.HTTP.HTTPConversationParser.ParseConversation(System.Byte[])">
            <summary>
            This method parses a captured HTTP conversation and returns the parsed requests and responses
            </summary>
            <param name="bData">The captured data to parse</param>
            <returns>An array of respones, each containing the associated requests</returns>
        </member>
        <member name="T:eExNetworkLibrary.Attacks.ISingleHostAttack">
            <summary>
            Provides an interface for all kinds of attacks against single hosts.
            
            When implementing such an attack, please use this interface for enhanced functionality, such as network map integration. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.ISingleHostAttack.Attack(System.Net.IPAddress)">
            <summary>
            Adds the given IPAddress to the attacks victim list, so it will be attacked.
            </summary>
            <param name="ipaVictim">The IPAddress to attack</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.ISingleHostAttack.StopAttack(System.Net.IPAddress)">
            <summary>
            Removes the given IPAddress from the victim list, so attacking will be stopped immediately. 
            </summary>
            <param name="ipaVictim">The IPAddress to remove from the victim list</param>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.ISingleHostAttack.StopAttacks">
            <summary>
            Stops all attacks to all victims immediately and removes all victims from the victim list.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.ISingleHostAttack.PauseAttack">
            <summary>
            Pauses the attack until ResumeAttack() is called.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Attacks.ISingleHostAttack.ResumeAttack">
            <summary>
            Resumes the attack which was suspended when PauseAttack() was called.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Attacks.ISingleHostAttack.Name">
            <summary>
            Returns the name of this attack.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.SystemRouteQuery">
            <summary>
            This class is capable of getting the system's routing table.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.SystemRouteQuery.GetOSRoutes">
            <summary>
            Returns all routes from the operating system
            </summary>
            <returns>All routes from the operating system</returns>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.WANEmulator">
            <summary>
            This class represents a WANEmulator derived from Simulator. This class is capable of constraining speed, delaying the traffic, corrupting the traffic and more. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.WANEmulator.AddSimulatorChainItems">
            <summary>
            Creates all simulation items and linkes them together.
            </summary>
            <returns>The first item in the linked item list.</returns>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.WANEmulator.SpeedConstrainer">
            <summary>
            Gets the speed constrainer of this instance.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.WANEmulator.PacketDropper">
            <summary>
            Gets the packet dropper of this instance.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.WANEmulator.PacketDuplicator">
            <summary>
            Gets the packet duplicator of this instance.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.WANEmulator.PacketReorderer">
            <summary>
            Gets the packet reorderer of this instance.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.WANEmulator.ByteFlipper">
            <summary>
            Gets the byte flipper of this instance.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.WANEmulator.DelayJitter">
            <summary>
            Gets the byte delay jitter of this instance.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage">
            <summary>
            This class represents an OSPF LSA request message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.AddLSARequestItem(eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem)">
            <summary>
            Adds a LSA request item to this LSA request message
            </summary>
            <param name="item">The LSA request item to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.RemoveLSARequestItem(eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem)">
            <summary>
            Removes a LSA request item from this LSA request message
            </summary>
            <param name="item">The LSA request item to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.ContainsLSARequestItem(eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem)">
            <summary>
            Checkes whether a specific LSA request item is contained in this frame
            </summary>
            <param name="item">The item to search for</param>
            <returns>A bool indicating whether a specific LSA request item is contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.GetLSARequestItems">
            <summary>
            Returns all LSA request items contained in this message
            </summary>
            <returns>All LSA request items contained in this message</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.ClearLSARequestItems">
            <summary>
            Removes all LSA request items from this message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.Clone">
            <summary>
            Returns an identical copy of this frame
            </summary>
            <returns>An identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.FrameType">
            <summary>
            Returns FrameType.OSPFLSARequest
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem">
            <summary>
            Represents a signle LSA request item contained in an OSPF LSA request message
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data starting at a given index
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The index from which parsing starts</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.Equals(System.Object)">
            <summary>
            Compares this LSA request item to another object
            </summary>
            <param name="obj">The object to compare this instance to</param>
            <returns>A bool indicating whether this instance and the given object are equal</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.GetHashCode">
            <summary>
            Returns the hash code of this LSA request item
            </summary>
            <returns>The hash code of this LSA request item</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.LinkStateType">
            <summary>
            Gets or sets the link state type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.LinkStateID">
            <summary>
            Gets or sets the link state ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.AdvertisingRouterID">
            <summary>
            Gets or sets the advertising router ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.Length">
            <summary>
            Returns the length of this structure in bytes (12)
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.OSPFLSARequestMessage.LSARequestItem.Bytes">
            <summary>
            Returns the raw byte representation of this LSA request item
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.IRouter">
            <summary>
            Provides an interface from which all routers must derive.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.IRouter.RoutingTable">
            <summary>
            Gets the routing table of a router.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.IRouter.Name">
            <summary>
            Gets the name of a router.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPFrame">
            <summary>
            This class represents a DHCP frame
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.GetDHCPTLVItems">
            <summary>
            Returns all TLV items contained in this instance
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.AddDHCPTLVItem(eExNetworkLibrary.DHCP.DHCPTLVItem)">
            <summary>
            Adds a TLV item to this instance
            </summary>
            <param name="dhItem">The TLV item to add</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.RemoveDHCPTLVItem(eExNetworkLibrary.DHCP.DHCPTLVItem)">
            <summary>
            Removes a specific TLV item from this instance
            </summary>
            <param name="dhItem">The TLV item to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.ClearDHCPTLVItems">
            <summary>
            Clears all TLV items from this instance
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.ContainsDHCPTLVItem(eExNetworkLibrary.DHCP.DHCPTLVItem)">
            <summary>
            Checks whether a specific TLV item is contained in this instance
            </summary>
            <param name="dhItem">The TLV item to search for</param>
            <returns>A bool indicating whether a specific TLV item is contained in this instance</returns>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.ToString">
            <summary>
            Returns the string representation of this frame
            </summary>
            <returns>The string representation of this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.DHCP.DHCPFrame.Clone">
            <summary>
            Returns a new identical copy of this frame
            </summary>
            <returns>A new identical copy of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.MessageType">
            <summary>
            Gets or sets the DHCP type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.HardwareType">
            <summary>
            Gets or sets the hardware address type
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.Hardwarelen">
            <summary>
            Gets or sets the hardware address length
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.Hops">
            <summary>
            Gets or sets the hopcount
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.TransactionID">
            <summary>
            Gets or sets the transaction ID
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.Secs">
            <summary>
            Gets or sets the seconds since the DHCP frame was sent
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.ValidIPFlag">
            <summary>
            Gets or sets the valid IP flag
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.ClientAddress">
            <summary>
            Gets or sets the client address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.OfferedAddress">
            <summary>
            Gets or sets the offered address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.ServerAddress">
            <summary>
            Gets or sets the server address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.RelayAddress">
            <summary>
            Gets or sets the relay address
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.ClientMac">
            <summary>
            Gets or sets the client MAC
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.RequestedServerName">
            <summary>
            Gets or sets the requested server's name
            <remarks>The maximum length of this parameter is 64 chars</remarks>
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.RequestedFile">
            <summary>
            Gets or sets the requested file.
            <remarks>The maximum length of this parameter is 128 chars</remarks>
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.FrameType">
            <summary>
            Returns FrameType.DHCP
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.FrameBytes">
            <summary>
            Returns the byte representation of this frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.DHCP.DHCPFrame.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.DHCP.DHCPType">
            <summary>
            An enumeration for DHCP types
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPType.BootRequest">
            <summary>
            Boot request
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.DHCP.DHCPType.BootReply">
            <summary>
            Boot reply
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.UDPSocket">
            <summary>
            This class represents an UDP socket
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.UDPSocket.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="iSourcePort">The source (remote) port to bind this socket to</param>
            <param name="iDestinationPort">The destination (local) port to bind this socket to</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.UDPSocket.PushUp(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Decapsulates the given UDP frame if the binding of this socket matches the frame and invokes the FrameDecapsulated event when finished.
            </summary>
            <param name="fFrame">The frame to process</param>
            <param name="bPush">A bool indicating whether the frame is delivered with a push flag</param>
            <returns>A bool indicating whether the given frame matched the binding of this socket</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.UDPSocket.PushDown(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Encapsulates the given UDP frame according to the binding of this socket and invokes the FrameEncapsulated event when finished.
            </summary>
            <param name="fFrame">The frame to process</param>
            <param name="bPush">A bool indicating whether the frame is delivered with a push flag</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.UDPSocket.LocalBinding">
            <summary>
            Gets the local port to which this socket is bound
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.UDPSocket.RemoteBinding">
            <summary>
            Gets the remote port to which this socket is bound
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.UDPSocket.BindingInformation">
            <summary>
            Returns the BindingInformation of this socket as UDPBindingInformation
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.UDPBindingInformation.#ctor(eExNetworkLibrary.Sockets.UDPEndPoint,eExNetworkLibrary.Sockets.UDPEndPoint)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="localBinding">The local binding information</param>
            <param name="remoteBinding">The remote binding Information</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.UDPBindingInformation.ToString">
            <summary>
            Gets the description of this EndPoint
            </summary>
            <returns>The description of this EndPoint</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.UDPEndPoint.#ctor(System.Int32)">
            <summary>
            Creates a new UDP endpoint
            </summary>
            <param name="iPort">The port this UDP endpoint belongs to</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.UDPEndPoint.Port">
            <summary>
            Returns the port of the UDP endpoint
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.TCPSocket.#ctor(System.Int32,System.Int32,eExNetworkLibrary.Sockets.IPseudoHeaderSource)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="iSourcePort">The source (remote) port to bind this socket to</param>
            <param name="iDestinationPort">The destination (local) port to bind this socket to</param>
            <param name="bPseudoHeader">The layer 3 pseudeo header to calculate the checksum with</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.TCPSocket.PushUp(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Decapsulates the given TCP frame if the binding of this socket matches the frame and invokes the FrameDecapsulated event when finished.
            </summary>
            <param name="fFrame">The frame to process</param>
            <param name="bPush">The TCP Socket ignores this parameter, since TCP push flags can be set in the TCP frame directly.</param>
            <returns>A bool indicating whether the given frame is matching the binding of this socket</returns>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.TCPSocket.LocalBinding">
            <summary>
            Gets the local port to which this socket is bound
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.TCPSocket.RemoteBinding">
            <summary>
            Gets the remote port to which this socket is bound
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.TCPSocket.MaximumSegmentSize">
            <summary>
            Gets or sets the MSS for this socket. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.TCPSocketState">
            <summary>
            This enum defines some TCP socket states
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.TCPBindingInformation.#ctor(eExNetworkLibrary.Sockets.TCPEndPoint,eExNetworkLibrary.Sockets.TCPEndPoint)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="localBinding">The local binding information</param>
            <param name="remoteBinding">The remote binding Information</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.TCPBindingInformation.ToString">
            <summary>
            Gets the description of this EndPoint
            </summary>
            <returns>The description of this EndPoint</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.TCPEndPoint.#ctor(System.Int32)">
            <summary>
            Creates a new TCP endpoint
            </summary>
            <param name="iPort">The port this TCP endpoint belongs to</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.TCPEndPoint.Port">
            <summary>
            Returns the port of the TCP endpoint
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.TCPRetransmissionQueue.#ctor(eExNetworkLibrary.Sockets.TCPRetransmissionQueue.RetransmitDelegate,eExNetworkLibrary.Sockets.TCPRetransmissionQueue.RetransmitDelegate)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="rtDelegate">A delegate invoked when a TCP frame needs to be retransmitted</param>
            <param name="rtFailureDelegate">A delegate invoked when a retransmission fails multiple times</param>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.SocketNetworkStream">
            <summary>
            This class represents a network stream which handles communications
            with a socket.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketNetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given bytes to the underlying socket.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset in buffer where writing starts.</param>
            <param name="count">The count of bytes to write.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketNetworkStream.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes the given bytes to the underlying socket.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset in buffer where writing starts.</param>
            <param name="count">The count of bytes to write.</param>
            <param name="bPush">A bool indicating whether a push flag should be set for the bites written.</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.SocketNetworkStream.ReadByte">
            <summary>
            Reads a single byte from the stream.
            </summary>
            <returns>The byte read.</returns>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.SocketNetworkStream.IsPush">
            <summary>
            A bool indicating whether the last bytes which were read last were written with a push flag set.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.IPSocket">
            <summary>
            This class represents a network library IP socket implementation.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.IPseudoHeaderSource">
            <summary>
            Represents an interface for classes which support pseudo-header generation for checksum calculation.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.IPseudoHeaderSource.GetPseudoHeader(eExNetworkLibrary.Frame)">
            <summary>
            Has to return a pseudo-header to calculate the TCP checksum from for the given frame.
            </summary>
            <param name="fFrame">The frame to calculate the pseudo-header for.</param>
            <returns>The pseudo-header for the given frame.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.IPSocket.GetPseudoHeader(eExNetworkLibrary.Frame)">
            <summary>
            Returns the IP pseudo header for the given frame.
            </summary>
            <param name="fFrame">The frame to calculate the pseudo-header for.</param>
            <returns>The pseudo header of the given frame.</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.IPSocket.#ctor(System.Net.IPAddress,System.Net.IPAddress,eExNetworkLibrary.IP.IPProtocol)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="ipaRemoteBinding">The remote address to bind this socket to</param>
            <param name="ipaLocalBinding">The local address to bind this socket to</param>
            <param name="ipPotocol">The protocl this socket belongs to</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.IPSocket.PushUp(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Decapsulates the given IP frame if the binding of this socket matches the frame and invokes the FrameDecapsulated event when finished.
            <remarks>This mehtod also handles IP fragmentation</remarks>
            </summary>
            <param name="fFrame">The frame to process</param>
            <param name="bPush">A bool indicating whether the frame is delivered with a push flag</param>
            <returns>A bool indicating whether the given frame matched the binding of this socket</returns>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.IPSocket.PushDown(eExNetworkLibrary.Frame,System.Boolean)">
            <summary>
            Encapsulates the given IP frame according to the binding of this socket and invokes the FrameEncapsulated event when finished.
            <remarks>This method also handles IP fragmentation</remarks>
            </summary>
            <param name="fFrame">The frame to process</param>
            <param name="bPush">A bool indicating whether the frame is delivered with a push flag</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.IPSocket.MaximumTransmissionUnit">
            <summary>
            Gets or sets the MTU for this socket. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.IPSocket.LocalBinding">
            <summary>
            Gets the local IPAddress to which this socket is bound.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.IPSocket.RemoteBinding">
            <summary>
            Gets the remote IPAddress to which this socket is bound.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.IPSocket.ProtocolBinding">
            <summary>
            Gets the protocl this socket belongs to
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.IPSocket.BindingInformation">
            <summary>
            Returns the BindingInformation of this socket as IPBindingInformation
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Sockets.IPBindingInformation">
            <summary>
            This class represents IP socket binding information
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.IPBindingInformation.#ctor(eExNetworkLibrary.Sockets.IPEndPoint,eExNetworkLibrary.Sockets.IPEndPoint,eExNetworkLibrary.IP.IPProtocol)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="localBinding">The local binding information</param>
            <param name="remoteBinding">The remote binding Information</param>
            <param name="protocolBinding">The protocol binding Information</param>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.IPBindingInformation.ToString">
            <summary>
            Gets the description of this EndPoint
            </summary>
            <returns>The description of this EndPoint</returns>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.IPBindingInformation.ProtocolBinding">
            <summary>
            Gets the protocl the socket belongs to
            </summary>
            
        </member>
        <member name="T:eExNetworkLibrary.Sockets.IPEndPoint">
            <summary>
            This class represents an IP endpoint
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Sockets.IPEndPoint.#ctor(System.Net.IPAddress)">
            <summary>
            Creates a new IP endpoint
            </summary>
            <param name="ipaBinding">The address this IP endpoint belongs to</param>
        </member>
        <member name="P:eExNetworkLibrary.Sockets.IPEndPoint.Address">
            <summary>
            Returns the address of the IP endpoint
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.WinPcapDotNet">
            <summary>
            This class is a managed wrapper for WinPcap, the famous packet capture library for windows.
            For information about WinPcap see http://www.winpcap.org
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapDotNet.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapDotNet.GetAllDevices">
            <summary>
            Returns all knwon WinPcapInterfaces of this computer
            </summary>
            <returns>All knwon WinPcapInterfaces of this computer</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapDotNet.SendPacket(System.Byte[])">
            <summary>
            Pushes a byte array to the output queue of this WinPacp interface. 
            </summary>
            <param name="bPacket">The bytes to send</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapDotNet.CompileFilter(System.String,System.Boolean,eExNetworkLibrary.Subnetmask)">
            <summary>
            Compiles a filter string to a kernel level WinPcap filter
            </summary>
            <param name="strFilterString">The filter expression to compile</param>
            <param name="bOptimize">A bool indicating if the expression should be atomatically optimized</param>
            <param name="smMask">The subnetmask to use for this expression. This subnetmask is only important for IP multicast or broadcast probes.</param>
            <returns>The compiled WinPcap filter</returns>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapDotNet.OpenDevice(eExNetworkLibrary.Utilities.WinPcapInterface,eExNetworkLibrary.Utilities.PcapOpenflags)">
            <summary>
            Opens the specified device for sniffing
            </summary>
            <param name="wpiInterface">The device to open</param>
            <param name="pofFlags">Configuration flags for opening</param>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapDotNet.StartCapture">
            <summary>
            Starts the capture on the before opened device
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapDotNet.StopCapture">
            <summary>
            Stops the currently running capture
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapDotNet.CloseDevice">
            <summary>
            Closes the currently open device
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.WinPcapDotNet.ExceptionThrown">
            <summary>
            This event is fired when a error occours in the internal worker threads.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapDotNet.Filter">
            <summary>
            Gets or sets the kernel level filter for this device.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Utilities.WinPcapDotNet.BytesCaptured">
            <summary>
            This event is fired whan bytes are captured
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapDotNet.IsOpen">
            <summary>
            Gets a bool indicating wheather this WinPcap devive is ready to capture data.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.WinPcapDotNet.ByteCapturedHandler">
            <summary>
            This delegate is used for handling captured bytes.
            </summary>
            <param name="wpcHeader">A WinPcapHeader describing packet properties</param>
            <param name="bPacketData">The captured packet data</param>
            <param name="sender">The calling object</param>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.WinPcapCaptureHeader">
            <summary>
            Represents a WinPcapCaptureHeader
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapCaptureHeader.#ctor(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="dtTimestamp">The timestamp</param>
            <param name="iCapturelength">The length of the captured data</param>
            <param name="iPacketlength">The length of the packet</param>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapCaptureHeader.Capturelength">
            <summary>
            The length of the captured bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapCaptureHeader.Packetlength">
            <summary>
            The length of the frame
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapCaptureHeader.Timestamp">
            <summary>
            The timestamp when the data was captrued
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.WinPcapInterface">
            <summary>
            This class represents a WinPcap capable network interface
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.WinPcapInterface.#ctor(System.String,System.String,System.Net.IPAddress[],System.UInt32)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="strName">The name of the interface</param>
            <param name="strDescription">The description of the interface</param>
            <param name="ipAddresses">The IP addresses of the interface</param>
            <param name="uiFlags">The flags of the interface</param>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapInterface.Name">
            <summary>
            Gets the name of the interface
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapInterface.Description">
            <summary>
            Gets the description of the interface
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapInterface.Addresses">
            <summary>
            Gets the IP addresses of the interface
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapInterface.Flags">
            <summary>
            Gets the flags of the interface
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.WinPcapFilter">
            <summary>
            This class represents a WinPcap kernel level filter
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapFilter.FilterExpression">
            <summary>
            The filter expression of this WinPcap filter
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapFilter.Subnetmask">
            <summary>
            The subnet mask associated with this WinPcap filter
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Utilities.WinPcapFilter.FilterStruct">
            <summary>
            The compiled WinPcap filter structure
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.WinPcapFilter.WinPcapFilterStruct">
            <summary>
            Internal representation of WinPcap filters
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Utilities.WinPcapFilter.WinPcapFilterStruct.FilterLength">
            <summary>
            Length of the filter program
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Utilities.WinPcapFilter.WinPcapFilterStruct.FirstInstruction">
            <summary>
            A pointer to the first instruction of the filter program
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Utilities.PcapOpenflags">
            <summary>
            An enumeration for WinPcap open flags
            For more information see http://www.winpcap.org/docs/docs_41b5/html/group__remote__open__flags.html
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Utilities.PcapOpenflags.Promiscuous">
            <summary>
            Defines if the adapter has to go in promiscuous mode.
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Utilities.PcapOpenflags.Data_UDP">
            <summary>
            Defines if the data trasfer (in case of a remote capture) has to be done with UDP protocol. 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Utilities.PcapOpenflags.Nocapture_RPCAP">
            <summary>
            Defines if the remote probe will capture its own generated traffic. 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Utilities.PcapOpenflags.Nocapture_Local">
            <summary>
            Defines if the local adapter will capture its own generated traffic. 
            </summary>
        </member>
        <member name="F:eExNetworkLibrary.Utilities.PcapOpenflags.Max_Responsiveness">
            <summary>
            This flag configures the adapter for maximum responsiveness. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.DelayJitter">
            <summary>
            This simulator item class is capable of randomizing the delay of frames.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.DelayJitter.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.DelayJitter.Push(eExNetworkLibrary.Frame)">
            <summary>
            Applies the effect of this simulator chain item to the given frame.
            </summary>
            <param name="f">The input frame</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.DelayJitter.Start">
            <summary>
            Starts this delay jitter
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.DelayJitter.Stop">
            <summary>
            Stops this delay jitter
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.DelayJitter.MaxDelay">
            <summary>
            The maximum frame delay in milliseconds
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.DelayJitter.MinDelay">
            <summary>
            The minimum frame delay in milliseconds
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.SpeedConstrainer">
            <summary>
            This class is capable of constraining the speed available on a virtual link. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.SpeedConstrainer.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.SpeedConstrainer.Push(eExNetworkLibrary.Frame)">
            <summary>
            Applies the effect of this simulator chain item to the given frame.
            </summary>
            <param name="f">The input frame</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.SpeedConstrainer.Start">
            <summary>
            Starts this simulator item.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.SpeedConstrainer.Stop">
            <summary>
            Stops this simulator item.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Simulation.SpeedConstrainer.Speed">
            <summary>
            Gets or sets the maximum speed in kilobytes per second
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.Router">
            <summary>
            This class represents a router which routes packets to the correct connected interface.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.ContainsRoutedTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            Returns a bool indicating whether this router contains a specific traffic analyzer for its routed traffic.
            </summary>
            <param name="taAnalyzer">The traffic analyzer to search for.</param>
            <returns>A bool indicating whether this router contains a specific traffic analyzer for its routed traffic</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.AddRoutingTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            Adds a traffic analyzer to this router, which will analyze the traffic routed by this router.
            </summary>
            <param name="taAnalyzer">The traffic analyzer to attach.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.RemoveRoutingTrafficAnalyzer(eExNetworkLibrary.CommonTrafficAnalysis.TrafficAnalyzer)">
            <summary>
            Removes a routing traffic analyzer from this router.
            </summary>
            <param name="taAnalyzer">The traffic analyzer to remove.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.GetRoutedTrafficAnalyzers">
            <summary>
            Returns all connected routed traffic analyzers
            </summary>
            <returns>All connected routed traffic analyzers</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="bInsertOSRoutesOnStrartup">A bool indicating whether routes from the operating system should be imported on startup.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.Stop">
            <summary>
            Stops this router and clears its routingtable
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.Start">
            <summary>
            Starts this router
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.ShutdownRouter">
            <summary>
            Stops the routing process and shuts down all interfaces.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Checks whether the given frame has to be routed and routes it to it's destination.
            </summary>
            <param name="fInputFrame">The frame to route.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.AddInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Adds an interface to this router.
            </summary>
            <param name="ipi">The IPInterface to add.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.RemoveInterface(eExNetworkLibrary.IPInterface)">
            <summary>
            Removes an interface from this router.
            </summary>
            <param name="ipi">The IPInterface to remove.</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.Router.PushRoutedFrame(eExNetworkLibrary.Frame)">
            <summary>
            Pushes a routed frame to the connected routed traffic analyzers.
            </summary>
            <param name="fFrame">The frame to push.</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.Router.RoutedPackets">
            <summary>
            Gets or sets the count of overall routed packets.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.Router.RoutingTable">
            <summary>
            Gets the routing table of this router.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.Router.Name">
            <summary>
            Gets the name of this routing instance. 
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.RoutingExcpetion">
            <summary>
            This class represents an exception occoured during the routing process
            This excpetion occours on errors during the forwarding process of a frame, e.g. no route or no ARP entry for the destination.
            See the message of the exception for more details
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingExcpetion.#ctor(System.String)">
            <summary>
            Creates a new instance of this class with the given params
            </summary>
            <param name="strMessage">The message of this exception</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.RoutingExcpetion.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this class with the given params
            </summary>
            <param name="strMessage">The message of this exception</param>
            <param name="exInnerException">The inner exception of this exception</param>
        </member>
        <member name="T:eExNetworkLibrary.DNS.DNSNameEncoder">
            <summary>
            This class represents methods for parsing encoded or compressed DNS names
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSNameEncoder.DecodeDNSName(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Deocdes a DNS compressed or encoded name from a given array of bytes
            </summary>
            <param name="bData">The byte array to parse</param>
            <param name="iIndex">The index at which the name to parse starts</param>
            <param name="iDataLen">A pointer to an integer where the data length is stored. This integer will be increased according to the number of bytes read</param>
            <returns>A decoded DNS name</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSNameEncoder.EncodeDNSName(System.String)">
            <summary>
            Encodes a string to a DNS encoded name, but does not compress it
            </summary>
            <param name="strName">The string to encode</param>
            <returns>A DNS encoded string converted to bytes</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSNameEncoder.CompressDNSName(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32)">
            <summary>
            Compresses a string to a DNS compressed name
            </summary>
            <param name="strName">The name to compress</param>
            <param name="dictCompressionIndices">A dictionary containing strings and their corresponding indexes from a DNS frame. If this is the first call to this function for a specific DNS frame, an empty instance of
            Dictionar&lt;string, int&gt; should be passed, which can be used in further calls of this method</param>
            <param name="iStartIndex">The index where this name is written into the corresponding DNS frame</param>
            <returns>The compressed DNS name converted to bytes</returns>
        </member>
        <member name="M:eExNetworkLibrary.DNS.DNSNameEncoder.CompressDNSNames(System.String[],System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32)">
            <summary>
            Compresses an array of strings to a DNS compressed names
            </summary>
            <param name="strNames">The names to compress</param>
            <param name="dictCompressionIndices">A dictionary containing strings and their corresponding indexes from a DNS frame. If this is the first call to this function for a specific DNS frame, an empty instance of
            Dictionar&lt;string, int&gt; should be passed, which can be used in further calls of this method</param>
            <param name="iDataStartIndex">The index where the names are written into the corresponding DNS frame</param>
            <returns>The compressed DNS names converted to bytes</returns>
        </member>
        <member name="T:eExNetworkLibrary.TrafficModifiers.TextStreamModifier">
            <summary>
            This class can be used to modify TCP stream contents in a specified encoding on the fly.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficModifiers.TextStreamModifier.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficModifiers.TextStreamModifier.Port">
            <summary>
            Gets or sets the port of the connections which should be modified. 
            Use a value of 0 to modify all connections. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Utilities.CompressionHelper.CopyUntilFound(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copies all bytes from SourceStream to DestinationStream, until the data sequence to search is found, including the data sequence to search.
            </summary>
            <param name="sSourceStream">The stream to copy from</param>
            <param name="sDestinationStream">The stream to copy to</param>
            <param name="bDataToSearch">The data to search for</param>
            <returns>A bool indicating wheter the searched data was found before the end of the stream was reached. If the end of the stream was reached first, this method returns false.</returns>
        </member>
        <member name="T:eExNetworkLibrary.ARP.HostTable">
            <summary>
            This class represents an host table for IP/MAC mappings.
            <remarks>This class and all its public members are thread safe.</remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.AddHost(eExNetworkLibrary.ARP.ARPHostEntry)">
            <summary>
            Adds a host entry to this host table
            </summary>
            <param name="arphEntry"></param>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.RemoveHost(System.Net.IPAddress)">
            <summary>
            Removes a host associated with a specific IP address
            </summary>
            <param name="ipaAddress">The IP address to remove the host for.</param>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.GetEntry(System.Net.IPAddress)">
            <summary>
            Returns the host entry for a specific IP address
            </summary>
            <param name="ipa">The IP address to get the host entry for</param>
            <returns>The host entry for a specific IP address</returns>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.RemoveHost(eExNetworkLibrary.MACAddress)">
            <summary>
            Removes a host associated with a specific MAC address
            </summary>
            <param name="mca">The MAC address to remove the host for.</param>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.Contains(System.Net.IPAddress)">
            <summary>
            Returns a bool indicating if a specific IP address is known in this host table
            </summary>
            <param name="ipa">The IP address to search for</param>
            <returns>A bool indicating if a specific IP address is known in this host table</returns>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.Contains(eExNetworkLibrary.MACAddress)">
            <summary>
            Returns a bool indicating if a specific MAC address is known in this host table
            </summary>
            <param name="mca">The MAC address to search for</param>
            <returns>A bool indicating if a specific MAC address is known in this host table</returns>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.GetEntry(eExNetworkLibrary.MACAddress)">
            <summary>
            Returns the host entry for a specific MAC address
            </summary>
            <param name="mca">The MAC address to get the host entry for</param>
            <returns>The host entry for a specific MAC address</returns>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.Clear">
            <summary>
            Clears this host table.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTable.GetKnownHosts">
            <summary>
            Returns all hosts known in this host table
            </summary>
            <returns>All hosts known in this host table</returns>
        </member>
        <member name="E:eExNetworkLibrary.ARP.HostTable.EntryRemoved">
            <summary>
            This event is fired when an ARP entry is removed
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.ARP.HostTable.EntryAdded">
            <summary>
            This event is fired when an ARP entry is added
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.ARP.HostTable.ARPHostTableEventHandler">
            <summary>
            This delegate represents the method used to handle ARP host table event args
            </summary>
            <param name="sender">The class which rised the event</param>
            <param name="args">The event args</param>
        </member>
        <member name="T:eExNetworkLibrary.ARP.HostTableEventArgs">
            <summary>
            This class represents some data associated with ARP host table events
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.ARP.HostTableEventArgs.#ctor(eExNetworkLibrary.ARP.ARPHostEntry)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="ahEntry">The ARP host entry associated with this event</param>
        </member>
        <member name="P:eExNetworkLibrary.ARP.HostTableEventArgs.Entry">
            <summary>
            Gets the ARP host entry associated with this event
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.TrafficSplitting.IPAddressRule">
            <summary>
            This rule is capable of filtering traffic according to IP-Addresses
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.IPAddressRule.#ctor">
            <summary>
            Creates a new instance of this rule
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.IPAddressRule.IsMatch(eExNetworkLibrary.Ethernet.EthernetFrame,eExNetworkLibrary.IP.IPv4Frame,eExNetworkLibrary.UDP.UDPFrame,eExNetworkLibrary.TCP.TCPFrame)">
            <summary>
            Checkes whether this rule matches a given frame.
            </summary>
            <param name="ethFrame">The Ethernet part of the frame</param>
            <param name="ipv4Frame">The IPv4 part of the frame</param>
            <param name="udpFrame">The UDP part of the frame</param>
            <param name="tcpFrame">The TCP part of the frame</param>
            <returns>A bool indicating whether this rule matches a given frame.</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.IPAddressRule.ToString">
            <summary>
            Returns the name of this rule
            </summary>
            <returns>The name of this rule</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.IPAddressRule.GetLongDescription">
            <summary>
            Returns a long description of this rules function
            </summary>
            <returns>A long description of this rules function</returns>
        </member>
        <member name="M:eExNetworkLibrary.TrafficSplitting.IPAddressRule.GetShortDescription">
            <summary>
            Returns a short description of this rules function
            </summary>
            <returns>A short description of this rules function</returns>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.IPAddressRule.Source">
            <summary>
            Gets or sets the source address for which matches occour
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.IPAddressRule.Destination">
            <summary>
            Gets or sets the destination address for which matches occour
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.IPAddressRule.DestinationWildcard">
            <summary>
            Gets or sets the destination wildcard for which matches occour
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.IPAddressRule.Name">
            <summary>
            Gets the name of this rule
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.TrafficSplitting.IPAddressRule.SourceWildcard">
            <summary>
            Gets or sets the source wildcard for which matches occour
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.RawDataFrame">
            <summary>
            Represents a raw byte data frame, which simply stores non-parsed frame bytes
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.RawDataFrame.#ctor(System.Byte[])">
            <summary>
            A constructor which stores the given byte array.
            </summary>
            <param name="bData">The byte array to store</param>
        </member>
        <member name="M:eExNetworkLibrary.RawDataFrame.ToString">
            <summary>
            Creates a string representation of this frame
            </summary>
            <returns>The string represenation of this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.RawDataFrame.Clone">
            <summary>
            Clones this frame.
            </summary>
            <returns>An identic clone of this frame</returns>
        </member>
        <member name="P:eExNetworkLibrary.RawDataFrame.FrameType">
            <summary>
            Gets the type of this frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.RawDataFrame.FrameBytes">
            <summary>
            Gets this frames converted to bytes.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.RawDataFrame.Data">
            <summary>
            Gets or sets this frames data
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.RawDataFrame.Length">
            <summary>
            Gets the length of the bytes of this frame.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Simulation.PacketDuplicator">
            <summary>
            This class is capable of duplicating packets according to a given probability. 
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketDuplicator.CaseHappening(eExNetworkLibrary.Frame)">
            <summary>
            Duplicates the frame
            </summary>
            <param name="f">The frame to duplicate</param>
        </member>
        <member name="M:eExNetworkLibrary.Simulation.PacketDuplicator.CaseNotHappening(eExNetworkLibrary.Frame)">
            <summary>
            Forwards the frame
            </summary>
            <param name="f">the frame to forward</param>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.SummaryLSA">
            <summary>
            This frame represents an OSPF summary LSA
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data beginning from the given start index.
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The index to start parsing from</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of this class by parsing the given data.
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.ClearSummaryItems">
            <summary>
            Clears all LSA summary items
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.AddSummaryItem(eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem)">
            <summary>
            Adds a LSA summary item to this frame.
            </summary>
            <param name="net">The LSA summary item to add</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.GetSummaryItems">
            <summary>
            Returns all LSA summary items contained in this frame.
            </summary>
            <returns>All LSA summary items contained in this frame</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.ContainsSummaryItem(eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem)">
            <summary>
            Returns a bool indicating whether this frame contains a specific summary LSA item.
            </summary>
            <param name="net">The summary LSA item to search for</param>
            <returns>A bool indicating whether this frame contains a specific summary LSA item</returns>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.RemoveSummaryItem(eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem)">
            <summary>
            Removes a summary LSA item from this frame.
            </summary>
            <param name="net">The summary LSA item to remove</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.Clone">
            <summary>
            Returns an identical copy of this summary LSA
            </summary>
            <returns>An identical copy of this summary LSA</returns>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.SummaryLSA.Netmask">
            <summary>
            Gets or sets the subnetmask for the summary LSA
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.SummaryLSA.FrameType">
            <summary>
            Returns FrameType.OSPFSummaryLSA
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.SummaryLSA.FrameBytes">
            <summary>
            Returns the raw byte representation of this frame.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.SummaryLSA.Length">
            <summary>
            Returns the length of this frame in bytes
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem">
            <summary>
            Represents a summary LSA item contained in a summary LSA
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new instance of this class by parsing the given data starting at a given index.
            </summary>
            <param name="bData">The data to parse</param>
            <param name="iStartIndex">The index to start parsing from</param>
        </member>
        <member name="M:eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem.#ctor(System.Byte[])">
            <summary>
            reates a new instance of this class by parsing the given data
            </summary>
            <param name="bData">The data to parse</param>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem.TOS">
            <summary>
            Gets or sets the TOS
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem.Metric">
            <summary>
            Gets or sets the metric
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem.Length">
            <summary>
            Returns 4, the length of every LSA item in bytes
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Routing.OSPF.SummaryLSA.SummaryLSAItem.Bytes">
            <summary>
            Returns the raw byte representation of this helper structure.
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Properties.Resources.DynamicPluginSource">
             <summary>
               Looks up a localized string similar to using System;
            using System.Collections.Generic;
            using System.Text;
            using System.Reflection;
            using eExNetLab.ExtentionLibrary;
            using eExNetLab.TrafficHandlerUIs;
            using eExNetworkLibrary.CodeLab;
            using eExNetworkLibrary;
            using eExNetLab.Extensibility;
            
            namespace eExNetLab.ExtentionLibrary.Generation
            {
                public class DynamicFunctionPlugin_classname_ : DynamicFunctionHandler
                {
                    /// &lt;summary&gt;
                    /// This class loads a dynamic handler automatically from it&apos;s own assembly.
                    [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.HTTPMonitor">
            <summary>
            This traffic analyzer provides the capability to intercept and isolate HTTP traffic.
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.HTTPMonitor.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Monitoring.HTTPMonitor.HTTPSessionMonitored">
            <summary>
            This event is fired when a session is completely intercepted
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Monitoring.HTTPMonitor.HTTPSessionStarted">
            <summary>
            This event is fired when a session starts and monitoring begins.
            </summary>
        </member>
        <member name="E:eExNetworkLibrary.Monitoring.HTTPMonitor.HTTPSessionInformationChanged">
            <summary>
            This event is fired when information related to a HTTP sesion changes. 
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.HTTPMonitor.HTTPPort">
            <summary>
            Gets or sets the HTTP port
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.HTTPMonitor.HTTPMonitorEventHandler">
            <summary>
            This delegate is used to handle surfer monitor events.
            </summary>
            <param name="sender">The object which rised the event</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.HTTPMonitorEventArgs">
            <summary>
            Represents the arguments of the HTTP monitor
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.HTTPMonitorEventArgs.#ctor(eExNetworkLibrary.Monitoring.HTTPConversation)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="siItem">The information associated with the event</param>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.HTTPMonitorEventArgs.HTTPConversationInformation">
            <summary>
            The information associated with the event
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.HTTPConversation">
            <summary>
            This class represents a intercepted HTTP conversation
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.HTTPConversation.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new instance of this class
            </summary>
            <param name="ipaClient">The IP of the client</param>
            <param name="ipaServer">The IP of the server</param>
            <param name="iSourcePort">The requesting client's source port</param>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.HTTPConversation.AddRequest(eExNetworkLibrary.HTTP.HTTPRequest)">
            <summary>
            Adds a HTTP request to this conversation.
            </summary>
            <param name="req">The request to add</param>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.HTTPConversation.Requests">
            <summary>
            Returns all HTTP Requests associated with this communication
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.HTTPConversation.Server">
            <summary>
            Gets the IP-Address of the server
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.HTTPConversation.Client">
            <summary>
            Gets the IP-Address of the client
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.HTTPConversation.SourcePort">
            <summary>
            Gets the requesting client's source port
            </summary>
        </member>
        <member name="T:eExNetworkLibrary.Monitoring.SpeedMeter">
            <summary>
            This traffic handler is capable of measuring the throughput datarate
            <remarks>This traffic handler counts all data as it is on the medium (except ethernet preamble and checksum), not only layer 3 or 4 data</remarks>
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.SpeedMeter.#ctor">
            <summary>
            Creates a new instance of this class
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.SpeedMeter.Start">
            <summary>
            Starts this speed meter
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.SpeedMeter.Stop">
            <summary>
            Stops this speed meter
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.SpeedMeter.Cleanup">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:eExNetworkLibrary.Monitoring.SpeedMeter.HandleTraffic(eExNetworkLibrary.Frame)">
            <summary>
            Counts this frame's bytes
            </summary>
            <param name="fInputFrame">The frame to count</param>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.SpeedMeter.PeakDatarate">
            <summary>
            Returns the peak datarate in bits per second
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.SpeedMeter.RealSpeed">
            <summary>
            Returns exactly the count of bits which where transmitted in the last second
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.SpeedMeter.PeakTime">
            <summary>
            Returns the time when the peak data rate occoured
            </summary>
        </member>
        <member name="P:eExNetworkLibrary.Monitoring.SpeedMeter.Speed">
            <summary>
            Returns the estamined measured datarate in bits per second. This value is updated every 200 milliseconds.
            </summary>
        </member>
    </members>
</doc>
